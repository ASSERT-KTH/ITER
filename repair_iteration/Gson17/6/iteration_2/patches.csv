bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
2	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
3	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
4	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
5	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
6	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
7	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
8	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
9	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
10	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  Date.class!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  Date.class!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  Date.class!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
11	[BUG]  [BUGGY]  if(dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
12	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
13	[BUG]  [BUGGY]  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	129	None	replace
14	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
15	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	104	None	replace
16	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	104	None	replace
17	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	104	None	replace
18	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	104	None	replace
19	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	104	None	replace
20	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	104	None	replace
21	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
22	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
23	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	80	None	replace
24	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
25	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
26	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
27	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
28	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    >=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	226	10	replace
29	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    >=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	226	10	replace
30	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	98	2	replace
31	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	98	2	replace
32	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
33	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
34	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	98	2	replace
35	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	98	2	replace
36	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
37	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
38	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
39	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
40	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	98	2	replace
41	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	98	2	replace
42	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
43	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
44	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
45	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
46	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
47	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
48	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
49	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
50	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	173	2	replace
51	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	173	2	replace
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	173	10	replace
53	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	173	10	replace
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	173	10	replace
55	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	173	10	replace
56	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	173	None	replace
57	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	157	None	replace
58	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	157	10	replace
59	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	157	10	replace
60	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	157	2	replace
61	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	157	2	replace
62	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
63	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
64	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
65	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
66	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
67	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
68	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
69	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
70	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
71	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	246	10	replace
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
73	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
74	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
75	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
76	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
77	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
78	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  JsonParseException  	110	2	replace
79	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  JsonParseException  	110	2	replace
80	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  JsonParseException  	110	2	replace
81	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  JsonParseException  	110	2	replace
82	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
83	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
84	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
85	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	180	None	replace
86	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
87	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
88	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	262	None	replace
89	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	262	None	replace
90	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	262	None	replace
91	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	262	None	replace
92	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	262	None	replace
93	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	262	None	replace
94	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	262	None	replace
95	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
96	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
97	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Long.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	39	None	replace
98	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
99	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
100	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
101	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	43	None	replace
102	[BUG]  [BUGGY]  if(localFormat!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	43	None	replace
103	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
104	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
105	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
106	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	34	None	replace
107	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
108	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
109	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Locale.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	213	None	replace
110	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	169	10	replace
111	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	169	10	replace
112	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
113	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
114	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
115	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
116	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
117	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
118	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
119	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
120	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	297	None	replace
121	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	297	None	replace
122	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	297	None	replace
123	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	297	None	replace
124	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
125	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
126	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
127	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
128	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	261	None	replace
129	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	289	None	replace
130	[BUG]  [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	289	None	replace
131	[BUG]  [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	289	None	replace
132	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	289	None	replace
133	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
134	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
135	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	12	None	replace
136	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
137	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
138	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
139	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
140	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
141	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
142	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
143	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
144	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	288	None	replace
145	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	232	None	replace
146	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	232	None	replace
147	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	232	None	replace
148	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	232	None	replace
149	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	232	None	replace
150	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	232	None	replace
151	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	232	None	replace
152	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
153	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
154	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
155	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
156	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
157	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
158	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
159	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
160	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
161	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	177	10	replace
162	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	177	10	replace
163	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
164	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType    >=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	128	None	replace
165	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	314	None	replace
166	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	314	None	replace
167	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	314	None	replace
168	[BUG]  [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	314	None	replace
169	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	314	None	replace
170	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	314	None	replace
171	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
172	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
173	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
174	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
175	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
176	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
177	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	69	None	replace
178	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
179	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	69	10	replace
180	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
181	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
182	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
183	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
184	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
185	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
186	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
187	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
188	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.Class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	306	None	replace
189	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.Class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	306	None	replace
190	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.Class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	306	None	replace
191	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);	  this(dateType,    enUsFormat,    localFormat,    null);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
192	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  null);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  null);	  this(dateType,    enUsFormat,    localFormat,    null);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
193	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  this);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  this);	  this(dateType,    enUsFormat,    localFormat,    null);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
194	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  null,  datePattern);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  null,  datePattern);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  null,  datePattern);	  this(dateType,    enUsFormat,    localFormat,    null);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
195	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
196	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
197	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
198	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
199	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	237	None	replace
200	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
201	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
202	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
203	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
204	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
205	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
206	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
207	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
208	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
209	[BUG]  [BUGGY]  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	317	None	replace
210	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	317	10	replace
211	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	317	10	replace
212	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	317	None	replace
213	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	317	10	replace
214	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	317	10	replace
215	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	317	None	replace
216	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	265	None	replace
217	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	265	None	replace
218	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	265	None	replace
219	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
220	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	265	None	replace
221	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
222	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType    >=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	111	2	replace
223	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType    >=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	111	2	replace
224	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType    >=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	111	10	replace
225	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType    >=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	111	10	replace
226	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
227	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  LocalDate.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  LocalDate.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  LocalDate.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
228	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	204	None	replace
229	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	204	2	replace
230	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	204	2	replace
231	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	204	2	replace
232	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	204	2	replace
233	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	144	10	replace
234	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	144	10	replace
235	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	144	None	replace
236	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
237	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  localFormat)  {  [CE]  incomparable  types:  Class<CAP#1>  and  DateFormat  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  localFormat)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  localFormat)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  DateFormat	144	None	replace
238	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	144	None	replace
239	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	59	None	replace
240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	59	10	replace
241	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	59	10	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	59	10	replace
243	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	59	10	replace
244	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	59	10	replace
245	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	59	10	replace
246	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	59	None	replace
247	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
248	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
249	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  Class  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
250	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
251	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
252	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
253	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	319	None	replace
254	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
255	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
256	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
257	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
258	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
259	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
260	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	50	None	replace
261	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	165	10	replace
262	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	165	10	replace
263	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
264	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
265	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
266	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
267	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  timeType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  timeType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  timeType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
268	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  localFormat!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
269	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
270	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
271	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
272	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
273	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
274	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
275	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
276	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
277	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
278	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
279	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
280	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
281	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
282	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
283	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  timeType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  timeType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  timeType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	25	None	replace
284	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class,  localFormat)  {  [CE]  ')'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class,  localFormat)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class,  localFormat)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
285	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localeFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  localeFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localeFormat);	  super(dateType,    enUsFormat);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
286	[BUG]  [BUGGY]  super(dateType,  localFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  localFormat);	  super(dateType,    enUsFormat);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
287	[BUG]  [BUGGY]  super(dateType.getName(),  enUsFormat);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType.getName(),  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType.getName(),  enUsFormat);	  super(dateType,    enUsFormat);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
288	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  LocalFormat.class);  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  LocalFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  LocalFormat.class);	  super(dateType,    enUsFormat);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
289	[BUG]  [BUGGY]  super(dateType,  LocalFormat.class);  [CE]  illegal  start  of  type  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  LocalFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  LocalFormat.class);	  super(dateType,    enUsFormat);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
290	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
291	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
292	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
293	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
294	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
295	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
296	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
297	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
298	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
299	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
300	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	268	10	replace
301	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	268	10	replace
302	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	268	10	replace
303	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	268	10	replace
304	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
305	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
306	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
307	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
308	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
309	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
310	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
311	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
312	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType    >>    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	113	2	replace
313	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType    >>    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	113	2	replace
314	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
315	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
316	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
317	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
318	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
319	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
320	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
321	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
322	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
323	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
324	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
325	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
326	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
327	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
328	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
329	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
330	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
331	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
332	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
333	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
334	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
335	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	264	None	replace
336	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
337	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	254	10	replace
338	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	254	10	replace
339	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	254	10	replace
340	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	254	10	replace
341	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	302	None	replace
342	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	302	None	replace
343	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  Class  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.Class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	269	None	replace
344	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	178	2	replace
345	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	178	2	replace
346	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	75	10	replace
347	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	75	10	replace
348	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
349	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
350	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
351	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
352	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
353	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  String.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  String.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
354	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
355	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
356	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	123	None	replace
357	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	101	None	replace
358	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	101	None	replace
359	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	101	None	replace
360	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	101	None	replace
361	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	101	None	replace
362	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	310	None	replace
363	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	310	None	replace
364	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  TimeZone.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	310	None	replace
365	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	310	None	replace
366	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	310	None	replace
367	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
368	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
369	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
370	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
371	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
372	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
373	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
374	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
375	[BUG]  [BUGGY]  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  Class  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	313	None	replace
376	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
377	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
378	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
379	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
380	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
381	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
382	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	236	2	replace
383	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	236	2	replace
384	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
385	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
386	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	77	None	replace
387	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
388	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
389	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
390	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
391	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
392	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
393	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
394	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
395	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
396	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	99	None	replace
397	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	99	None	replace
398	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
399	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
400	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
401	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
402	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
403	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
404	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Duration.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Duration.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Duration.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
405	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
406	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
407	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
408	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
409	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
410	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
411	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
412	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
413	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
414	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
415	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
416	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
417	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
418	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
419	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
420	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
421	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
422	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
423	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
424	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	160	None	replace
425	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
426	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	175	10	replace
427	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	175	10	replace
428	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	175	None	replace
429	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	175	10	replace
430	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	175	10	replace
431	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	175	2	replace
432	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	175	2	replace
433	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
434	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	175	None	replace
435	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	231	None	replace
436	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	105	None	replace
437	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	105	None	replace
438	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat  ==  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat  ==  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat  ==  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	105	None	replace
439	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	162	None	replace
440	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
441	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
442	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
443	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
444	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
445	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  Time.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	67	None	replace
446	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Time.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	67	None	replace
447	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
448	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	35	10	replace
449	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	35	10	replace
450	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	35	10	replace
451	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	35	10	replace
452	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	97	2	replace
453	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	97	2	replace
454	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	97	2	replace
455	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	97	2	replace
456	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
457	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
458	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
459	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
460	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
461	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
462	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
463	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
464	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
465	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	201	None	replace
466	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
467	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	201	None	replace
468	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	201	None	replace
469	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	201	None	replace
470	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	318	None	replace
471	[BUG]  [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	318	None	replace
472	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	318	None	replace
473	[BUG]  [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	318	None	replace
474	[BUG]  [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Class>	318	None	replace
475	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
476	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	53	None	replace
477	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	118	10	replace
478	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	118	10	replace
479	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	118	10	replace
480	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	118	10	replace
481	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	191	10	replace
482	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	191	10	replace
483	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	191	10	replace
484	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	191	10	replace
485	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	191	10	replace
486	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	191	10	replace
487	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Date.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	16	None	replace
488	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	215	None	replace
489	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	92	2	replace
490	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	92	2	replace
491	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
492	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	92	None	replace
493	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
494	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
495	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	295	2	replace
496	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	295	2	replace
497	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
498	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
499	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	295	2	replace
500	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	295	2	replace
501	[BUG]  [BUGGY]  if(dateType  ==  null  ||  Date.class!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  Class<Date>  and  Class<Timestamp>  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  Date.class!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  Date.class!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<Date>  and  Class<Timestamp>	295	None	replace
502	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
503	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
504	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	241	None	replace
505	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	241	None	replace
506	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	241	None	replace
507	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	241	None	replace
508	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	241	None	replace
509	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
510	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
511	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
512	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
513	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
514	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
515	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
516	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
517	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	133	10	replace
518	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	133	10	replace
519	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	298	None	replace
520	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
521	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
522	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
523	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  localFormat!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
524	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
525	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	109	10	replace
526	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	109	10	replace
527	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	109	2	replace
528	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	109	2	replace
529	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	109	10	replace
530	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	109	10	replace
531	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	38	None	replace
532	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
533	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
534	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
535	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
536	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
537	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
538	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
539	[BUG]  [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	93	None	replace
540	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	179	10	replace
541	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	179	10	replace
542	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
543	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
544	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
545	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
546	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
547	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
548	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
549	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
550	[BUG]  [BUGGY]  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	216	None	replace
551	[BUG]  [BUGGY]  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	216	None	replace
552	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	94	2	replace
553	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	94	2	replace
554	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	94	2	replace
555	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	94	2	replace
556	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Time.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
557	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	94	None	replace
558	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  false);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  false);	  this(dateType,    enUsFormat,    localFormat,    false);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
559	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  true);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  true);	  this(dateType,    enUsFormat,    localFormat,    false);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
560	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  false);  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat.class,  false);	  this(dateType,    enUsFormat,    localFormat,    false);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
561	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  false,  datePattern);  [CE]  illegal  start  of  type  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  false,  datePattern);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  false,  datePattern);	  this(dateType,    enUsFormat,    localFormat,    false);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
562	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
563	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
564	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
565	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
566	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
567	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
568	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
569	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
570	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
571	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
572	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	115	10	replace
573	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	44	10	replace
574	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	44	10	replace
575	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	44	10	replace
576	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	44	10	replace
577	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	44	10	replace
578	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	44	10	replace
579	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
580	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
581	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
582	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
583	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
584	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date  [CE]  ')'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
585	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
586	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Time.class)  {  [CE]  cannot  find  symbol  timeType  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	249	None	replace
587	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
588	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
589	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
590	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
591	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
592	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
593	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeZone.class  &&  localFormat!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeZone.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeZone.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
594	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
595	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
596	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
597	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
598	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
599	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	79	2	replace
600	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	79	2	replace
601	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
602	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
603	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
604	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
605	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
606	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
607	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
608	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
609	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
610	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
611	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
612	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
613	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
614	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
615	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
616	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
617	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	163	None	replace
618	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
619	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
620	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
621	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
622	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
623	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
624	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
625	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
626	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
627	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
628	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
629	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
630	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
631	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
632	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
633	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
634	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
635	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
636	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
637	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
638	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
639	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
640	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  String.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  String.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
641	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
642	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
643	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
644	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	206	None	replace
645	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
646	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
647	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
648	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	234	10	replace
649	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	234	10	replace
650	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
651	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	172	None	replace
652	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
653	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
654	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
655	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
656	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
657	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
658	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
659	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	200	10	replace
660	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	200	10	replace
661	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
662	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
663	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	200	10	replace
664	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	200	10	replace
665	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
666	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
667	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
668	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
669	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  localFormat)  {  [CE]  incomparable  types:  Class<CAP#1>  and  DateFormat  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  localFormat)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  localFormat)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  DateFormat	24	None	replace
670	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
671	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	238	None	replace
672	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalDate.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalDate.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalDate.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
673	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
674	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	10	None	replace
675	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	193	10	replace
676	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	193	10	replace
677	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	203	None	replace
678	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	203	None	replace
679	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
680	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	203	None	replace
681	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
682	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	203	None	replace
683	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
684	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Calendar.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	309	None	replace
685	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
686	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
687	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
688	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	242	None	replace
689	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	242	None	replace
690	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
691	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this.localFormat  =  localFormat;  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this.localFormat  =  localFormat;	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
692	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat);  this.localFormat  =  localFormat;  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  localFormat);  this.localFormat  =  localFormat;  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localFormat);  this.localFormat  =  localFormat;	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
693	[BUG]  [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
694	[BUG]  [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
695	[BUG]  [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
696	[BUG]  [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
697	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	107	None	replace
698	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	107	None	replace
699	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	139	10	replace
700	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	139	10	replace
701	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	139	10	replace
702	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	139	10	replace
703	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
704	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
705	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
706	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
707	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
708	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
709	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
710	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
711	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
712	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	194	None	replace
713	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	194	None	replace
714	[BUG]  [BUGGY]  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    >=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	41	None	replace
715	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
716	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
717	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
718	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
719	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
720	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
721	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
722	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
723	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
724	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
725	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
726	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
727	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
728	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
729	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
730	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
731	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
732	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  this.localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  this.localFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
733	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  localFormat,  this.localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localFormat,  this.localFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
734	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat,  null);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  localFormat,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localFormat,  null);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
735	[BUG]  [BUGGY]  super(dateType,  localFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  localFormat,  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  localFormat,  enUsFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
736	[BUG]  [BUGGY]  DefaultDateTypeAdapter(localFormat,  enUsFormat,  dateType);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(localFormat,  enUsFormat,  dateType);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(localFormat,  enUsFormat,  dateType);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
737	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
738	[BUG]  [BUGGY]  DefaultDateTypeAdapter(this.dateType,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(this.dateType,  enUsFormat,  localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(this.dateType,  enUsFormat,  localFormat);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
739	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  this.localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  enUsFormat,  this.localFormat);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
740	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  localeFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  localeFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  enUsFormat,  localeFormat);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
741	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  localFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(dateType,  localFormat,  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  localFormat,  enUsFormat);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
742	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	102	None	replace
743	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
744	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
745	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  timeType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  timeType  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  timeType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  timeType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	285	None	replace
746	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
747	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
748	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
749	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
750	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	198	None	replace
751	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	198	None	replace
752	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	198	None	replace
753	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	198	None	replace
754	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	198	None	replace
755	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
756	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
757	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
758	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
759	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
760	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
761	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
762	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
763	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
764	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
765	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
766	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
767	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
768	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
769	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
770	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
771	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
772	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
773	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
774	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
775	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
776	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
777	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
778	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
779	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	205	None	replace
780	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
781	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
782	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	275	10	replace
783	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	275	10	replace
784	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	275	None	replace
785	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	275	None	replace
786	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	275	None	replace
787	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	208	None	replace
788	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	208	None	replace
789	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	208	None	replace
790	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
791	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
792	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
793	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
794	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
795	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
796	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
797	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	174	None	replace
798	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
799	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
800	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
801	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
802	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
803	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
804	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
805	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
806	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
807	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	257	10	replace
808	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	155	None	replace
809	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
810	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
811	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
812	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
813	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
814	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
815	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
816	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
817	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
818	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
819	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
820	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
821	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
822	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||	  	non-compiled	[CE]  illegal  start  of  expression	256	None	add
823	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
824	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
825	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	26	None	replace
826	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
827	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
828	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
829	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
830	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
831	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
832	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
833	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
834	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
835	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  timeType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  timeType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  timeType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	287	None	replace
836	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.SHORT)  {  [CE]  cannot  find  symbol  TimeFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.SHORT)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.SHORT)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  TimeFormat	287	None	replace
837	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
838	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(localFormat  ==  null)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  JsonParseException  	32	2	replace
839	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  [FE]  JsonParseException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  null)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  JsonParseException  	32	2	replace
840	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
841	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
842	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
843	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
844	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
845	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
846	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
847	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
848	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
849	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
850	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
851	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
852	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
853	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
854	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
855	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
856	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
857	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
858	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	171	None	replace
859	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
860	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
861	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
862	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
863	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
864	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
865	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
866	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
867	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
868	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
869	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
870	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
871	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	62	None	replace
872	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
873	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
874	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
875	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
876	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
877	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
878	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
879	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
880	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
881	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  LocalFormat.class);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  LocalFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  LocalFormat.class);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
882	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  localFormat);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat.class,  localFormat);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
883	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  LocalFormat.class);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  LocalFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  LocalFormat.class);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
884	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  localeFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  localeFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat.class,  localeFormat);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
885	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  Class.class);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  Class.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  Class.class);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
886	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
887	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
888	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
889	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
890	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
891	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
892	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
893	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
894	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
895	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
896	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
897	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
898	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
899	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
900	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
901	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
902	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	188	10	replace
903	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	188	10	replace
904	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
905	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
906	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
907	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
908	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
909	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
910	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
911	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
912	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
913	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
914	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
915	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
916	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
917	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
918	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	312	None	replace
919	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	312	None	replace
920	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	312	None	replace
921	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	312	None	replace
922	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	312	None	replace
923	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	271	None	replace
924	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	271	None	replace
925	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
926	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
927	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
928	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
929	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
930	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
931	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
932	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
933	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
934	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
935	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
936	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
937	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
938	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
939	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
940	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
941	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
942	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
943	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
944	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
945	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
946	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
947	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
948	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
949	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
950	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	8	None	replace
951	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
952	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
953	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
954	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
955	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
956	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
957	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
958	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
959	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	207	10	replace
960	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	207	10	replace
961	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	207	10	replace
962	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	207	10	replace
963	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	207	None	replace
964	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	207	2	replace
965	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	207	2	replace
966	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	240	10	replace
967	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	240	10	replace
968	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	240	10	replace
969	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	240	10	replace
970	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	240	None	replace
971	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
972	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
973	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
974	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
975	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
976	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
977	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
978	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
979	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
980	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
981	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	252	10	replace
982	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	316	2	replace
983	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	316	2	replace
984	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	266	None	replace
985	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
986	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
987	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	266	None	replace
988	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	28	10	replace
989	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	28	10	replace
990	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	28	2	replace
991	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	28	2	replace
992	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
993	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
994	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
995	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
996	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
997	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
998	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
999	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1000	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1001	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1002	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1003	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1004	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1005	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1006	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1007	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1008	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1009	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1010	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1011	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1012	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1013	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1014	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1015	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1016	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1017	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1018	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1019	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	209	None	replace
1020	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	209	None	replace
1021	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	209	None	replace
1022	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	209	None	replace
1023	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1024	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1025	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1026	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1027	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1028	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class  ||  localFormat!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1029	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1030	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  timeType  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  timeType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	311	None	replace
1031	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1032	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1033	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  DEFAULT_NAME);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  DEFAULT_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  DEFAULT_NAME);	  this(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1034	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1035	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1036	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1037	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1038	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1039	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1040	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1041	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1042	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
1043	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
1044	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
1045	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	243	None	replace
1046	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1047	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	100	None	replace
1048	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	100	None	replace
1049	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	292	None	replace
1050	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	292	None	replace
1051	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1052	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localeFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localeFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localeFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	250	None	replace
1053	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1054	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1055	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1056	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1057	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1058	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1059	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1060	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1061	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1062	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1063	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1064	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1065	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1066	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1067	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1068	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1069	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1070	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	211	None	replace
1071	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat  ==  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	211	None	replace
1072	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	211	None	replace
1073	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	211	None	replace
1074	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1075	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1076	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1077	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1078	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1079	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1080	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1081	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	244	None	replace
1082	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1083	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1084	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1085	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1086	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  localFormat!=  Date.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  localFormat!=  Date.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  localFormat!=  Date.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1087	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1088	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1089	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1090	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1091	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1092	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1093	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1094	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1095	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	82	10	replace
1096	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	82	10	replace
1097	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	82	None	replace
1098	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	228	10	replace
1099	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	228	10	replace
1100	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localeFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localeFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localeFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	168	None	replace
1101	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1102	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1103	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1104	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1105	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1106	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1107	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1108	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	245	None	replace
1109	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	137	10	replace
1110	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	137	10	replace
1111	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1112	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1113	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1114	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1115	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1116	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1117	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1118	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1119	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1120	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	161	2	replace
1121	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	161	2	replace
1122	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
1123	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
1124	[BUG]  [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	223	None	replace
1125	[BUG]  [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	239	None	replace
1126	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1127	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1128	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1129	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1130	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1131	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	197	None	replace
1132	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1133	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1134	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1135	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1136	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1137	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  localFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  DateFormat.class,  localFormat,  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  localFormat,  enUsFormat);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1138	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  SIMPLE_NAME);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1139	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  localeFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  DateFormat.class,  localeFormat,  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  localeFormat,  enUsFormat);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1140	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localeFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localeFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  enUsFormat,  localeFormat);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1141	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  null);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  null);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1142	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  SIMPLE_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  SIMPLE_NAME);	  this(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1143	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  localFormat);	  this(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1144	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  SHORT_NAME);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  SHORT_NAME);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  SHORT_NAME);	  this(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1145	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1146	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1147	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1148	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalDate.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1149	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	267	None	replace
1150	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1151	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1152	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1153	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1154	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1155	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1156	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  >=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1157	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1158	[BUG]  [BUGGY]  super(dateType,  localeFormat);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  localeFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  localeFormat);	  super(dateType);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
1159	[BUG]  [BUGGY]  super(dateType.getComponentType());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType.getComponentType());  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType.getComponentType());	  super(dateType);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
1160	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  true);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat.class,  true);	  this(dateType,    enUsFormat,    localFormat,    true);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1161	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1162	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1163	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1164	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1165	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1166	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1167	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1168	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1169	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1170	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1171	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1172	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1173	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1174	[BUG]  [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	224	None	replace
1175	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1176	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1177	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1178	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1179	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1180	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1181	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1182	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1183	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	135	10	replace
1184	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	135	10	replace
1185	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1186	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
1187	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
1188	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1189	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1190	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1191	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1192	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1193	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1194	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1195	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1196	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1197	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1198	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1199	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1200	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1201	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1202	[BUG]  [BUGGY]  if(dateType  ==  JsonSql.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  JsonSql.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  JsonSql.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1203	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1204	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1205	[BUG]  [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	225	None	replace
1206	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
1207	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  localFormat!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	230	None	replace
1208	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	230	None	replace
1209	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  timeType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  timeType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  timeType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	230	None	replace
1210	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1211	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1212	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1213	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1214	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1215	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1216	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1217	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1218	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1219	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  ||  dateType  ==  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  ||  dateType  ==  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  ||  dateType  ==  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1220	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1221	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1222	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1223	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	188	None	replace
1224	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	75	10	replace
1225	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	75	10	replace
1226	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	24	None	replace
1227	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	207	None	replace
1228	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	207	None	replace
1229	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	207	None	replace
1230	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	207	None	replace
1231	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	207	None	replace
1232	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	15	2	replace
1233	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	15	2	replace
1234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
1235	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
1236	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	15	2	replace
1237	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=    Date.class    &&    dateType    ==    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	15	2	replace
1238	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
1239	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
1240	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	104	None	replace
1241	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	104	None	replace
1242	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	196	None	replace
1243	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	196	2	replace
1244	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	196	2	replace
1245	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1246	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1247	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	172	None	replace
1248	[BUG]  [BUGGY]  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1249	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localeFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localeFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localeFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	25	None	replace
1250	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  enUsFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  enUsFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  enUsFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1251	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  If(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  If(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    If(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	276	None	add
1252	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
1253	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
1254	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
1255	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
1256	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
1257	[BUG]  [BUGGY]  if(dateType  ==  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	78	None	replace
1258	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1259	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1260	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1261	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1262	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1263	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	100	None	replace
1264	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	302	None	replace
1265	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
1266	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
1267	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  localeFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(dateType,  localeFormat,  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  localeFormat,  enUsFormat);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
1268	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	295	None	replace
1269	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Timestamp.class  ||  dateType  ==  LocalFormat.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	295	None	replace
1270	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	295	None	replace
1271	[BUG]  [BUGGY]  if(dateType  ==  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Locale.class  ||  dateType!=  Locale.class  ||  dateType!=  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType    >=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	128	None	replace
1272	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	173	2	replace
1273	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	173	2	replace
1274	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	173	None	replace
1275	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	173	None	replace
1276	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	173	10	replace
1277	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	173	10	replace
1278	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1279	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	311	None	replace
1280	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	299	None	add
1281	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
1282	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
1283	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
1284	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	250	None	replace
1285	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  timeType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  timeType  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  timeType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  timeType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	250	None	replace
1286	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  enUsFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  enUsFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  enUsFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1287	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	171	None	replace
1288	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class)    {    	compilable	  [FE]  IllegalArgumentException  	292	10	replace
1289	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class)    {    	compilable	  [FE]  IllegalArgumentException  	292	10	replace
1290	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Locale.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	193	None	replace
1291	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	193	None	replace
1292	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
1293	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >>  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
1294	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
1295	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
1296	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1297	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1298	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	320	None	replace
1299	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1300	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1301	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1302	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1303	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	301	None	add
1304	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  timeType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  timeType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  timeType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	235	None	replace
1305	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeZone.class  &&  localFormat!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeZone.class  &&  localFormat!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeZone.class  &&  localFormat!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
1306	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
1307	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
1308	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
1309	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.getDefault());  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.getDefault());  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat.getDefault());	  this(dateType,    enUsFormat,    localFormat,    true);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1310	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1311	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1312	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1313	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1314	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1315	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	120	None	replace
1316	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1317	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1318	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1319	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  TimeZone.getDefault())  {  [CE]  cannot  find  symbol  TimeZone  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  TimeZone.getDefault())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  TimeZone.getDefault())  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  TimeZone	46	None	replace
1320	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  String.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  String.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1321	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Long.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Long.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1322	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1323	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	92	10	replace
1324	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	92	10	replace
1325	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
1326	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
1327	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1328	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1329	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1330	[BUG]  [BUGGY]  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    >=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	280	None	replace
1331	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat.class);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat.class);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
1332	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  timeType  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	255	None	replace
1333	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	199	10	replace
1334	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	199	10	replace
1335	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	254	None	replace
1336	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	206	None	replace
1337	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	237	None	replace
1338	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1339	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1340	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1341	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
1342	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1343	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	168	None	replace
1344	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Locale.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	165	None	replace
1345	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	165	10	replace
1346	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	165	10	replace
1347	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
1348	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
1349	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
1350	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	98	10	replace
1351	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1352	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1353	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1354	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  >>  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1355	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1356	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
1357	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
1358	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
1359	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
1360	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	38	2	replace
1361	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	38	2	replace
1362	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	38	10	replace
1363	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	38	10	replace
1364	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1365	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1366	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1367	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1368	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1369	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1370	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1371	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1372	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >>  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1373	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
1374	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
1375	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
1376	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
1377	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Duration.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1378	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class	  	non-compiled	[CE]  ')'  expected	164	None	add
1379	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	194	None	replace
1380	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  enUsFormat!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  enUsFormat!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  enUsFormat!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	194	None	replace
1381	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localeFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	194	None	replace
1382	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	124	None	replace
1383	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	124	None	replace
1384	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	124	None	replace
1385	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
1386	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
1387	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
1388	[BUG]  [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	95	2	replace
1389	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1390	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1391	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
1392	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1393	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1394	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1395	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1396	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	68	None	add
1397	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1398	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1399	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1400	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	103	None	replace
1401	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1402	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1403	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
1404	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
1405	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1406	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1407	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1408	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1409	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
1410	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	234	None	replace
1411	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	234	2	replace
1412	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	234	2	replace
1413	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1414	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	300	None	replace
1415	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
1416	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
1417	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
1418	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
1419	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  If(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  If(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    If(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
1420	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  DateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  DateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  DateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
1421	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
1422	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
1423	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1424	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1425	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1426	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	138	None	add
1427	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
1428	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
1429	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
1430	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >>  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >>  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
1431	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
1432	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  this.dateType!=  Timestamp.class  &&  this.dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  this.dateType!=  Timestamp.class  &&  this.dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  this.dateType!=  Timestamp.class  &&  this.dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
1433	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
1434	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Locale.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Locale.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
1435	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
1436	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	271	None	replace
1437	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1438	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1439	[BUG]  [BUGGY]  super(dateType,  LocalFormat.getDefault());  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  LocalFormat.getDefault());  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  LocalFormat.getDefault());	  super(dateType,    enUsFormat);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1440	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1441	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	298	None	replace
1442	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  ';'  expected	290	None	replace
1443	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  ';'  expected	290	None	replace
1444	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	218	None	replace
1445	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
1446	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
1447	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
1448	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
1449	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1450	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1451	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Long.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Long.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Long.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1452	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1453	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1454	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1455	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1456	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1457	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1458	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1459	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1460	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1461	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1462	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	284	None	replace
1463	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1464	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1465	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1466	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Calendar.class)  {  [CE]  cannot  find  symbol  timeType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	296	None	replace
1467	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	135	None	replace
1468	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	160	None	replace
1469	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1470	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	310	None	replace
1471	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	310	None	replace
1472	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	197	None	replace
1473	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
1474	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
1475	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  datePattern);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  datePattern);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  datePattern);	  this(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1476	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
1477	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
1478	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1479	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1480	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
1481	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1482	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1483	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	161	None	replace
1484	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1485	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1486	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1487	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Locale.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	121	None	replace
1488	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1489	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1490	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	195	None	add
1491	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
1492	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
1493	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	230	None	replace
1494	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
1495	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  >=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
1496	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
1497	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >>  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >>  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >>  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
1498	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
1499	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
1500	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
1501	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	26	None	replace
1502	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1503	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	210	None	replace
1504	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	210	None	replace
1505	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
1506	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1507	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	245	None	replace
1508	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
1509	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	110	10	replace
1510	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  ';'  expected	110	None	replace
1511	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	110	None	replace
1512	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	110	None	replace
1513	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	109	2	replace
1514	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	109	2	replace
1515	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	105	None	replace
1516	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	105	None	replace
1517	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  DEFAULT_DATE_TYPE);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  DEFAULT_DATE_TYPE);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  DEFAULT_DATE_TYPE);	  this(dateType,    enUsFormat,    localFormat,    null);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1518	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	262	None	replace
1519	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	262	None	replace
1520	[BUG]  [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
1521	[BUG]  [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
1522	[BUG]  [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
1523	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
1524	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	47	None	add
1525	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	47	None	add
1526	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1527	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1528	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1529	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1530	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1531	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1532	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	141	None	add
1533	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1534	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1535	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1536	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	308	10	replace
1537	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1538	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1539	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1540	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1541	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	198	None	replace
1542	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localeFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localeFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localeFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	198	None	replace
1543	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
1544	[BUG]  [BUGGY]  if(dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
1545	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	102	None	replace
1546	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	102	None	replace
1547	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1548	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	231	None	replace
1549	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	231	None	replace
1550	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  ';'  expected	200	None	replace
1551	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	200	10	replace
1552	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	200	10	replace
1553	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	non-compiled	[CE]  ';'  expected	200	None	replace
1554	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1555	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1556	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1557	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1558	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	239	None	replace
1559	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	239	None	replace
1560	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1561	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
1562	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  ')'  expected	248	None	replace
1563	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
1564	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Locale.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Locale.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Locale.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	228	None	replace
1565	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1566	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	157	None	replace
1567	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  LocalFormat.getDefault());  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  LocalFormat.getDefault());  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  LocalFormat.getDefault());	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1568	[BUG]  [BUGGY]  super(localFormat,  enUsFormat,  dateType);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(localFormat,  enUsFormat,  dateType);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(localFormat,  enUsFormat,  dateType);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1569	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
1570	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	99	None	replace
1571	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	181	None	replace
1572	[BUG]  [BUGGY]  super(dateType,  java.sql.Date.class);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  java.sql.Date.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  java.sql.Date.class);	  super(dateType);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
1573	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	201	None	replace
1574	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	170	2	replace
1575	[BUG]  [BUGGY]  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	170	2	replace
1576	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1577	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1578	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1579	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	251	None	add
1580	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1581	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Duration.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Duration.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1582	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
1583	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	156	None	replace
1584	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1585	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  datePattern);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  datePattern);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  datePattern);	  this(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1586	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	101	None	replace
1587	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Duration.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
1588	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  LocalFormat.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1589	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1590	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
1591	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
1592	[BUG]  [BUGGY]  this(dateType,  java.sql.Date.class,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  java.sql.Date.class,  enUsFormat,  localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  java.sql.Date.class,  enUsFormat,  localFormat);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1593	[BUG]  [BUGGY]  this(dateType,  LocalFormat.class,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  LocalFormat.class,  enUsFormat,  localFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  LocalFormat.class,  enUsFormat,  localFormat);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1594	[BUG]  [BUGGY]  this(dateType,  localFormat,  enUsFormat,  false);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  localFormat,  enUsFormat,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  localFormat,  enUsFormat,  false);	  this(dateType,    enUsFormat,    localFormat,    false);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1595	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	289	10	replace
1596	[BUG]  [BUGGY]  if(dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	289	10	replace
1597	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	28	None	replace
1598	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  TimeZone.UTC)  {  [CE]  cannot  find  symbol  TimeZone  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  TimeZone.UTC)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  TimeZone.UTC)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  TimeZone	28	None	replace
1599	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	208	None	replace
1600	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	208	None	replace
1601	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	208	None	replace
1602	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
1603	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class)  {  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class)  {  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class)  {  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  ';'  expected	268	None	replace
1604	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	268	2	replace
1605	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	268	2	replace
1606	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class)  {  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class)  {  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class)  {  if(dateType  ==  Timestamp.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  ';'  expected	268	None	replace
1607	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	268	2	replace
1608	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	268	2	replace
1609	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	268	None	replace
1610	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	268	2	replace
1611	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	268	2	replace
1612	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1613	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1614	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1615	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
1616	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	162	None	replace
1617	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	162	None	replace
1618	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	162	None	replace
1619	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localeFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	209	None	replace
1620	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
1621	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
1622	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
1623	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1624	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1625	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	64	None	replace
1626	[BUG]  [BUGGY]  if(dateType  ==  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  LocalFormat.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1627	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1628	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
1629	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
1630	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	175	None	replace
1631	[BUG]  [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	211	None	replace
1632	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	289	10	replace
1633	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Class.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	289	10	replace
1634	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
1635	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1636	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
1637	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    java.sql.Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	78	10	replace
1638	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1639	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1640	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1641	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localeFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localeFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localeFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	168	None	replace
1642	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	259	None	add
1643	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1644	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1645	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1646	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1647	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1648	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  DateFormat.class);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localeFormat,  DateFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat,  DateFormat.class);	  this(dateType,    enUsFormat,    localeFormat);    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1649	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
1650	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	265	None	replace
1651	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	265	None	replace
1652	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1653	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	317	10	replace
1654	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.Class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	317	10	replace
1655	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	262	None	replace
1656	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	compilable	  [FE]  IllegalArgumentException  	262	10	replace
1657	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Long.class)    {    	compilable	  [FE]  IllegalArgumentException  	262	10	replace
1658	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1659	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1660	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1661	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol	309	None	replace
1662	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
1663	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1664	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1665	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	228	10	replace
1666	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	228	10	replace
1667	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1668	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1669	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  timeType  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  timeType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol  timeType	264	None	replace
1670	[BUG]  [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
1671	[BUG]  [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
1672	[BUG]  [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null)  {  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  super(dateType,    enUsFormat);    this.localFormat    =    localFormat;    	non-compiled	[CE]  illegal  start  of  type	281	None	replace
1673	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1674	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1675	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1676	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1677	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
1678	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	210	None	replace
1679	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
1680	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
1681	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	144	None	replace
1682	[BUG]  [BUGGY]  super(dateType.getName());  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType.getName());  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType.getName());	  super(dateType);    	non-compiled	[CE]  illegal  start  of  type	219	None	replace
1683	[BUG]  [BUGGY]  this(dateType,  LocalFormat.class,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  LocalFormat.class,  enUsFormat);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  LocalFormat.class,  enUsFormat);	  this(dateType,    enUsFormat,    LocalFormat.class);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
1684	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
1685	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
1686	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
1687	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Duration.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	274	None	add
1688	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.Class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	269	10	replace
1689	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.Class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	269	10	replace
1690	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
1691	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1692	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1693	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1694	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
1695	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
1696	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
1697	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
1698	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1699	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1700	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1701	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeSeries.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeSeries.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeSeries.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
1702	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
1703	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	101	None	replace
1704	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
1705	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	132	None	add
1706	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
1707	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
1708	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
1709	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
1710	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
1711	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	142	10	replace
1712	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	142	2	replace
1713	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	142	2	replace
1714	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	279	None	replace
1715	[BUG]  [BUGGY]  if(dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Time.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	279	None	replace
1716	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1717	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	197	None	replace
1718	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  >=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1719	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
1720	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
1721	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1722	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1723	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
1724	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	254	None	replace
1725	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	217	None	add
1726	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1727	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1728	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1729	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1730	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
1731	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  this.dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	305	None	replace
1732	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1733	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1734	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1735	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    JsonSql.Date.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	63	None	replace
1736	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	185	None	add
1737	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1738	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1739	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1740	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	66	10	replace
1741	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1742	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1743	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1744	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class	  	non-compiled	[CE]  ')'  expected	65	None	add
1745	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1746	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
1747	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	201	None	replace
1748	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1749	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1750	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
1751	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
1752	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1753	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
1754	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1755	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1756	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	301	None	add
1757	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  TimeZone.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  TimeZone.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  TimeZone.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
1758	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class)  {	  if(dateType    ==    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
1759	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1760	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Time.class)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat  ==  Time.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
1761	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	100	None	replace
1762	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	215	None	replace
1763	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1764	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1765	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  this.dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  this.dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  this.dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
1766	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	79	2	replace
1767	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	79	2	replace
1768	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	231	None	replace
1769	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
1770	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  java.sql.Date.class);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  java.sql.Date.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  enUsFormat,  localFormat,  java.sql.Date.class);	  this(dateType,    DateFormat.class,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
1771	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
1772	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  TimeSeries.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  TimeSeries.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  TimeSeries.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
1773	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timer.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timer.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timer.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	263	None	replace
1774	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	212	None	add
1775	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	240	10	replace
1776	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	240	10	replace
1777	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	211	None	replace
1778	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
1779	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
1780	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	166	None	add
1781	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
1782	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
1783	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
1784	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
1785	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    TimeZone.class)    {    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
1786	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class)    {    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1787	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.Class)  {  [CE]  cannot  find  symbol  Calendar  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.Class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.Class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Calendar.class)    {    	non-compiled	[CE]  cannot  find  symbol  Calendar	296	None	replace
1788	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	241	None	replace
1789	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	234	10	replace
1790	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	234	10	replace
1791	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1792	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1793	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1794	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	251	None	add
1795	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1796	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
1797	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	253	None	add
1798	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1799	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	245	None	replace
1800	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
1801	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1802	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  If(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  If(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    If(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
1803	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	242	None	replace
1804	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1805	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1806	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1807	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1808	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1809	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	164	None	add
1810	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1811	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1812	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeStamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    TimeStamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	239	None	replace
1813	[BUG]  [BUGGY]  if(localFormat  ==  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  LocalFormat.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
1814	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  timeType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
1815	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	82	None	replace
1816	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	82	None	replace
1817	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
1818	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	117	10	replace
1819	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	117	2	replace
1820	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	117	2	replace
1821	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1822	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
1823	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1824	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  TimeZone.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1825	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  DateFormat.class);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,  DateFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  DateFormat.class);	  this(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1826	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
1827	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
1828	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	102	None	replace
1829	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
1830	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
1831	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
1832	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
1833	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
1834	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Duration.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1835	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	156	None	replace
1836	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat,  true);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat,  true);	  this(dateType,    enUsFormat,    localFormat,    false);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
1837	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
1838	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	187	None	add
1839	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	312	None	replace
1840	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Long.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Long>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  localFormat!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Long>	312	None	replace
1841	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
1842	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
1843	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(localFormat  ==  null)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(localFormat  ==  null)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
1844	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  	248	None	replace
1845	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	non-compiled	[CE]  	248	None	replace
1846	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	compilable	  [FE]  IllegalArgumentException  	248	10	replace
1847	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    	compilable	  [FE]  IllegalArgumentException  	248	10	replace
1848	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  LocalFormat.class);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  LocalFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  enUsFormat,  LocalFormat.class);	  DefaultDateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
1849	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    TimeFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	311	None	replace
1850	[BUG]  [BUGGY]  if(dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	277	None	replace
1851	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
1852	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
1853	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	299	None	add
1854	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1855	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1856	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1857	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1858	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
1859	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	68	None	add
1860	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1861	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1862	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	136	None	add
1863	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  null  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  null  ||  dateType!=  Timestamp.Class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	294	None	add
1864	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1865	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Timestamp.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	163	None	replace
1866	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	163	10	replace
1867	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	163	10	replace
1868	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	194	None	replace
1869	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,   " ");  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  localFormat,   " ");  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,   " ");	  this(dateType,    enUsFormat,    localFormat,    null);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1870	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  String.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<String>  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  String.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  String.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    String.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<String>	203	None	replace
1871	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	130	None	add
1872	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat,  false);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  this(dateType,  enUsFormat,  LocalFormat,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat,  false);	  this(dateType,    enUsFormat,    localFormat,    true);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1873	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
1874	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	153	10	replace
1875	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat,  DateFormat.class);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  super(dateType,  enUsFormat,  localFormat,  DateFormat.class);  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localFormat,  DateFormat.class);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1876	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1877	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
1878	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  Class  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.Class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol  Class	288	None	replace
1879	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeSeries.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeSeries.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeSeries.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
1880	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timer.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timer.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timer.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
1881	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType    >=    Date.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	55	None	replace
1882	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	152	None	add
1883	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	297	None	replace
1884	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	297	None	replace
1885	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1886	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1887	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Long.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Long.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Long.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Time.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	31	None	replace
1888	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1889	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1890	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
1891	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localeFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	298	None	replace
1892	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	298	None	replace
1893	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
1894	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
1895	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  Date.class!=  dateType  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  Date.class!=  dateType  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
1896	[BUG]  [BUGGY]  if(dateType  ==  null  ||  Date.class!=  dateType  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  Date.class!=  dateType  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  Date.class!=  dateType  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    null    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	295	10	replace
1897	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
1898	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	189	None	add
1899	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
1900	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Date.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  TimeZone.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1901	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    >=    Date.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	315	None	replace
1902	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    >=    Date.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	315	None	replace
1903	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1904	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1905	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1906	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	272	None	add
1907	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	209	None	replace
1908	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1909	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1910	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType    ==    Date.class    ||    dateType!=    Calendar.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1911	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  TimeFormat.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1912	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
1913	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
1914	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
1915	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.Class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	256	None	add
1916	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	139	10	replace
1917	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	139	10	replace
1918	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
1919	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
1920	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Long.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Long.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Long.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
1921	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1922	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1923	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1924	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1925	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1926	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
1927	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.Class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
1928	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	266	None	replace
1929	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	266	None	replace
1930	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Long.class)    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
1931	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	291	None	replace
1932	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1933	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  localFormat!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    localFormat!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	103	None	replace
1934	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
1935	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
1936	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  dateType  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  if(dateType  ==  dateType  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    if(dateType  ==  dateType  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
1937	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1938	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1939	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  enUsFormat!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  enUsFormat!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  enUsFormat!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1940	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    localFormat!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	232	None	replace
1941	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	39	10	replace
1942	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType    ==    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	39	10	replace
1943	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1944	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Calendar.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Calendar.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1945	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
1946	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  this.dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  this.dateType!=  LocalFormat.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  this.dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType    ==    Timestamp.class    ||    dateType!=    LocalFormat.class)    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1947	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1948	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1949	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	143	None	add
1950	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat  ==  Date.class)  {  [CE]  cannot  find  symbol  localeFormat  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat  ==  Date.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localeFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat    ==    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol  localeFormat	105	None	replace
1951	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1952	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1953	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1954	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1955	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Calendar.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	237	None	replace
1956	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1957	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1958	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    ||    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
1959	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {      [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType    ==    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
