bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
2	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
4	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
6	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
8	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
9	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	19	2	replace
10	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	19	2	replace
11	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
12	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
13	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
14	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
15	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
16	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
17	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
18	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
19	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
20	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
21	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
22	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
23	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
24	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
25	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
26	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
27	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
28	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
29	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
30	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
31	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
32	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
33	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
34	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
35	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
36	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
37	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
38	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
39	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
40	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
41	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
42	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
43	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
44	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
45	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
46	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
47	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
48	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
49	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
50	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
51	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
52	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
53	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
54	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
55	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
56	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
57	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType  >=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
58	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
59	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
60	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
61	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
62	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
63	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	15	None	replace
64	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
65	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
66	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
67	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
68	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
69	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
70	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	26	2	replace
71	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	26	2	replace
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	26	10	replace
73	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	26	10	replace
74	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
75	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
76	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
77	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
78	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
79	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
80	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
81	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
82	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
83	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
84	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
85	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
86	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
87	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
88	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
90	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
91	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
92	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
93	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
94	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType  ==  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
95	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
96	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  >=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
97	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType  ==  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
98	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
99	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
100	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
101	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	22	None	replace
102	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
103	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
104	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
105	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
106	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
107	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
108	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
109	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
110	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
111	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType  >=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType  >=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
112	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
113	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >>  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >>  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType  >>  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
114	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
115	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
116	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
117	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
118	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
119	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
120	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
121	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
122	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
123	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
124	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
125	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
126	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
127	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
128	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType  >=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
129	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
130	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
131	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
132	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
133	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
134	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
135	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
136	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
137	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
138	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
139	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	24	10	replace
140	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
141	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	17	10	replace
142	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	17	10	replace
143	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	17	10	replace
144	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	17	10	replace
145	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  super(dateType,  enUsFormat,  localFormat);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat,  localFormat);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
146	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  enUsFormat,  localFormat);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
147	[BUG]  [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  DateFormat.class,  enUsFormat,  localFormat);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  DateFormat.class,  enUsFormat,  localFormat);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
148	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  null);  [CE]  illegal  start  of  type  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  enUsFormat,  localFormat,  null);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  null);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
149	[BUG]  [BUGGY]  super(dateType,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  super(dateType,  enUsFormat);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
150	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  false);  [CE]  illegal  start  of  type  [FE]                              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  enUsFormat,  localFormat,  false);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  false);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
151	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localFormat,  true);  [CE]  illegal  start  of  type  [FE]                                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  enUsFormat,  localFormat,  true);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localFormat,  true);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
152	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	21	10	replace
153	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	21	10	replace
154	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	21	10	replace
155	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	21	10	replace
156	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	21	None	replace
157	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
158	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
159	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
160	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
161	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
162	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
163	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
164	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
165	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
166	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
167	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
168	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat  ==  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	12	None	replace
169	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
170	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
171	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
172	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
173	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
174	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
175	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
176	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
177	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
178	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
179	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
180	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
181	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
182	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
183	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
184	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
185	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	6	10	replace
186	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	6	10	replace
187	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
188	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
189	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
190	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
191	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
192	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
193	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
194	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	19	None	replace
195	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	24	2	replace
196	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	24	2	replace
197	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	24	None	replace
198	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	24	None	replace
199	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
200	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  java.sql.Date.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
201	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
202	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
203	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
204	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
205	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
206	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
207	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
208	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
209	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
210	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
211	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	22	None	replace
212	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
213	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	8	10	replace
214	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
215	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  >=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
216	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
217	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
218	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	4	10	replace
219	[BUG]  [BUGGY]  super(dateType);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  super(dateType);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
220	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  DefaultDateTypeAdapter(dateType,  enUsFormat,  localFormat);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	DefaultDateTypeAdapter(dateType,  enUsFormat,  localFormat);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
221	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  localeFormat);  [CE]  illegal  start  of  type  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  enUsFormat,  localeFormat);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  localeFormat);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
222	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
223	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
224	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
225	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
226	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType  >=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
227	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
228	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType  ==  Date.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
229	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType    ==    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Time.class)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
230	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
231	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	21	None	replace
232	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	21	None	replace
233	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	21	2	replace
234	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  JsonParseException  	21	2	replace
235	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  TimeZone.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
236	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
237	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
238	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
239	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  TimeStamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
240	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
241	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
242	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  String.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
243	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
244	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
245	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Timestamp>  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  localFormat!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Timestamp>	26	None	replace
246	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
247	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
248	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [CE]  ')'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class	  	non-compiled	[CE]  ')'  expected	9	None	add
249	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
250	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
251	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
252	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
253	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
254	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
255	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
256	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
257	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
258	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
259	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	2	10	replace
260	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	2	10	replace
261	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
262	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Long.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
263	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Time.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
264	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
265	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [CE]  package  JsonSql  does  not  exist  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  JsonSql.Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  package  JsonSql  does  not  exist	24	None	replace
266	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	24	None	replace
267	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
268	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
269	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.Class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
270	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
271	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
273	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
274	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
275	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	12	10	replace
276	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
277	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
278	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	19	2	replace
279	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  JsonParseException  	19	2	replace
280	[BUG]  [BUGGY]  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  >=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	19	None	replace
281	[BUG]  [BUGGY]  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  super(dateType,  enUsFormat);  this.localFormat  =  localFormat;  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	super(dateType,  enUsFormat);  this.localFormat  =  localFormat;	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
282	[BUG]  [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  this(dateType,  enUsFormat,  LocalFormat.class);  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	this(dateType,  enUsFormat,  LocalFormat.class);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
283	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
284	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
285	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
286	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
287	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
288	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
289	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
290	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
291	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
292	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
293	[BUG]  [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Calendar.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
294	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	17	10	replace
295	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  null  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	17	10	replace
296	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Calendar.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
297	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
298	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    localFormat!=    Date.class)    {    	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	22	None	replace
299	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
300	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType  ==  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	10	10	replace
301	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	6	10	replace
302	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType  ==  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	6	10	replace
303	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	6	10	replace
304	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	compilable	  [FE]  IllegalArgumentException  	6	10	replace
305	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Calendar.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  if(dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
306	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  &&  dateType!=  Date.Class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
307	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	21	10	replace
308	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	compilable	  [FE]  IllegalArgumentException  	21	10	replace
309	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Calendar.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
310	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeZone.class)  {	  if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
311	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  TimeFormat.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
312	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>  [FE]      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class  ||  dateType!=  Long.class)  {	  if(dateType    ==    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Long>	15	None	replace
313	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
314	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
315	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class    ||    dateType!=    Date.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  >=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
316	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class)    {    if(dateType!=  Date.class  ||  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
317	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
318	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Class.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
319	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType    ==    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Date.class    ||    dateType!=    Timestamp.class)    {    if(dateType  ==  Date.class  ||  dateType!=  Date.Class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
320	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {    [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=    Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
