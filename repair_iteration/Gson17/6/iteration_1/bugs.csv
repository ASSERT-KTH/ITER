bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
2	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
4	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
6	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
8	[BUG]  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [FE]  IllegalArgumentException  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType  ==  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
9	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
10	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [FE]  IllegalArgumentException  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class  ||  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
12	[BUG]  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [FE]  IllegalArgumentException  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Date.class  ||  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  IllegalArgumentException  	11	10	replace
13	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	  	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
15	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
16	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
17	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
18	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
19	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [FE]  JsonParseException  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
20	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
21	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
22	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [CE]  incomparable  types:  DateFormat  and  Class<Date>  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  Date.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	non-compiled	[CE]  incomparable  types:  DateFormat  and  Class<Date>	11	None	replace
23	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
24	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
25	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	add	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
26	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [FE]  JsonParseException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	75	75	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {	if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  	compilable	  [FE]  JsonParseException  	11	2	replace
