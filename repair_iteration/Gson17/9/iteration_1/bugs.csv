bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.localFormat  =  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  localeFormat;  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat;	this.localFormat  =  localFormat;  	non-compiled	[CE]  cannot  find  symbol  localeFormat	17	None	replace
2	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  enUsFormat;  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  enUsFormat;	this.localFormat  =  localFormat;  	compilable	  [FE]  JsonSyntaxException  	17	3	replace
3	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  [FE]  JsonSyntaxException  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  enUsFormat;  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat;	this.localFormat  =  localFormat;  	compilable	  [FE]  JsonSyntaxException  	17	3	replace
4	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat);  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat);	this.localFormat  =  localFormat;  	non-compiled	[CE]  cannot  find  symbol  LocalFormat	17	None	replace
5	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  [CE]  cannot  find  symbol  LocalFormat  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getDefault();	this.localFormat  =  localFormat;  	non-compiled	[CE]  cannot  find  symbol  LocalFormat	17	None	replace
6	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat();  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat();  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat();	this.localFormat  =  localFormat;  	non-compiled	[CE]  cannot  find  symbol  LocalFormat	17	None	replace
7	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance();  [CE]  cannot  find  symbol  LocalFormat  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]  this.localFormat  =  LocalFormat.getInstance();  [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance();	this.localFormat  =  localFormat;  	non-compiled	[CE]  cannot  find  symbol  LocalFormat	17	None	replace
8	[BUG]  [BUGGY]    [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  [BUGGY]    [BUGGY]  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	  	this.localFormat  =  localFormat;  	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	17	None	replace
