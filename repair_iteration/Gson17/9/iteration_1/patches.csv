bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.localFormat  =  enLocalFormat;  [CE]  cannot  find  symbol  enLocalFormat  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enLocalFormat;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enLocalFormat;	  this.localFormat    =    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  enLocalFormat	1	None	replace
2	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType);  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(dateType);	      	non-compiled	[CE]  cannot  find  symbol  LocalFormat	8	None	replace
3	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }  [CE]  incompatible  types  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  localFormat  =  Locale.getDefault();  }	      	non-compiled	[CE]  incompatible  types	8	None	replace
4	[BUG]  [BUGGY]  enUsFormat  =  Locale.getDefault();  [CE]  incompatible  types  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  enUsFormat  =  Locale.getDefault();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  Locale.getDefault();	      	non-compiled	[CE]  incompatible  types	8	None	replace
5	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getDefault();  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getDefault();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getDefault();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat();  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getLocalFormat();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localeFormat.getDefault();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getDefault();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	5	None	replace
8	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocal();  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getLocal();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocal();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  enUsFormat);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	4	None	replace
10	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  localFormat);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	4	None	replace
11	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  locale);  [CE]  cannot  find  symbol  locale  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  locale);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol  locale	4	None	replace
12	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType);  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
13	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	4	None	replace
14	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  enUsFormat;  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  enUsFormat;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    this.localFormat  =  enUsFormat;	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
15	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
16	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
17	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
18	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
19	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
20	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
21	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
22	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  IllegalArgumentException  	3	10	replace
23	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  IllegalArgumentException  	3	10	replace
24	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  JsonSyntaxException  	3	3	replace
25	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  JsonSyntaxException  	3	3	replace
26	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  IllegalArgumentException  	3	10	replace
27	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]        JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  IllegalArgumentException  	3	10	replace
28	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]          JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	3	None	replace
29	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocalFormat();  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localeFormat.getLocalFormat();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getLocalFormat();	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	6	None	replace
30	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat();  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.getLocalFormat();	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
31	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat;  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat;	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getInstance();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat.getInstance();	  this.localFormat    =    LocalFormat.getInstance();    	compilable	  [FE]  JsonSyntaxException  	7	3	replace
33	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  [FE]  JsonSyntaxException  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getInstance();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getInstance();	  this.localFormat    =    LocalFormat.getInstance();    	compilable	  [FE]  JsonSyntaxException  	7	3	replace
34	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getInstance();  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localeFormat.getInstance();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getInstance();	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	7	None	replace
35	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  enUsFormat.getInstance();	  this.localFormat    =    LocalFormat.getInstance();    	compilable	  [FE]  JsonSyntaxException  	7	3	replace
36	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  [FE]  JsonSyntaxException  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.getInstance();	  this.localFormat    =    LocalFormat.getInstance();    	compilable	  [FE]  JsonSyntaxException  	7	3	replace
37	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(localFormat);	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	7	None	replace
38	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFile();  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getLocalFile();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFile();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
39	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getValue();  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getValue();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getValue();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
40	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  IllegalArgumentException  	3	10	replace
41	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [FE]  IllegalArgumentException  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  IllegalArgumentException  	3	10	replace
42	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType);  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	4	None	replace
43	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class);  [CE]  cannot  find  symbol  LocalFormat  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	4	None	replace
44	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8;  [CE]  cannot  find  symbol  LocalFormat  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.UTF8;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UTF8;	  this.localFormat    =    localeFormat;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	1	None	replace
45	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocalFormat();  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.toLocalFormat();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocalFormat();	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
46	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	      	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	8	None	replace
47	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	      	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	8	None	replace
48	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	      	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	8	None	replace
49	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	      	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	8	None	replace
50	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat();  [CE]  cannot  find  symbol  LocalFormat  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getDefaultLocalFormat();	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	6	None	replace
51	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
52	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
53	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
54	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
55	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
56	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
57	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat);  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	6	None	replace
58	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  }	      	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	8	None	replace
60	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  }	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
62	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
63	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  JsonParseException  	3	2	replace
64	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [FE]  JsonParseException  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    	compilable	  [FE]  JsonParseException  	3	2	replace
65	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [CE]  cannot  find  symbol  [FE]      JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }	  this.localFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
66	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFamily();  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  localFormat.getLocalFamily();  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFamily();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
67	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  inUsFormat;  [CE]  cannot  find  symbol  inUsFormat  [FE]    JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  inUsFormat;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    this.localFormat  =  inUsFormat;	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	2	None	add
68	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  This.localFormat  =  enUsFormat;  [CE]  cannot  find  symbol  This  [FE]      JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  This.localFormat  =  enUsFormat;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    This.localFormat  =  enUsFormat;	  	non-compiled	[CE]  cannot  find  symbol  This	2	None	add
69	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    this.localFormat  =  localFormat;	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	2	None	add
70	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]          JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    this.localFormat  =  new  DateFormat(localFormat);	  	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	2	None	add
71	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  enUsFormat;  }  [CE]  illegal  start  of  type  [FE]            JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  enUsFormat;  }  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    this.localFormat  =  enUsFormat;  }	  	non-compiled	[CE]  illegal  start  of  type	2	None	add
72	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  dateType;  [CE]  incompatible  types  [FE]              JsonSyntaxException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  this.localFormat  =  dateType;  [BUGGY]    }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat;    this.localFormat  =  dateType;	  	non-compiled	[CE]  incompatible  types	2	None	add
