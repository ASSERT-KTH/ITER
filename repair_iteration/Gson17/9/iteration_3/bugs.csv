bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  null;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  null;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  null;	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	48	None	replace
2	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	48	None	replace
3	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	48	None	replace
4	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  LocalFormat(dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  LocalFormat(dateType,  enUsFormat);	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
5	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.dateType);  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(this.dateType);	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	72	None	replace
6	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  locale);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
7	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  dateType);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
8	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  null);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  null);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  null);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
9	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  false);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  false);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  false);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
10	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  true);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  true);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  true);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
11	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  locale);  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localFormat,  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
12	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(dateType,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    dateType);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	42	None	replace
13	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(dateType,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    dateType);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
14	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.dateType,  dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.dateType,  dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(this.dateType,  dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    dateType);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
15	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
16	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
17	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
18	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
19	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
20	[BUG]  [BUGGY]  if(dateType  ==  null)  {  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
21	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
22	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
23	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localeFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
24	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localeFormat;  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localeFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  getSimpleName();  this.localFormat  =  localeFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
25	[BUG]  [BUGGY]  LocalFormat  localFormat  =  getSimpleName();  this.localFormat  =  localFormat;  [CE]  cannot  find  symbol  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  LocalFormat  localFormat  =  getSimpleName();  this.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	LocalFormat  localFormat  =  getSimpleName();  this.localFormat  =  localFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
26	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [CE]  cannot  find  symbol  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    DateType.class);    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
27	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    DateType.class);    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	65	None	replace
28	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    DateType.class);    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	65	None	replace
29	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [CE]  cannot  find  symbol  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    DateType.class);    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
30	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getDefaultLocalFormat();  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getDefaultLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getDefaultLocalFormat();	  this.localFormat    =    LocalFormat.getDefaultLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
31	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getDefaultLocalFormat();  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getDefaultLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getDefaultLocalFormat();	  this.localFormat    =    LocalFormat.getDefaultLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	50	None	replace
32	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getDefaultLocalFormat(localFormat);	  this.localFormat    =    LocalFormat.getDefaultLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	50	None	replace
33	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	53	None	replace
34	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	53	None	replace
35	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	53	10	replace
36	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	53	10	replace
37	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	22	None	add
38	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	22	None	add
39	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	22	None	add
40	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	22	None	add
41	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	22	None	add
42	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
43	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
44	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	27	None	replace
45	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
46	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
47	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
48	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
49	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat();  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
50	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
51	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
52	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	71	None	replace
53	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	71	None	replace
54	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	71	None	replace
55	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	71	None	replace
56	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	71	None	replace
57	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	71	None	replace
58	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat(dateType,  enUsFormat);	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	54	None	replace
59	[BUG]  [BUGGY]  this.localFormat  =  dateType;  [CE]  incompatible  types  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  dateType;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  dateType;	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  incompatible  types	54	None	replace
60	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat(dateType);	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	54	None	replace
61	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getDefault();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.getDefault();	  this.localFormat    =    localeFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
62	[BUG]  [BUGGY]  this.localFormat  =  enLocalFormat.getDefault();  [CE]  cannot  find  symbol  enLocalFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enLocalFormat.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enLocalFormat.getDefault();	  this.localFormat    =    localeFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol  enLocalFormat	7	None	replace
63	[BUG]  [BUGGY]  this.localFormat  =  Locale.getDefault();  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  Locale.getDefault();	  this.localFormat    =    localeFormat.getDefault();    	non-compiled	[CE]  incompatible  types	7	None	replace
64	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType);  [CE]  cannot  find  symbol  LocalFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(dateType);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
65	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance(dateType);  [CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getInstance(dateType);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;	37	None	replace
66	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(localFormat,  enUsFormat);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
67	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance(localFormat);  [CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.getInstance(localFormat);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  method  getInstance  in  class  DateFormat  cannot  be  applied  to  given  types;	37	None	replace
68	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(enUsFormat);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
69	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(localFormat,  localFormat);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
70	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFamily(localFormat.getLocalFamily());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFamily(localFormat.getLocalFamily());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFamily(localFormat.getLocalFamily());	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
71	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocalFamily();  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getLocalFamily();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getLocalFamily();	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	66	None	replace
72	[BUG]  [BUGGY]  this.localFormat  =  localFormat.findLocalFamily();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.findLocalFamily();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.findLocalFamily();	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
73	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFamily();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFamily();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFamily();	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
74	[BUG]  [BUGGY]  this.localFormat  =  localFormat.newInstance();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.newInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.newInstance();	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
75	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	compilable	  [FE]  JsonParseException  	59	2	replace
76	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [FE]  JsonParseException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	compilable	  [FE]  JsonParseException  	59	2	replace
77	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  enUsFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  enUsFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	compilable	  [FE]  JsonSyntaxException  	59	3	replace
78	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  enUsFormat;  [FE]  JsonSyntaxException  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  enUsFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  enUsFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	compilable	  [FE]  JsonSyntaxException  	59	3	replace
79	[BUG]  [BUGGY]  this.localFormat  =  dateType.getSimpleName();  [CE]  incompatible  types  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  dateType.getSimpleName();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  dateType.getSimpleName();	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  incompatible  types	59	None	replace
80	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	59	None	replace
81	[BUG]  [BUGGY]  DateFormat  localFormat  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  DateFormat  localFormat  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	DateFormat  localFormat  =  dateType.getSimpleName();  this.localFormat  =  localFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	59	None	replace
82	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  null;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  null;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	compilable	  [FE]  NullPointerException  	59	10	replace
83	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  null;  [FE]  NullPointerException  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  null;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  null;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	compilable	  [FE]  NullPointerException  	59	10	replace
84	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.toLocalFormat();  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.toLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.toLocalFormat();	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	45	None	replace
85	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.toLocalFormat();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.toLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.toLocalFormat();	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
86	[BUG]  [BUGGY]  this.localFormat  =  localFormat.fromLocalFormat();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.fromLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.fromLocalFormat();	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
87	[BUG]  [BUGGY]  this.localFormat  =  localFormat.subtract(localFormat.toLocalFormat());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.subtract(localFormat.toLocalFormat());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.subtract(localFormat.toLocalFormat());	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
88	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	21	None	replace
89	[BUG]  [BUGGY]  This.localFormat  =  localFormat;  [CE]  cannot  find  symbol  This  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  This.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	This.localFormat  =  localFormat;	  this.localFormat    =    enUsFormat;    This.localFormat    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  This	68	None	replace
90	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	47	10	replace
91	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [FE]  IllegalArgumentException  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	47	10	replace
92	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
93	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getClass());  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getClass());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getClass());	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
94	[BUG]  [BUGGY]  aughtInitException( "Date  type  must  not  be  null. ");  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  aughtInitException( "Date  type  must  not  be  null. ");  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	aughtInitException( "Date  type  must  not  be  null. ");	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
95	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType.clone();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType.clone();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType.clone();	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
96	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class);  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class);	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
97	[BUG]  [BUGGY]  this.localFormat  =  localFormat,  enUsFormat.getLocalFormat();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat,  enUsFormat.getLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat,  enUsFormat.getLocalFormat();	  this.localFormat    =    enUsFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	30	None	replace
98	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat,  localFormat.getLocalFormat();  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat,  localFormat.getLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat,  localFormat.getLocalFormat();	  this.localFormat    =    enUsFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	30	None	replace
99	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  DateFormat[localFormat.size()  ]);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  DateFormat[localFormat.size()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  DateFormat[localFormat.size()  ]);	  this.localFormat    =    localFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
100	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.size()  ]);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.size()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.size()  ]);	  this.localFormat    =    localFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
101	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
102	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
103	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
104	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
105	[BUG]  [BUGGY]  this.localFormat  =  enLocalFormat.getLocalFormat();  [CE]  cannot  find  symbol  enLocalFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enLocalFormat.getLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enLocalFormat.getLocalFormat();	  this.localFormat    =    localeFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  enLocalFormat	29	None	replace
106	[BUG]  [BUGGY]  this.localFormat  =  dateType.getLocalFormat();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  dateType.getLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  dateType.getLocalFormat();	  this.localFormat    =    localeFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
107	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UNKNOWN;  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UNKNOWN;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UNKNOWN;	  this.localFormat    =    enLocalFormat;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	1	None	replace
108	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
109	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
110	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
111	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
112	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getValue();  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getValue();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getValue();	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	39	None	replace
113	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  DateFormat[localFormat.getValue()  ]);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  DateFormat[localFormat.getValue()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  DateFormat[localFormat.getValue()  ]);	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
114	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toString();  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toString();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toString();	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  incompatible  types	39	None	replace
115	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withValue(dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withValue(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withValue(dateType);	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
116	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	compilable	  [FE]  JsonParseException  	20	2	replace
117	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [FE]  JsonParseException  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	compilable	  [FE]  JsonParseException  	20	2	replace
118	[BUG]  [BUGGY]  if(dateType!=  null)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  null)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	20	None	replace
119	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	20	None	replace
120	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	20	None	replace
121	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	16	10	replace
122	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	16	10	replace
123	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  JsonParseException  	16	2	replace
124	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  JsonParseException  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  JsonParseException  	16	2	replace
125	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	16	None	replace
126	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(dateType,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	9	None	replace
127	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(dateType,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
128	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	9	None	replace
129	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(this.dateType,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
130	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalMillis(localFormat.getLocalMillis());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalMillis(localFormat.getLocalMillis());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalMillis(localFormat.getLocalMillis());	  this.localFormat    =    localFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
131	[BUG]  [BUGGY]  this.localFormat  =  localFormat.findLocalFormat();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.findLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.findLocalFormat();	  this.localFormat    =    localFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
132	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocal();  [CE]  cannot  find  symbol  localeFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getLocal();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getLocal();	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	8	None	replace
133	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocal();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLocal();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocal();	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
134	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	64	None	replace
135	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat(dateType);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat(dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat(dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	64	None	replace
136	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)null;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)null;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)null;	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	46	None	replace
137	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	19	None	replace
138	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  JsonParseException  	19	2	replace
139	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  JsonParseException  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  JsonParseException  	19	2	replace
140	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
141	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  IllegalArgumentException  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	19	10	replace
142	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	19	None	replace
143	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat(dateType);  [CE]  cannot  find  symbol  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  LocalFormat(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  LocalFormat(dateType);	  this.localFormat    =    enUsFormat;    this.localFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
144	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	26	None	add
145	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	26	None	add
146	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	26	None	add
147	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	26	None	add
148	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  If(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  If(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    If(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  	26	None	add
149	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
150	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	18	10	replace
151	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [FE]  IllegalArgumentException  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	18	10	replace
152	[BUG]  [BUGGY]  enUsFormat  =  localFormat.getDefault();  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localFormat.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localFormat.getDefault();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
153	[BUG]  [BUGGY]  enUsFormat  =  localeFormat.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localeFormat.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localeFormat.getDefault();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	4	None	replace
154	[BUG]  [BUGGY]  EnumFormat  enUsFormat  =  Locale.getDefault();  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  EnumFormat  enUsFormat  =  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	EnumFormat  enUsFormat  =  Locale.getDefault();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
155	[BUG]  [BUGGY]  enUsFormat  =  localFormat.getLocale();  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localFormat.getLocale();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localFormat.getLocale();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
156	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    this.localFormat  =  localFormat.getInstance();	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
157	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
158	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
159	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]          JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	32	None	add
160	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
161	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
162	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
163	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
164	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localeFormat;  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localeFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localeFormat;	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat;    	non-compiled	[CE]  ';'  expected	31	None	replace
165	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  locale;  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  locale;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  locale;	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat;    	non-compiled	[CE]  ';'  expected	31	None	replace
166	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(),  localFormat;  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(),  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getDefaultLocalFormat(),  localFormat;	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat;    	non-compiled	[CE]  ';'  expected	31	None	replace
167	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localePattern;  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localePattern;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localePattern;	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat;    	non-compiled	[CE]  ';'  expected	31	None	replace
168	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	25	None	replace
169	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	25	None	replace
170	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	25	None	replace
171	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]          JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	25	None	replace
172	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalName();  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalName();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalName();	  this.localFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
173	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	compilable	  [FE]  IllegalArgumentException  	41	10	replace
174	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	compilable	  [FE]  IllegalArgumentException  	41	10	replace
175	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	compilable	  [FE]  JsonParseException  	41	2	replace
176	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [FE]  JsonParseException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	compilable	  [FE]  JsonParseException  	41	2	replace
177	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [CE]  cannot  find  symbol  LocalFormat  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	41	None	replace
178	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	24	None	add
179	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	24	None	add
180	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	24	None	add
181	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  localeFormat  [FE]          JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	24	None	add
182	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  locale);  [CE]  cannot  find  symbol  locale  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(dateType,  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    locale);    	non-compiled	[CE]  cannot  find  symbol  locale	11	None	replace
183	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  locale);  [CE]  cannot  find  symbol  locale  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    locale);    	non-compiled	[CE]  cannot  find  symbol  locale	11	None	replace
184	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(type,  localFormat);  [CE]  cannot  find  symbol  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(type,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(type,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    locale);    	non-compiled	[CE]  cannot  find  symbol  type	11	None	replace
185	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	52	None	replace
186	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	52	None	replace
187	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	52	None	replace
188	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonParseException  	52	2	replace
189	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonParseException  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonParseException  	52	2	replace
190	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  null;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  null;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  null;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	52	None	replace
191	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat(localFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat(localFormat,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.getLocalFormat(localFormat,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
192	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.localFormat,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.localFormat,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(this.localFormat,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	10	None	replace
193	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstanceType();  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstanceType();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getInstanceType();	  this.localFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
194	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(this.dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
195	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocalFormat(dateType);  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getLocalFormat(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getLocalFormat(dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	2	None	replace
196	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(this.localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	2	None	replace
197	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	40	None	add
198	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	40	None	add
199	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	40	None	add
200	[BUG]  [BUGGY]  this.localFormat  =  enLocalFormat.getInstance();  [CE]  cannot  find  symbol  enLocalFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enLocalFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enLocalFormat.getInstance();	  this.localFormat    =    localeFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  enLocalFormat	34	None	replace
201	[BUG]  [BUGGY]  this.localFormat  =  Locale.getInstance();  [CE]  no  suitable  method  found  for  getInstance()  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  Locale.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  Locale.getInstance();	  this.localFormat    =    localeFormat.getInstance();    	non-compiled	[CE]  no  suitable  method  found  for  getInstance()	34	None	replace
202	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  DateFormat.class);  [CE]  cannot  find  symbol  LocalFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType,  DateFormat.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(dateType,  DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	43	None	replace
203	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  DateFormat.class);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  DateFormat.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(dateType,  DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
204	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  DateFormat.class);  [CE]  cannot  find  symbol  LocalFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  DateFormat.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat,  DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	43	None	replace
205	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(DateFormat.class,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(DateFormat.class,  LocalFormat.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(DateFormat.class,  LocalFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
206	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(DateFormat.class);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(DateFormat.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
207	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.localFormat,  DateFormat.class);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.localFormat,  DateFormat.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(this.localFormat,  DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
208	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat(localFormat);	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
209	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
210	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
211	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat(dateType,  localFormat);	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
212	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
213	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  new  DateFormat(localFormat);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  new  DateFormat(localFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  new  DateFormat(localFormat);  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
214	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(enUsFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
215	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.enUsFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(this.enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(this.enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
216	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocalFormat(enUsFormat);  [CE]  cannot  find  symbol  localeFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getLocalFormat(enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getLocalFormat(enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(enUsFormat);    	non-compiled	[CE]  cannot  find  symbol  localeFormat	13	None	replace
217	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	23	10	replace
218	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	23	10	replace
219	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	23	10	replace
220	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	23	10	replace
221	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	63	None	add
222	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	63	None	add
223	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localeFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	63	None	add
224	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  localeFormat	63	None	add
225	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  If(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  If(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    If(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
226	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  new  DateFormat();  }	  	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	63	None	add
227	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  LocalFormat.class;  }  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  LocalFormat.class;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  LocalFormat.class;  }	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
228	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  localFormat.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
229	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
230	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
231	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
232	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
233	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	60	None	replace
234	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalPattern();  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalPattern();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalPattern();	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
235	[BUG]  [BUGGY]  this.localFormat  =  localeFormat.getLocalFile();  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeFormat.getLocalFile();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeFormat.getLocalFile();	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	38	None	replace
236	[BUG]  [BUGGY]  this.localFormat  =  localFormat.findLocalFile();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.findLocalFile();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.findLocalFile();	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
237	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFile();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFile();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFile();	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
238	[BUG]  [BUGGY]  This.localFormat  =  enUsFormat;  [CE]  cannot  find  symbol  This  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  This.localFormat  =  enUsFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	This.localFormat  =  enUsFormat;	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  This	28	None	replace
239	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  enUsFormat.getInstance();  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  enUsFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    this.localFormat  =  enUsFormat.getInstance();	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
240	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
241	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
242	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
243	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
244	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
245	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
246	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
247	[BUG]  [BUGGY]  localFormat  =  Locale.getDefault();  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  localFormat  =  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	localFormat  =  Locale.getDefault();	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	3	None	replace
248	[BUG]  [BUGGY]  Locale.getDefault();  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Locale.getDefault();	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	3	None	replace
249	[BUG]  [BUGGY]  Locale  locale  =  Locale.getDefault();  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Locale  locale  =  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Locale  locale  =  Locale.getDefault();	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	3	None	replace
250	[BUG]  [BUGGY]  Locale  localFormat  =  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Locale  localFormat  =  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Locale  localFormat  =  Locale.getDefault();	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	3	None	replace
251	[BUG]  [BUGGY]  localeFormat  =  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  localeFormat  =  Locale.getDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	localeFormat  =  Locale.getDefault();	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	3	None	replace
252	[BUG]  [BUGGY]  Locale.setDefault(localFormat);  [CE]  no  suitable  method  found  for  setDefault(DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Locale.setDefault(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Locale.setDefault(localFormat);	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  no  suitable  method  found  for  setDefault(DateFormat)	3	None	replace
253	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(localFormat);	  this.localFormat    =    localFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
254	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(type);  [CE]  cannot  find  symbol  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(type);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(type);	  this.localFormat    =    localFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
255	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(DateType.class);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(DateType.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(DateType.class);	  this.localFormat    =    localFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
256	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  locale);  [CE]  cannot  find  symbol  locale  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(dateType,  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(dateType,  locale);	  this.localFormat    =    localFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol  locale	12	None	replace
257	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.withLocalFraction(localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.withLocalFraction(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.withLocalFraction(localFormat);	  this.localFormat    =    enUsFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
258	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  JsonParseException  	27	2	replace
259	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [FE]  JsonParseException  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  JsonParseException  	27	2	replace
260	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  DateFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  DateFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  DateFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  incompatible  types	27	None	replace
261	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [CE]  cannot  find  symbol  localeFormat  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	41	None	replace
262	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
263	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  locale);  [CE]  cannot  find  symbol  locale  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(localFormat,  locale);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  locale	37	None	replace
264	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  dateType);  [CE]  cannot  find  symbol  LocalFormat  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat,  dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(localFormat,  dateType);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
265	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(dateType,  localFormat);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
266	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(this.localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(this.localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(this.localFormat);	  this.localFormat    =    LocalFormat.getInstance(localFormat);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	37	None	replace
267	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
268	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
269	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".class);  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
270	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	22	None	add
271	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  inUsFormat  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	22	None	add
272	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	22	None	add
273	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat);  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat(enUsFormat);	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	28	None	replace
274	[BUG]  [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localeFormat;  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localeFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localeFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	59	None	replace
275	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  this.localFormat  =  localeFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	59	None	replace
276	[BUG]  [BUGGY]  this.dateType  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [CE]  incompatible  types  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.dateType  =  dateType.getSimpleName();  this.localFormat  =  localFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.dateType  =  dateType.getSimpleName();  this.localFormat  =  localFormat;	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  incompatible  types	59	None	replace
277	[BUG]  [BUGGY]  enUsFormat  =  localFormat.getLast();  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localFormat.getLast();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localFormat.getLast();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
278	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalName(localFormat.getLocal());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalName(localFormat.getLocal());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalName(localFormat.getLocal());	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
279	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocal(localFormat.getLocal());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocal(localFormat.getLocal());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocal(localFormat.getLocal());	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
280	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFileName(localFormat.getLocal());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFileName(localFormat.getLocal());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFileName(localFormat.getLocal());	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
281	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocal());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocal());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocal());	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
282	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  JsonSyntaxException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  JsonSyntaxException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  JsonSyntaxException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	72	None	replace
283	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  DateFormat  localFormat  =  new  DateFormat(dateType,  localFormat);  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  DateFormat  localFormat  =  new  DateFormat(dateType,  localFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  DateFormat  localFormat  =  new  DateFormat(dateType,  localFormat);  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	72	None	replace
284	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  DateFormat  localFormat  =  new  DateFormat();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  DateFormat  localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  DateFormat  localFormat  =  new  DateFormat();  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	72	None	replace
285	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat  <?  extends  Date>();  [CE]  type  DateFormat  does  not  take  parameters  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  DateFormat  <?  extends  Date>();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  DateFormat  <?  extends  Date>();	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  type  DateFormat  does  not  take  parameters	17	None	replace
286	[BUG]  [BUGGY]  this.dateType  =  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.dateType  =  dateType;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.dateType  =  dateType;	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	52	None	replace
287	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withInstance(dateType);  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withInstance(dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withInstance(dateType);	  this.localFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
288	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getName();  [CE]  cannot  find  symbol  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getName();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getName();	  this.localFormat    =    enUsFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
289	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  enUsFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  enUsFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  enUsFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
290	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
291	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	35	None	add
292	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  dateType;  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  dateType;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  dateType;	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat;    	non-compiled	[CE]  ';'  expected	31	None	replace
293	[BUG]  [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	47	None	replace
294	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass().getName();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass().getName();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass().getName();	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
295	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass();	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
296	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	47	None	replace
297	[BUG]  [BUGGY]  this.dateType  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  incompatible  types  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.dateType  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.dateType  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  incompatible  types	16	None	replace
298	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	16	None	replace
299	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	16	None	replace
300	[BUG]  [BUGGY]  this.localFormat  =  dateType;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  incompatible  types  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  dateType;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  dateType;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  incompatible  types	16	None	replace
301	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	16	None	replace
302	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.US_ASCII;  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.US_ASCII;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.US_ASCII;	  this.localFormat    =    enLocalFormat;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	1	None	replace
303	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFraction(localFormat.getLocalFormat());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFraction(localFormat.getLocalFormat());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFraction(localFormat.getLocalFormat());	  this.localFormat    =    localFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
304	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateType.class);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateType.class);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateType.class);	  this.localFormat    =    LocalFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
305	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	51	None	replace
306	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  Date.class)  {  this.localFormat  =  new  DateFormat();  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	51	None	replace
307	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  +  1;  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  +  1;  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  +  1;  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
308	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  +  localFormat;  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  +  localFormat;  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  +  localFormat;  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
309	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	43	None	replace
310	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  localFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	43	None	replace
311	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class)+  1;  [CE]  cannot  find  symbol  LocalFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class)+  1;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class)+  1;	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	43	None	replace
312	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  locale);  [CE]  cannot  find  symbol  locale  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class,  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  locale	43	None	replace
313	[BUG]  [BUGGY]  this.dateType  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  incompatible  types  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.dateType  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.dateType  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  incompatible  types	20	None	replace
314	[BUG]  [BUGGY]  this.localFormat  =  dateType;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  incompatible  types  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  dateType;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  dateType;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  incompatible  types	20	None	replace
315	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat!=  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	20	None	replace
316	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	20	None	replace
317	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType!=  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	20	None	replace
318	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(localFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat(localFormat,  dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLocalFormat(localFormat,  dateType);	  this.localFormat    =    localFormat.getLocalFormat(dateType);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
319	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	24	None	add
320	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  inUsFormat  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	24	None	add
321	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.toLocalFormat();  [CE]  cannot  find  symbol  LocalFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.toLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.toLocalFormat();	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	45	None	replace
322	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocalFormat(localFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLocalFormat(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocalFormat(localFormat);	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
323	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocalFormat(null);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLocalFormat(null);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocalFormat(null);	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
324	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat  <  Date>();  }  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat  <  Date>();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat  <  Date>();  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
325	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocalFile());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocalFile());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocalFile());	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
326	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocalFile();  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLocalFile();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocalFile();	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
327	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(null);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(null);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFilename(null);	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
328	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [CE]  cannot  find  symbol  inUsFormat  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  must  not  be  null.   ");  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null.   ");  }	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	26	None	add
329	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [CE]  cannot  find  symbol  inUsFormat  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	40	None	add
330	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  dateType;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  dateType;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    if(localFormat  ==  null)  {  this.localFormat  =  dateType;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist:   "  +  dateType);  }	  	non-compiled	[CE]  incompatible  types	40	None	add
331	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFamily(localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFamily(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFamily(localFormat);	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
332	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localeFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  localeFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  localeFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
333	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  dateType);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(),  dateType);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(),  dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
334	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(),  localFormat);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(),  localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getDefaultLocalFormat(),  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
335	[BUG]  [BUGGY]  this.localFormat  =  localeType;  [CE]  cannot  find  symbol  localeType  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localeType;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localeType;	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeType	21	None	replace
336	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [CE]  cannot  find  symbol  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  DateType.class);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    DateType.class);    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
337	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  DateFormat  localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  DateFormat  localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  DateFormat  localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	32	None	add
338	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat  ==  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	32	None	add
339	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  null  ||  dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  null  ||  dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  null  ||  dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	46	None	replace
340	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  dateType;  }  [CE]  incompatible  types  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  dateType;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  dateType;  }	  	non-compiled	[CE]  incompatible  types	63	None	add
341	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  LocalFormat;  }  [CE]  cannot  find  symbol  LocalFormat  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  LocalFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  this.localFormat  =  LocalFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  LocalFormat	63	None	add
342	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toInstance();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toInstance();	  this.localFormat    =    localeFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
343	[BUG]  [BUGGY]  this.dateType  =  dateUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  dateUsFormat  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.dateType  =  dateUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.dateType  =  dateUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  dateUsFormat	18	None	replace
344	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	compilable	  [FE]  JsonParseException  	64	2	replace
345	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	compilable	  [FE]  JsonParseException  	64	2	replace
346	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localeFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	64	None	replace
347	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	64	None	replace
348	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getDefault()  :  LocalFormat.UNKNOWN;  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getDefault()  :  LocalFormat.UNKNOWN;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getDefault()  :  LocalFormat.UNKNOWN;	  this.localFormat    =    LocalFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	44	None	replace
349	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getDefault()  :  LocalFormat.US_ASCII;  [CE]  cannot  find  symbol  LocalFormat  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getDefault()  :  LocalFormat.US_ASCII;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getDefault()  :  LocalFormat.US_ASCII;	  this.localFormat    =    LocalFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	44	None	replace
350	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8  |  LocalFormat.US_ASCII;  [CE]  cannot  find  symbol  LocalFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UTF8  |  LocalFormat.US_ASCII;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UTF8  |  LocalFormat.US_ASCII;	  this.localFormat    =    LocalFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	44	None	replace
351	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.DATE  :  LocalFormat.UTF8;  [CE]  cannot  find  symbol  LocalFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.DATE  :  LocalFormat.UTF8;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UTF8?  LocalFormat.DATE  :  LocalFormat.UTF8;	  this.localFormat    =    LocalFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	44	None	replace
352	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  String[localFormat.size()  ]);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  String[localFormat.size()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  String[localFormat.size()  ]);	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
353	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withValue();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withValue();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withValue();	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
354	[BUG]  [BUGGY]  this.localFormat  =  localFormat.fromValue();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.fromValue();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.fromValue();	  this.localFormat    =    localFormat.getValue();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
355	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withDefault();  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withDefault();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withDefault();	  this.localFormat    =    localFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
356	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withUTC();  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withUTC();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withUTC();	  this.localFormat    =    localFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
357	[BUG]  [BUGGY]  this.localFormat  =  localFormat.cloneTree();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.cloneTree();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.cloneTree();	  this.localFormat    =    localFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
358	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getTime();  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getTime();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getTime();	  this.localFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
359	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getDate();  [CE]  cannot  find  symbol  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getDate();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getDate();	  this.localFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
360	[BUG]  [BUGGY]  this.dateType  =  dateUsFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  dateUsFormat  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.dateType  =  dateUsFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.dateType  =  dateUsFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  dateUsFormat	56	None	replace
361	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  IllegalStateException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
362	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  JsonSyntaxException( " ");  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  JsonSyntaxException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  new  DateFormat(localFormat);  }  else  {  throw  new  JsonSyntaxException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
363	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLast();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getLast();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.getLast();	  this.localFormat    =    localeFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
364	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	19	None	replace
365	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	19	None	replace
366	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	19	None	replace
367	[BUG]  [BUGGY]  if(localFormat  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
368	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
369	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(this.dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	19	None	replace
370	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(this.dateType  ==  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	19	None	replace
371	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLowerCase();  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLowerCase();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLowerCase();	  this.localFormat    =    localFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
372	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	22	None	add
373	[BUG]  [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocalFormat());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocalFormat());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.withLocalFilename(localFormat.getLocalFormat());	  this.localFormat    =    localFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
374	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.getLocalFormat()  ]);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.getLocalFormat()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.getLocalFormat()  ]);	  this.localFormat    =    localFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
375	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFile[localFormat.size()  ]);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFile[localFormat.size()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  LocalFile[localFormat.size()  ]);	  this.localFormat    =    localFormat.getLocalFile();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
376	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  LocalFormat.getInstance();  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	71	None	replace
377	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  LocalFormat.getDefault();  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	71	None	replace
378	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	16	None	replace
379	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	16	10	replace
380	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	16	10	replace
381	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
382	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
383	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getRawClass())?  null  :  dateType.getRawClass();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getRawClass())?  null  :  dateType.getRawClass();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getRawClass())?  null  :  dateType.getRawClass();	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	46	None	replace
384	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getRawClass();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getRawClass();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getRawClass();	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	46	None	replace
385	[BUG]  [BUGGY]  aughtInvalidDateType( "Date  type  must  not  be  null. ");  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  aughtInvalidDateType( "Date  type  must  not  be  null. ");  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	aughtInvalidDateType( "Date  type  must  not  be  null. ");	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
386	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getClass())?  null  :  dateType.getClass();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getClass())?  null  :  dateType.getClass();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.getClass())?  null  :  dateType.getClass();	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	46	None	replace
387	[BUG]  [BUGGY]  aughtException( "Date  type  must  not  be  null. ");  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  aughtException( "Date  type  must  not  be  null. ");  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	aughtException( "Date  type  must  not  be  null. ");	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
388	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.UNKNOWN;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [CE]  cannot  find  symbol  LocalFormat  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.UNKNOWN;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.UNKNOWN;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exist: "  +  dateType);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	41	None	replace
389	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	25	10	replace
390	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [FE]  IllegalArgumentException  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	25	10	replace
391	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	25	10	replace
392	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [FE]  IllegalArgumentException  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }	  if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	25	10	replace
393	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.. ");  }	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	49	None	replace
394	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.  Class. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.  Class. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null.  Class. ");  }	  if(dateType!=    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	49	None	replace
395	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	28	None	replace
396	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  new  DateFormat(enUsFormat);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  new  DateFormat(enUsFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  new  DateFormat(enUsFormat);  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	28	None	replace
397	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	28	None	replace
398	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  [CE]  cannot  find  symbol  inUsFormat  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  cannot  find  symbol  inUsFormat	28	None	replace
399	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	15	None	replace
400	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	add	if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
401	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [FE]  IllegalArgumentException  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	compilable	  [FE]  IllegalArgumentException  	15	10	replace
402	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  + ". "  +  localFormat;  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  + ". "  +  localFormat;  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  getSimpleName()  + ". "  +  localFormat;  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
403	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  getSimpleName();  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  getSimpleName();  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  getSimpleName();  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    getSimpleName();    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
404	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType,  enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getInstance(dateType,  enUsFormat);	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	17	None	replace
405	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exists:   "  +  dateType);  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "Date  type  does  not  exist:   "  +  dateType);  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exists:   "  +  dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    does    not    exist:   "    +    dateType);    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  does  not  exists:   "  +  dateType);  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	40	None	add
406	[BUG]  [BUGGY]  enUsFormat  =  localFormat.getLocalName();  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localFormat.getLocalName();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localFormat.getLocalName();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
407	[BUG]  [BUGGY]  enUsFormat  =  localFormat.getLocalFile();  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localFormat.getLocalFile();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localFormat.getLocalFile();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
408	[BUG]  [BUGGY]  enUsFormat  =  localFormat.getLocalMillis();  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  enUsFormat  =  localFormat.getLocalMillis();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	enUsFormat  =  localFormat.getLocalMillis();	  enUsFormat    =    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
409	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.getLocal()  ]);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.getLocal()  ]);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  LocalFormat[localFormat.getLocal()  ]);	  this.localFormat    =    localFormat.getLocal();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
410	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	56	None	replace
411	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat;  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.enUsFormat  =  enUsFormat;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.enUsFormat  =  enUsFormat;	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	56	None	replace
412	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(enUsFormat  ==  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	56	None	replace
413	[BUG]  [BUGGY]  this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  variable  enUsFormat  might  already  have  been  assigned  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.enUsFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  enUsFormat  might  already  have  been  assigned	20	None	replace
414	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat(enUsFormat);  }  else  {  this.localFormat  =  new  DateFormat(localFormat);  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat(enUsFormat);  }  else  {  this.localFormat  =  new  DateFormat(localFormat);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat(enUsFormat);  }  else  {  this.localFormat  =  new  DateFormat(localFormat);  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    new    DateFormat(localFormat);    	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	70	None	replace
415	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	24	None	add
416	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFamily());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toArray(new  LocalFamily());  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toArray(new  LocalFamily());	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
417	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocalFamily();  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLocalFamily();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocalFamily();	  this.localFormat    =    localFormat.getLocalFamily();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
418	[BUG]  [BUGGY]  this.localFormat  =  localFormat,  enUsFormat.toLocalFormat();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat,  enUsFormat.toLocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat,  enUsFormat.toLocalFormat();	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  ';'  expected	45	None	replace
419	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLocalFormat(),  locale);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLocalFormat(),  locale);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLocalFormat(),  locale);	  this.localFormat    =    localFormat.toLocalFormat();    	non-compiled	[CE]  ';'  expected	45	None	replace
420	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat(localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getLocalFormat(localFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat.getLocalFormat(localFormat);	  this.localFormat    =    enUsFormat.getLocalFormat();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
421	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat(dateType);  }  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat(dateType);  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat!=  null)  {  this.localFormat  =  new  DateFormat(dateType);  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
422	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  This.localFormat  =  enUsFormat.getInstance();  [CE]  cannot  find  symbol  This  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  This.localFormat  =  enUsFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    This.localFormat  =  enUsFormat.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  This	35	None	add
423	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  inUsFormat.getInstance();  [CE]  cannot  find  symbol  inUsFormat  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  inUsFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    this.localFormat  =  inUsFormat.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	35	None	add
424	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  EnUsFormat.getInstance();  [CE]  cannot  find  symbol  EnUsFormat  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  EnUsFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    this.localFormat  =  EnUsFormat.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  EnUsFormat	35	None	add
425	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  anUsFormat.getInstance();  [CE]  cannot  find  symbol  anUsFormat  [FE]          JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  anUsFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    this.localFormat  =  anUsFormat.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  anUsFormat	35	None	add
426	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  ENUsFormat.getInstance();  [CE]  cannot  find  symbol  ENUsFormat  [FE]            JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat.getInstance();  this.localFormat  =  ENUsFormat.getInstance();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    enUsFormat.getInstance();    this.localFormat  =  ENUsFormat.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  ENUsFormat	35	None	add
427	[BUG]  [BUGGY]  this.localFormat  =  localFormat.toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.toLowerCase(Locale.ENGLISH);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat.toLowerCase(Locale.ENGLISH);	  this.localFormat    =    localFormat.getDefault();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
428	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	32	None	add
429	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]      JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getInstance();  this.enUsFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	32	None	add
430	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  this.localFormat  =  localFormat.getInstance();  }  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        JsonSyntaxException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  this.localFormat  =  localFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat    =    localFormat.getInstance();    if(localFormat!=  null)  {  this.localFormat  =  localFormat.getInstance();  }  else  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  this.localFormat  =  localFormat.getInstance();  }	  	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	32	None	add
431	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  cannot  find  symbol  LocalFormat  [FE]    IllegalArgumentException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	23	None	replace
432	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null  ||  dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null  ||  dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	48	None	replace
433	[BUG]  [BUGGY]  if(dateType  ==  null  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	48	None	replace
434	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getLocalFormat()  :  LocalFormat.UTF8;  [CE]  cannot  find  symbol  LocalFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getLocalFormat()  :  LocalFormat.UTF8;  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.UTF8?  LocalFormat.getLocalFormat()  :  LocalFormat.UTF8;	  this.localFormat    =    LocalFormat.UTF8;    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	44	None	replace
435	[BUG]  [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	53	None	replace
436	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]              JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(this.dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	53	None	replace
437	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  Date.class)  {  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	53	None	replace
438	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
439	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  final  String  SIMPLE_NAME  =  dateType.getSimpleName();  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    final    String    SIMPLE_NAME    =    dateType.getSimpleName();    if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	60	None	replace
440	[BUG]  [BUGGY]  this.localFormat  =  new  LocalFormat();  [CE]  cannot  find  symbol  [FE]            JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  new  LocalFormat();  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  new  LocalFormat();	  this.localFormat    =    enUsFormat;    this.localFormat    =    localFormat;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
441	[BUG]  [BUGGY]  if(localFormat  ==  null  ||  localFormat.equals(Locale.getDefault()))  {  localFormat  =  Locale.getDefault();  }  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null  ||  localFormat.equals(Locale.getDefault()))  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null  ||  localFormat.equals(Locale.getDefault()))  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  incompatible  types	3	None	replace
442	[BUG]  [BUGGY]  if(localFormat  ==  null  ||  localFormat.isLocal())  {  localFormat  =  Locale.getDefault();  }  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null  ||  localFormat.isLocal())  {  localFormat  =  Locale.getDefault();  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null  ||  localFormat.isLocal())  {  localFormat  =  Locale.getDefault();  }	  if(localFormat    ==    null)    {    localFormat    =    Locale.getDefault();    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
443	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]          JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  localFormat;  if(this.dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  localFormat;  if(this.dateType!=  Date.class)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	52	None	replace
444	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat),  enUsFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat),  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat),  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(),    localFormat);    	non-compiled	[CE]  ';'  expected	57	None	replace
445	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	63	None	add
446	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  cannot  find  symbol  inUsFormat  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  inUsFormat;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  cannot  find  symbol  inUsFormat	63	None	add
447	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  else  {  this.localFormat  =  localFormat;  }  [CE]  DateFormat  is  abstract;  cannot  be  instantiated  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  }  else  {  this.localFormat  =  localFormat;  }  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat    ==    null)    {    this.localFormat    =    enUsFormat;    }    else    {    this.localFormat    =    localFormat;    }    if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  DateFormat  is  abstract;  cannot  be  instantiated	63	None	add
448	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType,  enUsFormat);  [CE]  cannot  find  symbol  LocalFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType,  enUsFormat);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    dateType);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	42	None	replace
449	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  [CE]  variable  localFormat  might  not  have  been  initialized  [FE]        JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat!=  null)  {  this.localFormat  =  enUsFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat!=    null)    {    this.localFormat    =    enUsFormat;    }    	non-compiled	[CE]  variable  localFormat  might  not  have  been  initialized	51	None	replace
450	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                  JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalStateException( " ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	72	None	replace
451	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                    JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	72	None	replace
452	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  variable  localFormat  might  already  have  been  assigned  [FE]                      JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  this.localFormat    =    enUsFormat;    this.localFormat    =    dateType;    	non-compiled	[CE]  variable  localFormat  might  already  have  been  assigned	72	None	replace
453	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.DEFAULT);  [CE]  cannot  find  symbol  LocalFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.DEFAULT);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.DEFAULT);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  LocalFormat	43	None	replace
454	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.US);  [CE]  cannot  find  symbol  US  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.US);  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.US);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat,    DateFormat.class);    	non-compiled	[CE]  cannot  find  symbol  US	43	None	replace
455	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonSyntaxException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;      [BUGGY]  this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]      }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	80	80	2	replace	this.localFormat  =  enUsFormat;  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }	  this.localFormat    =    enUsFormat;    if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    else    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  cannot  find  symbol  localeFormat	18	None	replace
