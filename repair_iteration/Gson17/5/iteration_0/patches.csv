bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	add	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	compilable	  [FE]  JsonParseException  	9	2	replace
2	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [FE]  JsonParseException  [FE]    JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	compilable	  [FE]  JsonParseException  	9	2	replace
3	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]      JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	9	None	replace
4	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]        JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]          JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	9	None	replace
6	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]            JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	9	None	replace
7	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]              JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat)  {  [CE]  <identifier>  expected  [FE]                JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  JsonParseException  [CONTEXT]    [BUGGY]    [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	  	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateUsFormat,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]    JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateUsFormat,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateUsFormat,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	9	None	replace
11	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]      JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	9	None	replace
12	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]        JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	9	None	replace
13	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]          JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	9	None	replace
14	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]    JsonParseException  [CONTEXT]    [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat)  {  [BUGGY]  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat)  {	DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	9	None	replace
