bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	12	None	replace
2	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	12	None	replace
3	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault())  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
7	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
8	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
9	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Locale.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	3	None	replace
15	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	3	None	replace
16	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	3	None	replace
17	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	3	None	replace
18	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	3	None	replace
19	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException    [CONTEXT]      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException    [CONTEXT]      [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException    [CONTEXT]      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                              JsonParseException    [CONTEXT]      [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                                JsonParseException    [CONTEXT]      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	10	None	replace
26	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	2	None	replace
32	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
33	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
34	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	13	None	replace
35	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter	13	None	replace
36	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	13	None	replace
37	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	13	None	replace
38	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
39	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	11	None	replace
40	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  localFormat)  {  [CE]  <identifier>  expected  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	11	None	replace
44	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
45	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat)  {  [CE]  <identifier>  expected  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  SIMPLE_NAME)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	5	None	replace
50	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
51	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [CE]  unclosed  string  literal  [FE]      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
52	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [CE]  unclosed  string  literal  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
53	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
54	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
55	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
56	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  	non-compiled	[CE]  	1	None	add
57	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
58	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	14	None	replace
59	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	14	None	replace
60	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	14	None	replace
62	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
63	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	10	None	replace
64	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat);  [CE]  <identifier>  expected  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  localFormat);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  super(dateType,  DateFormat.class,  localFormat);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  localFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class);  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType);  [CE]  illegal  start  of  type  [FE]                        JsonParseException    [CONTEXT]      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance();  [CE]  illegal  start  of  type  [FE]                          JsonParseException    [CONTEXT]      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance();  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType);  [CE]  illegal  start  of  type  [FE]                            JsonParseException    [CONTEXT]      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
73	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateType.class;  [CE]  illegal  start  of  type  [FE]                              JsonParseException    [CONTEXT]      [BUGGY]  Class  <?>  localFormat  =  DateType.class;  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateType.class;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
74	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
75	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
76	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  datePattern)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	14	None	replace
77	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	14	None	replace
78	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	11	None	replace
79	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
80	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat);  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
81	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
82	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
83	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	5	None	replace
84	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	3	None	replace
85	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
86	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
87	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
88	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if  (  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
89	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]    JsonParseException    [CONTEXT]      [BUGGY]  super(dateType,  enUsFormat,  localFormat);  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  enUsFormat,  localFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
90	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat  localFormat)  {  [CE]  <identifier>  expected  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeParser)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeParser)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeParser)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
93	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFile)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFile)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	13	None	replace
94	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT)  {  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
95	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
96	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
97	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
98	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
99	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  but  was   "  +  dateType);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
100	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [CE]  unclosed  string  literal  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
101	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  or   "  +  Date.class);  }  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  or   "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  or   "  +  Date.class);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
102	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	12	None	replace
103	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  localeFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
104	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
105	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
106	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
107	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
108	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance();  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]      [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance();  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getInstance();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern();  [CE]  illegal  start  of  type  [FE]                        JsonParseException    [CONTEXT]      [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern();  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
110	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ", "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException    [CONTEXT]      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ", "  +  Date.class);  }  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ", "  +  Date.class);  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
111	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localFormat)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
112	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]            JsonParseException    [CONTEXT]      [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern)  {  [BUGGY]    if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	11	None	replace
