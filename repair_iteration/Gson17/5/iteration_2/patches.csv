bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	61	None	replace
2	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class  <?  extends  Date>,  dateType,  DateFormat  localeFormat)  {  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class  <?  extends  Date>,  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class  <?  extends  Date>,  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
3	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	61	None	replace
4	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
5	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
6	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter	35	None	replace
7	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter	35	None	replace
8	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateType.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateType.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateType.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
9	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
10	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
11	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone.class)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
12	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
13	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
14	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
15	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
16	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	37	None	replace
17	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	37	None	replace
18	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern,  DateFormat  localePattern)  {  [CE]  variable  localePattern  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  variable  localePattern  is  already  defined  in  constructor  DefaultDateTypeAdapter	37	None	replace
19	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	37	None	replace
20	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localePattern,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
21	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
22	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
23	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
24	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
25	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
26	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
27	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
28	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
29	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timeType,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timeType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timeType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	63	None	replace
30	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	63	None	replace
31	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localeFile)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	63	None	replace
32	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
33	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	63	None	replace
34	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  Locale.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  Locale.class)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  DefaultDateTypeAdapter(this.dateType,  DateFormat  },  DateFormat)  {  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(this.dateType,  DateFormat  },  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(this.dateType,  DateFormat  },  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
39	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  dateType);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
40	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  SIMPLE_NAME);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  SIMPLE_NAME);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
41	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
42	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  1);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  1);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  1);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
43	[BUG]  [BUGGY]  final  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  final  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
44	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  this.localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
45	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
46	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
47	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
48	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
49	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	78	None	replace
50	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType,  String  SIMPLE_NAME)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	78	None	replace
51	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  timeType)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	78	None	replace
52	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Locale.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
53	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  locale)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  locale)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  locale)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	78	None	replace
54	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
55	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
56	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
57	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
58	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
59	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
60	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  but  was   "  +  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  but  was   "  +  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  but  was   "  +  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
61	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  this.localFormat!=  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
62	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
63	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
64	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
65	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	7	None	replace
66	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	7	None	replace
67	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	7	None	replace
68	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	7	None	replace
69	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
71	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
72	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
73	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
74	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
75	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	32	None	replace
76	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	32	None	replace
77	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	32	None	replace
78	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	32	None	replace
79	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	32	None	replace
80	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
81	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
82	[BUG]  [BUGGY]  this(final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  this(final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	this(final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
83	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType)  {  [CE]  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>)  is  already  defined  in  class  DefaultDateTypeAdapter  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>)  is  already  defined  in  class  DefaultDateTypeAdapter	27	None	replace
84	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
85	[BUG]  [BUGGY]  final  Class  <?>  localFormat  =  DateType.class;  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?>  localFormat  =  DateType.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?>  localFormat  =  DateType.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
86	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateType.newInstance();  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  DateType.newInstance();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateType.newInstance();	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
87	[BUG]  [BUGGY]  Class  <?>  localFormat  =  Date.class;  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  Date.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  Date.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
88	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateType.class  ||  dateType  ==  DateType.class;  [CE]  illegal  start  of  type  [FE]                                        JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  DateType.class  ||  dateType  ==  DateType.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateType.class  ||  dateType  ==  DateType.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
89	[BUG]  [BUGGY]  static  final  Class  <?>  localFormat  =  DateType.class;  [CE]  illegal  start  of  type  [FE]                                          JsonParseException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  localFormat  =  DateType.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	static  final  Class  <?>  localFormat  =  DateType.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
90	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateType.class  ||  dateType!=  DateType.class;  [CE]  illegal  start  of  type  [FE]                                            JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  DateType.class  ||  dateType!=  DateType.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateType.class  ||  dateType!=  DateType.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
91	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
92	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	52	None	replace
93	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
94	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	52	None	replace
95	[BUG]  [BUGGY]  DefaultDateTypeAdapter(localFormat,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(localFormat,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(localFormat,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  <identifier>  expected	52	None	replace
96	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
97	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
98	[BUG]  [BUGGY]  super(localFormat,  DateFormat.class,  dateType);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  super(localFormat,  DateFormat.class,  dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(localFormat,  DateFormat.class,  dateType);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
99	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  this.localFormat);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
100	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  localFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  localFormat,  SIMPLE_NAME);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  localFormat,  SIMPLE_NAME);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
101	[BUG]  [BUGGY]  super(this.dateType,  DateFormat.class,  localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  super(this.dateType,  DateFormat.class,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(this.dateType,  DateFormat.class,  localFormat);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
102	[BUG]  [BUGGY]  super(dateType,  LocalFormat.class,  localFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  LocalFormat.class,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  LocalFormat.class,  localFormat);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
103	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  localFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  localFormat,  enUsFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  localFormat,  enUsFormat);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
104	[BUG]  [BUGGY]  super(localFormat,  DateFormat.class);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  super(localFormat,  DateFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(localFormat,  DateFormat.class);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
105	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	84	None	replace
106	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  String  SIMPLE_NAME)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	84	None	replace
107	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
108	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  dateType)  {  [CE]  type  DateFormat  does  not  take  parameters  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  type  DateFormat  does  not  take  parameters	84	None	replace
109	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
110	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    or       "    +    Date.class);    }    	non-compiled	[CE]  '('  or  '['  expected	101	None	replace
111	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
112	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
113	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
114	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocaleFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocaleFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocaleFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	33	None	replace
115	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  String  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
116	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  String  SIMPLE_NAME)  {  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
117	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  String  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
118	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat,  SIMPLE_NAME)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
119	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateType.SHORT_NAME,  String  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateType.SHORT_NAME,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateType.SHORT_NAME,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
120	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
121	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
122	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.enUsFormat)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.enUsFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.enUsFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
123	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
124	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
125	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
126	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
127	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  localFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
128	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  String  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  String  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  String  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	83	None	replace
129	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  Locale.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    Locale.getDefault())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
130	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  Locale.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    Locale.getDefault())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
131	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    Locale.getDefault())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
132	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
133	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
134	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
135	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
136	[BUG]  [BUGGY]  DefaultDateTypeAdapter(dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  <identifier>  expected	50	None	replace
137	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
138	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  [CE]  ')'  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  ')'  expected	50	None	replace
139	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	59	None	replace
140	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	59	None	replace
141	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  country)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  country)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  country)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	59	None	replace
142	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	34	None	replace
143	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	34	None	replace
144	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
145	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  <?>  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  <?>  localeFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  <?>  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
146	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
147	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
148	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
149	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
150	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
151	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
152	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
153	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  String  SIMPLE_NAME)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
154	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  int  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  int  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  int  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
155	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
156	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.class)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
157	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
158	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
159	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
160	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
161	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
162	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
163	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  <?>,  DateFormat  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  <?>,  DateFormat  localeFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  <?>,  DateFormat  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
164	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  },  DateFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  },  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  },  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
165	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
166	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
167	[BUG]  [BUGGY]  aughtException.withType(Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  <identifier>  expected  [FE]                                        JsonParseException      [CONTEXT]        [BUGGY]  aughtException.withType(Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	aughtException.withType(Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
168	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat);  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
169	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.getDefault());  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.getDefault());  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.getDefault());	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
170	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class);  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
171	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class);  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
172	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  localFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
173	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  localFormat,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  localFormat,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  localFormat,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
174	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType)  {  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
175	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.timeType)  {  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
176	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
177	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localeFile)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  LocalFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
178	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
179	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
180	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
181	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.enUsFormat)  {  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.enUsFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.enUsFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
182	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.localFormat,  SIMPLE_NAME)  {  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.localFormat,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.localFormat,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
183	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  timePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	112	None	replace
184	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  timePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	112	None	replace
185	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
186	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	112	None	replace
187	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  long  serialVersion)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  long  serialVersion)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  long  serialVersion)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	112	None	replace
188	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  String  name)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  String  name)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  String  name)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
189	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  name)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  name)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  name)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
190	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNumber)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNumber)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNumber)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
191	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  String  name,  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  String  name,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  String  name,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
192	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNamingStrategy)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNamingStrategy)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNamingStrategy)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
193	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
194	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat.class)    {    	non-compiled	[CE]  ';'  expected	82	None	replace
195	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
196	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Serializable.class)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Serializable.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Serializable.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
197	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localeFormat)  {  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
198	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  localeFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  localeFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  localeFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
199	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  int  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	76	None	replace
200	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME,  datePattern)  {  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME,  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME,  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
201	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  int  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	76	None	replace
202	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  datePattern,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  datePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  datePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	76	None	replace
203	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  int  datePattern,  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  int  datePattern,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  int  datePattern,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	76	None	replace
204	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  localFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
205	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
206	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localFormat,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
207	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	16	None	replace
208	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	16	None	replace
209	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFile)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	16	None	replace
210	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	16	None	replace
211	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat);  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
212	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class);  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
213	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat,  DateFormat);  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat,  DateFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
214	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class);  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
215	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
216	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
217	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
218	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
219	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
220	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
221	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	74	None	replace
222	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  long  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  long  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  long  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	74	None	replace
223	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
224	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	17	None	replace
225	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	17	None	replace
226	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	17	None	replace
227	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  int  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  int  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  int  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	75	None	replace
228	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
229	[BUG]  [BUGGY]  aughtException.withType(Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  aughtException.withType(Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	aughtException.withType(Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
230	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
231	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  timeZone)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	39	None	replace
232	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
233	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateType.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateType.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateType.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
234	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
235	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
236	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
237	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	8	None	replace
238	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class  <?  extends  Date>,  dateType,  DateFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class  <?  extends  Date>,  dateType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class  <?  extends  Date>,  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
239	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  type)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  type)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  type)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	8	None	replace
240	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Locale.class)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
241	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	102	None	replace
242	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	102	None	replace
243	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  localeFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Locale.getDefault(),  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	102	None	replace
244	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
245	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
246	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
247	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unclosed  string  literal	98	None	replace
248	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localeFormat)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
249	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  LocalFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
250	[BUG]  [BUGGY]  final  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  final  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
251	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  LocalFormat  localeFormat)  {  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
252	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  dateType,  DateFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  dateType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
253	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  Date>  dateType,  DateFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  Date>  dateType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  Date>  dateType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
254	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
255	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?  extends  Date>  localeFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?  extends  Date>  localeFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?  extends  Date>  localeFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
256	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <  Object>  localeFormat,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <  Object>  localeFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <  Object>  localeFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
257	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>,  SerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
258	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  unclosed  string  literal	56	None	replace
259	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  '('  or  '['  expected	56	None	replace
260	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  <identifier>  expected	56	None	replace
261	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  '('  or  '['  expected	56	None	replace
262	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  '('  or  '['  expected	56	None	replace
263	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
264	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	14	None	replace
265	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.enUsFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.enUsFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.enUsFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.localFormat)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
266	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.localFormat)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
267	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dataPattern)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dataPattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dataPattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.localFormat)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
268	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String.class)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
269	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable.class)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
270	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localeFile)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	93	None	replace
271	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localeFile)  {  [CE]  variable  localeFile  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  localeFile  is  already  defined  in  constructor  DefaultDateTypeAdapter	93	None	replace
272	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFile)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	93	None	replace
273	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	93	None	replace
274	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFile,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFile,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat  localeFile,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	93	None	replace
275	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  final  DateFormat  localeFile)  {  [CE]  variable  localeFile  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  final  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  final  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  localeFile  is  already  defined  in  constructor  DefaultDateTypeAdapter	93	None	replace
276	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateInstance();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateInstance();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateInstance();	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
277	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.newInstance();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.newInstance();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.newInstance();	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
278	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTimeInstance();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTimeInstance();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTimeInstance();	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
279	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance(this.dateType);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance(this.dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getInstance(this.dateType);	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
280	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDate();  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDate();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDate();	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
281	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance(this.localFormat);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance(this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getInstance(this.localFormat);	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
282	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  null)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  null)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  null)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.dateType)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
283	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeType)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.dateType)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
284	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  false)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  false)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  false)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.dateType)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
285	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat)    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
286	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstanceUTC();  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstanceUTC();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstanceUTC();	  DatePattern    datePattern    =    DatePattern.getInstance();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
287	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(DatePattern.class);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(DatePattern.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(DatePattern.class);	  DatePattern    datePattern    =    DatePattern.getInstance();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
288	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.localFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
289	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDateInstance(DatePattern.class);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getDateInstance(DatePattern.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getDateInstance(DatePattern.class);	  DatePattern    datePattern    =    DatePattern.getInstance();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
290	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(localFormat);  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
291	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	36	None	replace
292	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	36	None	replace
293	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	36	None	replace
294	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
295	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	31	None	replace
296	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  long  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  long  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  long  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	31	None	replace
297	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.dateType);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.dateType);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
298	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.localFormat);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
299	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.sqlNumber);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.sqlNumber);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.sqlNumber);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
300	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.timeZone);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.timeZone);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(this.timeZone);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
301	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(0);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(0);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(0);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
302	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(SimPLE_NAME);  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(SimPLE_NAME);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(SimPLE_NAME);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
303	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
304	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	100	None	replace
305	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  '('  or  '['  expected	100	None	replace
306	[BUG]  [BUGGY]  DefaultDateTypeAdapter(localFormat,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(localFormat,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(localFormat,  final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  <identifier>  expected	100	None	replace
307	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  DateType  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
308	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat,  localeFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat,  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localFormat,  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
309	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat,  localeFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat,  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat,  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
310	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat,  localFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.localFormat,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
311	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeZone,  localeFormat,  localFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeZone,  localeFormat,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeZone,  localeFormat,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
312	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  LocalFormat  localFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
313	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  localFormat)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
314	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
315	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat.class)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
316	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
317	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  final  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  final  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  final  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
318	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  siblingNAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  siblingNAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  siblingNAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
319	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME,  int  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
320	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  siblingPattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  siblingPattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  siblingPattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	6	None	replace
321	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
322	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
323	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  localFormat);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
324	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DateType.class);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DateType.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DateType.class);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
325	[BUG]  [BUGGY]  final  DatePattern  datePattern  =  DatePattern.getInstance(dateType);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  final  DatePattern  datePattern  =  DatePattern.getInstance(dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  DatePattern  datePattern  =  DatePattern.getInstance(dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
326	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
327	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
328	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  null)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  null)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  null)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
329	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.localFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
330	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlNumber);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlNumber);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlNumber);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
331	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  localFormat);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
332	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlNamingStrategy);  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlNamingStrategy);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlNamingStrategy);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
333	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.timeType);  [CE]  illegal  start  of  type  [FE]                                        JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.timeType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.timeType);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
334	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.timeZone);  [CE]  illegal  start  of  type  [FE]                                          JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.timeZone);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.timeZone);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
335	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
336	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
337	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
338	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  Serializable)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  Serializable)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  Serializable)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Serializable)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
339	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Serializable)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Serializable)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Serializable)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Serializable)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
340	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable,  String  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Serializable)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
341	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable,  long  serialVersion)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable,  long  serialVersion)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable,  long  serialVersion)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Serializable)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
342	[BUG]  [BUGGY]  super(localFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  super(localFormat,  enUsFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(localFormat,  enUsFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
343	[BUG]  [BUGGY]  super(this.dateType,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  super(this.dateType,  enUsFormat,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(this.dateType,  enUsFormat,  localFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
344	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
345	[BUG]  [BUGGY]  super(dateType,  localFormat);  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  localFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
346	[BUG]  [BUGGY]  super(dateType,  localFormat,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  localFormat,  enUsFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  localFormat,  enUsFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
347	[BUG]  [BUGGY]  super(type,  enUsFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  super(type,  enUsFormat,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(type,  enUsFormat,  localFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
348	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  java.sql.Date.class,  or   "  +  java.sql.Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  java.sql.Date.class,  or   "  +  java.sql.Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  java.sql.Date.class,  or   "  +  java.sql.Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
349	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
350	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
351	[BUG]  [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
352	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  LocalFormat  localeFormat,  DateFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  LocalFormat  localeFormat,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  LocalFormat  localeFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
353	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
354	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localePattern)  {  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
355	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
356	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat.SHORT)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat.SHORT)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat.SHORT)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
357	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.LONG)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.LONG)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.LONG)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
358	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
359	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  true)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  true)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  true)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
360	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  serial)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  serial)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT,  serial)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
361	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
362	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  timeZone)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	1	None	replace
363	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
364	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.US,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.US,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.US,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
365	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.getDefault())  {  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Locale.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
366	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	58	None	replace
367	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME,  int  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	58	None	replace
368	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
369	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
370	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
371	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat.SHORT)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat.SHORT)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat.SHORT)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
372	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.ZONE)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.ZONE)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.ZONE)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
373	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT,  localFormat)  {  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
374	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.SHORT,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
375	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeParser)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeParser)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeParser)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    timeParser)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
376	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.datePattern)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    timeParser)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
377	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  timeParser)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  timeParser)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  timeParser)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    timeParser)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
378	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
379	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  localFormat)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
380	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localFormat)  {  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType,    localFormat)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
381	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  dateType,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
382	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
383	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
384	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
385	[BUG]  [BUGGY]  mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
386	[BUG]  [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
387	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  TimeZone.getDefault())  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  TimeZone.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  TimeZone.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
388	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat,  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	102	None	replace
389	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  TimeFormat  dateType,  DateFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  TimeFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  TimeFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
390	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  timeType,  DateFormat  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  timeType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  timeType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	102	None	replace
391	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  localeFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter	102	None	replace
392	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	102	None	replace
393	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Serializable)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Serializable)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Serializable)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
394	[BUG]  [BUGGY]  &&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  &&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	&&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
395	[BUG]  [BUGGY]  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  &&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	&&  localFormat!=  JsonParseException.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
396	[BUG]  [BUGGY]  &&  LocalFormat.class.isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  &&  LocalFormat.class.isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	&&  LocalFormat.class.isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
397	[BUG]  [BUGGY]  &&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  &&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	&&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
398	[BUG]  [BUGGY]  &&  LocalFormat.class.equals(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  &&  LocalFormat.class.equals(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	&&  LocalFormat.class.equals(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
399	[BUG]  [BUGGY]  &&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  &&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	&&  LocalFormat.class.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
400	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
401	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
402	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
403	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
404	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
405	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timest  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timest  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timest	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
406	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  this.datePattern)  {  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  this.datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  this.datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
407	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
408	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
409	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  LocalFormat.class;  }  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  this.localFormat  =  LocalFormat.class;  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  this.localFormat  =  LocalFormat.class;  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
410	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  format)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  format)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  format)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	43	None	replace
411	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone.getDefault())  {  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone.getDefault())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone.getDefault())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
412	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  localFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
413	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  datePattern)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	8	None	replace
414	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
415	[BUG]  [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
416	[BUG]  [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
417	[BUG]  [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
418	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  LocalFormat.class);  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  LocalFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  LocalFormat.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
419	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType,  DateFormat  localFormat)  {  [CE]  <identifier>  expected  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
420	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
421	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  timePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	63	None	replace
422	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  timeType)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timeType,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	63	None	replace
423	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timeType,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timeType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timeType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	33	None	replace
424	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  localeFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  String  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	103	None	replace
425	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.US_ASCII)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.US_ASCII)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.US_ASCII)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
426	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.JSON_ARRAY)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.JSON_ARRAY)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.JSON_ARRAY)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
427	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
428	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
429	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	93	None	replace
430	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFile)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	93	None	replace
431	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern,  DateFormat  localeFile)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	93	None	replace
432	[BUG]  [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
433	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
434	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  datePattern,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  datePattern,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  datePattern,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
435	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat)  {  [CE]  type  DateFormat  does  not  take  parameters  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  <?>  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  type  DateFormat  does  not  take  parameters	12	None	replace
436	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
437	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  String.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  String.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  String.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
438	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  format,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  format,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  format,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	35	None	replace
439	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType)  {  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
440	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.timeZone)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
441	[BUG]  [BUGGY]  mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
442	[BUG]  [BUGGY]  mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
443	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Calendar.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Calendar.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Calendar.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
444	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  JsonParseException.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  JsonParseException.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  JsonParseException.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
445	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  JsonParse.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  JsonParse.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  JsonParse.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
446	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  Locale.getDefault());  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  Locale.getDefault());  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  Locale.getDefault());	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
447	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  locale);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  locale);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  locale);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
448	[BUG]  [BUGGY]  super(dateType,  timePattern,  localFormat);  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  timePattern,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  timePattern,  localFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
449	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  format)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  format)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  format)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	1	None	replace
450	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localeFormat)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
451	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  DateType.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  DateType.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  DateType.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
452	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
453	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class),  this)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
454	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class),  this)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
455	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  LocalFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
456	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class),  this)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
457	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  localeType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  localeType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  localeType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
458	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
459	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
460	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
461	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  localFormat!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
462	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Calendar.class  &&  dateType!=  Calendar.class  &&  dateType!=  Calendar.class  &&  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Calendar.class  &&  dateType!=  Calendar.class  &&  dateType!=  Calendar.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Calendar.class  &&  dateType!=  Calendar.class  &&  dateType!=  Calendar.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
463	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  this.dateType);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  this.dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  this.dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
464	[BUG]  [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	mutableFor(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
465	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType,  localFormat)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType,  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType,  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType,    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
466	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  locale)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  locale)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  locale)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    Locale.getDefault())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
467	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat,  DateFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat,  DateFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat,  DateFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
468	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat,  DateFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
469	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localeFile)  {  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localeFormat,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    LocalFormat    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
470	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
471	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
472	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
473	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	97	None	replace
474	[BUG]  [BUGGY]  super(dateType,  enUsFormat,  localeFormat);  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  enUsFormat,  localeFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  enUsFormat,  localeFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
475	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    dateType)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
476	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
477	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
478	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFormat)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
479	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.class)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
480	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class),  this)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
481	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(dateType);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(dateType);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
482	[BUG]  [BUGGY]  super(dateType,  DateFormat.class);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
483	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat);  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
484	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
485	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
486	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat);  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
487	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
488	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
489	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	61	None	replace
490	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNumber)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNumber)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  siblingNumber)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	61	None	replace
491	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  long  serialVersion)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  long  serialVersion)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  long  serialVersion)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	75	None	replace
492	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstanceUTC();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstanceUTC();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getInstanceUTC();	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
493	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateInstance(DateFormat.SHORT);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateInstance(DateFormat.SHORT);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateInstance(DateFormat.SHORT);	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
494	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance(dateType);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getInstance(dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getInstance(dateType);	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
495	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateInstance(DateFormat.class);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateInstance(DateFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateInstance(DateFormat.class);	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
496	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  int  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	7	None	replace
497	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  String  datePattern)  {  [CE]  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,String)  is  already  defined  in  class  DefaultDateTypeAdapter  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  String  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  String  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localFormat)    {    	non-compiled	[CE]  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,String)  is  already  defined  in  class  DefaultDateTypeAdapter	7	None	replace
498	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	58	None	replace
499	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
500	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  timeParser);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  timeParser);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  timeParser);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    timeParser)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
501	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  String  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  String  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  String  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
502	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
503	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  localeFormat,  DateFormat.class)  {  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  localeFormat,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  localeFormat,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
504	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat);  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  DateFormat);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
505	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
506	[BUG]  [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
507	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
508	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
509	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
510	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  '('  or  '['  expected	57	None	replace
511	[BUG]  [BUGGY]  Class  <?>  localFormat  =  dateType.class;  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  dateType.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  dateType.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
512	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateType.class  +  1;  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  DateType.class  +  1;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateType.class  +  1;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
513	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateType.class  ||  DateType.class!=  dateType;  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  DateType.class  ||  DateType.class!=  dateType;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateType.class  ||  DateType.class!=  dateType;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
514	[BUG]  [BUGGY]  Class  <?>  localFormat  =  DateTypeUtil.class;  [CE]  illegal  start  of  type  [FE]                                        JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  DateTypeUtil.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  DateTypeUtil.class;	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
515	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	51	None	replace
516	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class),  this)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
517	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class),  true)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class),  true)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class),  true)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
518	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
519	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialSerialUtilities.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialSerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialSerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
520	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat  localePattern)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  type,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	37	None	replace
521	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  TimeZone.class)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  TimeZone.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  TimeZone.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
522	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  JsonParse.class)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  JsonParse.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  JsonParse.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
523	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  JsonParseException.class)  {  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  JsonParseException.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  JsonParseException.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
524	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
525	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  locale)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  locale)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  locale)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	84	None	replace
526	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	84	None	replace
527	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFileName)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFileName)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFileName)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	84	None	replace
528	[BUG]  [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
529	[BUG]  [BUGGY]  safeGet(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  safeGet(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	safeGet(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
530	[BUG]  [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                        JsonParseException      [CONTEXT]        [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
531	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
532	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  localeFormat,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	15	None	replace
533	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.separator);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.separator);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.separator);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
534	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable),  this)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Serializable),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Serializable)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
535	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  DateFormat  localeFormat)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    dateUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	25	None	replace
536	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.US_ASCII)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.US_ASCII)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.US_ASCII)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
537	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.JSON_ARRAY)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.JSON_ARRAY)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.JSON_ARRAY)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
538	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.STRING)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.STRING)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.STRING)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
539	[BUG]  [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	safeMultiply(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
540	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  String  localFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  String  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  String  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
541	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  LocalFormat  localFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  SIMPLE_NAME,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
542	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  timeType)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  timePattern,  DateFormat  timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    timePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	39	None	replace
543	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  timePattern)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	78	None	replace
544	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFileType)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFileType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  localeFileType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	78	None	replace
545	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
546	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
547	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
548	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  timePattern)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  timePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat  timePattern)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
549	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType)  {  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
550	[BUG]  [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat.class)  {  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(class,  final  Date>  dateType,  DateFormat.class)  {	  DefaultDateTypeAdapter(class,    final    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
551	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	95	None	replace
552	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class));  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class));  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.class));	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
553	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeZone)  {  [CE]  <identifier>  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
554	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
555	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
556	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
557	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
558	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  	52	None	replace
559	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  datePattern)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType,  DateFormat  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
560	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  long  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  long  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  DateFormat  dateType,  long  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	2	None	replace
561	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  unclosed  string  literal	100	None	replace
562	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
563	[BUG]  [BUGGY]  Class  <?>  dateType  =  new  Class  <?>(Date.class)?  null  :  dateType.getRawClass();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  dateType  =  new  Class  <?>(Date.class)?  null  :  dateType.getRawClass();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  dateType  =  new  Class  <?>(Date.class)?  null  :  dateType.getRawClass();	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
564	[BUG]  [BUGGY]  aughtException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  aughtException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	aughtException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
565	[BUG]  [BUGGY]  Class  <?>  dateType  =  Date.class;  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  dateType  =  Date.class;  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  dateType  =  Date.class;	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
566	[BUG]  [BUGGY]  Class  <?>  dateType  =  this.datePattern.getRawClass();  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  dateType  =  this.datePattern.getRawClass();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  dateType  =  this.datePattern.getRawClass();	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
567	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   "  but  was   "  +  dateType);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
568	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  timeZone);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  timeZone);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(DatePattern.class,  timeZone);	  DatePattern    datePattern    =    DatePattern.getInstance(DatePattern.class);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
569	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  this.localFormat)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.dateType)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
570	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  true)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  true)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateType,  true)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.dateType)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
571	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class),  this);  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class),  this);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class),  this);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
572	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class),  this)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SerialUtilities.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
573	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeZone)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    this.localFormat)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
574	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat!=,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat!=,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat!=,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
575	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat.SHORT)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat.SHORT)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  },  DateFormat.SHORT)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
576	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat!=,  DateFormat.class)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat!=,  DateFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat!=,  DateFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    },    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
577	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  localeFormat,  LocalFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    localeFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
578	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  class,  interface,  or  enum  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
579	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
580	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",   "  +  Date.class);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",   "  +  Date.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",   "  +  Date.class);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",   "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
581	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  dateType,  String  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  dateType,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  dateType,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
582	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  dateType,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  dateType,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  dateType,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
583	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  serializer,  SIMPLE_NAME)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  serializer,  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  serializer,  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
584	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LOCALE)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LOCALE)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LOCALE)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat)    {    	non-compiled	[CE]  <identifier>  expected	105	None	replace
585	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  new  LocalFormat())  {  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  new  LocalFormat())  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  new  LocalFormat())  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
586	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  SIMPLE_NAME);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  SIMPLE_NAME);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  SIMPLE_NAME);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
587	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.sqlNumber);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.sqlNumber);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.sqlNumber);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
588	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME,  datePattern)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME,  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  String  SIMPLE_NAME,  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
589	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SIMPLE_NAME,  datePattern)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SIMPLE_NAME,  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  SIMPLE_NAME,  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
590	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  this.datePattern,  String  SIMPLE_NAME)  {  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  this.datePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  this.datePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
591	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
592	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat.class)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
593	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unclosed  string  literal	88	None	replace
594	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unclosed  string  literal	88	None	replace
595	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
596	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
597	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Validate.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Validate.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Validate.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Serializable)    {    	non-compiled	[CE]  <identifier>  expected	107	None	replace
598	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  String  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  String  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateType,  String  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	33	None	replace
599	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	37	None	replace
600	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.US)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.US)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.US)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
601	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  LocalFormat  localFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    datePattern,    DateFormat    localFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	31	None	replace
602	[BUG]  [BUGGY]  super(dateType,  DateFormat.class,  enUsFormat);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat.class,  enUsFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat.class,  enUsFormat);	  super(dateType,    DateFormat.class,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
603	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Serializable)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Serializable)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Serializable)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
604	[BUG]  [BUGGY]  Class  <?>  localFormat  =  this.dateType.getLocalFile();  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  this.dateType.getLocalFile();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  this.dateType.getLocalFile();	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
605	[BUG]  [BUGGY]  Class  <?>  localFormat  =  dateType.getLocalFile();  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  dateType.getLocalFile();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  dateType.getLocalFile();	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
606	[BUG]  [BUGGY]  Class  <?>  localFormat  =  this.dateType.getLeastSuperclass();  [CE]  illegal  start  of  type  [FE]                                      JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  this.dateType.getLeastSuperclass();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  this.dateType.getLeastSuperclass();	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
607	[BUG]  [BUGGY]  Class  <?>  localFormat  =  dateType.getLeastSuperclass();  [CE]  illegal  start  of  type  [FE]                                        JsonParseException      [CONTEXT]        [BUGGY]  Class  <?>  localFormat  =  dateType.getLeastSuperclass();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	Class  <?>  localFormat  =  dateType.getLeastSuperclass();	  Class    <?>    localFormat    =    DateType.class;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
608	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.getDateTypePattern(this);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.getDateTypePattern(this);	  DateFormat    datePattern    =    DateFormat.getDateTypePattern();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
609	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  Validate.class,  localeFormat,  DateFormat)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  Validate.class,  localeFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  Validate.class,  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
610	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType,    LocalFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
611	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  but  was   "  +  dateType);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
612	[BUG]  [BUGGY]  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
613	[BUG]  [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType  ==  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
614	[BUG]  [BUGGY]  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  or   "  +  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of "  +  Date.class  + ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
615	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
616	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.datePattern(this);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.datePattern(this);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.datePattern(this);	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
617	[BUG]  [BUGGY]  DateFormat  datePattern  =  DateFormat.dateParser();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DateFormat  datePattern  =  DateFormat.dateParser();  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DateFormat  datePattern  =  DateFormat.dateParser();	  DateFormat    datePattern    =    DateFormat.getInstance();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
618	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Calendar  calendar,  String  name)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Calendar  calendar,  String  name)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  Calendar  calendar,  String  name)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
619	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name,  int  datePattern)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name,  int  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  String  name,  int  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    name)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	77	None	replace
620	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFile,  DateFormat  localeFile)  {  [CE]  variable  localeFile  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFile,  DateFormat  localeFile)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localeFile,  DateFormat  localeFile)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat    localeFile)    {    	non-compiled	[CE]  variable  localeFile  is  already  defined  in  constructor  DefaultDateTypeAdapter	93	None	replace
621	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  timeZone)  {  [CE]  variable  enUsFormat  might  not  have  been  initialized  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  enUsFormat  might  not  have  been  initialized	43	None	replace
622	[BUG]  [BUGGY]  super(dateType,  this.localFormat,  localFormat);  [CE]  illegal  start  of  type  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  this.localFormat,  localFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  this.localFormat,  localFormat);	  super(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
623	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  LocalFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
624	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Calendar.class)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Calendar.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  Calendar.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
625	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timeType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	84	None	replace
626	[BUG]  [BUGGY]  this(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  this(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	this(final  Class  <?  extends  Date>  dateType,  DateFormat  dateType)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    dateType)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
627	[BUG]  [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [CE]  class,  interface,  or  enum  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	}  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
628	[BUG]  [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	}  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
629	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.timeZone)  {  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.timeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.timeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
630	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  this.localFormat)  {  [CE]  illegal  start  of  type  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  this.localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  this.localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    this.localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
631	[BUG]  [BUGGY]  super(dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  super(dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	super(dateType,  DateFormat  <?>  localeFormat,  DateFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    <?>    localeFormat,    DateFormat)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
632	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class),  this)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class),  this)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class),  this)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
633	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class),  this);  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class),  this);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SerialUtilities.class),  this);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    SerialUtilities.class)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
634	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
635	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Time.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
636	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
637	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  [CE]  ')'  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  ')'  expected	50	None	replace
638	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  Timestamp.class  &&	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
639	[BUG]  [BUGGY]  parent  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  <identifier>  expected  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  parent  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	parent  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
640	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  String  localFormat)  {  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  String  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  String  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    String    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
641	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
642	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  IllegalArgumentException	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
643	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
644	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
645	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.class)  {  throw  new	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
646	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType!=  LocalFormat.	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
647	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  }  LocalFormat.class)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  }  LocalFormat.class)  {  throw  new  Il  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(localFormat  ==  null)  {  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  enUsFormat,  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Timestamp.class  &&  dateType  }  LocalFormat.class)  {  throw  new  Il	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType    ==    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    &&    dateType!=    LocalFormat.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
648	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  LocalFormat  localFormat)  {  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
649	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat  localFormat)  {  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  LocalFormat  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localFormat)    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
650	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  Locale.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  Locale.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  Locale.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    Locale.class)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
651	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  DateFormat  localeFormat)  {  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  this.dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
652	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Calendar  dateType,  DateFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Calendar  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Calendar  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
653	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	102	None	replace
654	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  dateType,  DateFormat  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  dateType,  DateFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  LocalFormat  dateType,  DateFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    DateFormat    dateType,    DateFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
655	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  [CE]  illegal  start  of  type  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
656	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  illegal  start  of  type  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
657	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  localFormat)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  localFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  int  localFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	76	None	replace
658	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SIMPLE_NAME,  datePattern)  {  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SIMPLE_NAME,  datePattern)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  SIMPLE_NAME,  datePattern)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    int    datePattern)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
659	[BUG]  [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(  dateType!=  Date.class  &&  dateType!=  java.sql.Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if(    dateType!=    Date.class    &&    dateType!=    Time.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   "    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
660	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  LocalFormat.class);  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  LocalFormat.class);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  LocalFormat.class);	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
661	[BUG]  [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat.SHORT)  {	  DefaultDateTypeAdapter(Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
662	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or "  +  dateType);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or "  +  dateType);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or "  +  dateType);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
663	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.enUsFormat);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.enUsFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.enUsFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
664	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlFormat);  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlFormat);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sqlFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
665	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sql);  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]        [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sql);  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType,  this.sql);	  DatePattern    datePattern    =    DatePattern.getInstance(this.dateType);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
666	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  LocalFormat)  {  [CE]  <identifier>  expected  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  LocalFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  dateUsFormat,  LocalFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    dateUsFormat,    DateFormat    localFormat)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
667	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.LONG)  {  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.LONG)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.LONG)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
668	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.US)  {  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.US)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  DateFormat.US)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    DateFormat.SHORT)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
669	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  LocalFormat  localeFormat)  {  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  final  DateFormat  datePattern,  DateFormat  dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    datePattern,    DateFormat    localeFormat)    {    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter	1	None	replace
670	[BUG]  [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  type  [FE]          JsonParseException      [CONTEXT]        [BUGGY]  if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	if(dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    final    DateFormat    enUsFormat,    DateFormat    localFormat)    {    if    (    dateType!=    Date.class    &&    dateType!=    java.sql.Date.class    &&    dateType!=    Timestamp.class    )    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
671	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Calendar.class)  {  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Calendar.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  datePattern,  Calendar.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    datePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
672	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Serializable.class)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Serializable.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Serializable.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
673	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormatTimeZone)  {  [CE]  <identifier>  expected  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormatTimeZone)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  DateFormatTimeZone)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    DateFormat)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
674	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                JsonParseException      [CONTEXT]        [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  +   "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
675	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  JsonParseException      [CONTEXT]        [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
676	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  SerializableString)  {  [CE]  <identifier>  expected  [FE]                JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  SerializableString)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  SerializableString)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
677	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  long  serialId)  {  [CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)  [FE]                  JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  long  serialId)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat,  DateFormat  timePattern,  long  serialId)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localFormat,    DateFormat    timePattern)    {    	non-compiled	[CE]  no  suitable  constructor  found  for  DefaultDateTypeAdapter(Class<CAP#1>,DateFormat,DateFormat)	112	None	replace
678	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Calendar.class)  {  [CE]  <identifier>  expected  [FE]                    JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Calendar.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  Calendar.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
679	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  SerialFormat.class)  {  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  SerialFormat.class)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  SerialFormat.class)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat.class)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
680	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone  localeFormat)  {  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  TimeZone  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
681	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  LocalFormat  localeFormat)  {  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  LocalFormat  localeFormat)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  timePattern,  this.dateType,  LocalFormat  localeFormat)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    timePattern,    LocalFormat    localeFormat)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
682	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  this.datePattern,  String  SIMPLE_NAME)  {  [CE]  illegal  start  of  type  [FE]            JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  this.datePattern,  String  SIMPLE_NAME)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat  localeFormat,  this.datePattern,  String  SIMPLE_NAME)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat    localeFormat,    String    SIMPLE_NAME)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
683	[BUG]  [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateTypeParser)  {  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]        [BUGGY]  DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateTypeParser)  {  [BUGGY]      if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	74	74	2	replace	DefaultDateTypeAdapter(final  Class  <?  extends  Date>  dateType,  DateFormat.class,  this.dateTypeParser)  {	  DefaultDateTypeAdapter(final    Class    <?    extends    Date>    dateType,    DateFormat.class,    timeParser)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
