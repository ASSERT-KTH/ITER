bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  	160	None	replace
2	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
3	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
4	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.. ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.. ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	48	None	replace
5	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	48	None	replace
6	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	48	None	replace
7	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    Il    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
8	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getInstance();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  localFormat.getInstance();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  localFormat.getInstance();	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  ';'  expected	40	None	replace
9	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.newInstance();  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.newInstance();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.newInstance();	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  ';'  expected	40	None	replace
10	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocalFormat();  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocalFormat();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  localFormat.getLocalFormat();	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  ';'  expected	40	None	replace
11	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFile();  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFile();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFile();	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  ';'  expected	40	None	replace
12	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
13	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
14	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
15	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	68	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	68	None	replace
17	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	68	None	replace
18	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
19	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
20	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
21	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
22	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	164	None	replace
23	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	164	None	replace
24	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	164	None	replace
25	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat();  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getDefaultLocalFormat();	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	144	None	replace
26	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(null);  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(null);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(null);	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	144	None	replace
27	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.dateType);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this.dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(this.dateType);	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	144	None	replace
28	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
29	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
30	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
31	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
32	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	23	None	replace
33	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getChronology())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getChronology())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getChronology())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
34	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
35	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
36	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
37	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.keySet())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.keySet())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.keySet())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
38	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	156	None	replace
42	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	156	None	replace
43	[BUG]  [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	&&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
44	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
45	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
46	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
47	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
48	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ".getMessage());  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ".getMessage());  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
49	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ".getMessage());  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ".getMessage());  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
50	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	59	None	replace
51	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	59	None	replace
52	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	59	None	replace
53	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	59	None	replace
54	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	52	None	replace
55	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	98	None	replace
56	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
57	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	53	None	replace
58	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
59	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
60	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(enUsFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(enUsFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  '('  or  '['  expected	96	None	replace
61	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	146	None	replace
62	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
63	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	146	None	replace
64	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
65	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	146	None	replace
66	[BUG]  [BUGGY]  if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
67	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
68	[BUG]  [BUGGY]  if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
69	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
70	[BUG]  [BUGGY]  if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
71	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClasses();  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClasses();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClasses();	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	118	None	replace
72	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	118	None	replace
73	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	118	None	replace
74	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(localFormat);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(localFormat);	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
75	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(this.dateType);  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(this.dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(this.dateType);	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
76	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(Locale.getDefault());  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(Locale.getDefault());  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(Locale.getDefault());	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
77	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(localFormat,  dateType);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(localFormat,  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(localFormat,  dateType);	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
78	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType.getName());  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType.getName());  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType.getName());	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
79	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
80	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
81	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
82	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  }  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
83	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
84	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
85	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  locale.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  locale.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  locale.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
86	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
87	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	139	None	replace
88	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
89	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	139	None	replace
90	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	139	None	replace
91	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
92	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	132	None	replace
93	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
94	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
95	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
96	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class);  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
97	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType,  localFormat);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType,  localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType,  localFormat);	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
98	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
99	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
100	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
101	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
102	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  dateType.getClass();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  dateType.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  dateType.getClass();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
103	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
104	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getChronology();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getChronology();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getChronology();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
105	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  locale.getClass();  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  locale.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  locale.getClass();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
106	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  this.localFormat.getClass();  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  this.localFormat.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  this.localFormat.getClass();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
107	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getParent();  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getParent();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getParent();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
108	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
109	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
110	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
111	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
112	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
113	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getSimpleName();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
114	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  illegal  start  of  expression  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
115	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
116	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getRawClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
117	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
118	[BUG]  [BUGGY]  if(localFormat.isPrimitive())  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isPrimitive())  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isPrimitive())  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
119	[BUG]  [BUGGY]  if(dateType.isPrimitive())  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.isPrimitive())  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.isPrimitive())  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
120	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localFormat.getClass();	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
121	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
122	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	79	None	replace
123	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	79	None	replace
124	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	79	None	replace
125	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getChronology())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getChronology())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getChronology())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	50	None	replace
126	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	50	None	replace
127	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	50	None	replace
128	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	50	None	replace
129	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
130	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	62	None	replace
131	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
132	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
133	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClasses())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
134	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getRawClass())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
135	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getSimpleName())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ".class);  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
138	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  	18	None	replace
139	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
140	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
141	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	133	None	replace
142	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	67	None	replace
143	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	67	None	replace
144	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	67	None	replace
145	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  <identifier>  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".class);  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
146	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	67	None	replace
147	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	67	None	replace
148	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
149	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
150	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	119	None	replace
151	[BUG]  [BUGGY]  For(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  For(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	For(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
152	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	119	None	replace
153	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	119	None	replace
154	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class  + ",  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class  + ",  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class  + ",  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	131	None	replace
155	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	131	None	replace
156	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class  + ",  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class  + ",  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class  + ",  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	131	None	replace
157	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
158	[BUG]  [BUGGY]  if(dateType.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
159	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
160	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
161	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	71	None	replace
162	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	115	None	replace
163	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
164	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
165	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
166	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	65	None	replace
167	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(!dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(!dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(!dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	73	None	replace
168	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
169	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
170	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
171	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
172	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
173	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
174	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	82	None	replace
175	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	82	None	replace
176	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	82	None	replace
177	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	82	None	replace
178	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
179	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
180	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
181	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
182	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	117	None	replace
183	[BUG]  [BUGGY]  if(dateType!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
184	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat,  enUsFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat,  enUsFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  localFormat,  enUsFormat);	  this.localFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  ';'  expected	39	None	replace
185	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat,  SIMPLE_NAME);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat,  SIMPLE_NAME);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  localFormat,  SIMPLE_NAME);	  this.localFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  ';'  expected	39	None	replace
186	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  enUsFormat);	  this.localFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  ';'  expected	39	None	replace
187	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  enUsFormat,  localFormat);	  this.localFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  ';'  expected	39	None	replace
188	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
189	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
190	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	151	None	replace
191	[BUG]  [BUGGY]  if(dateType.getName().endsWith( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date  [CE]  unclosed  string  literal  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getName().endsWith( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getName().endsWith( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	151	None	replace
192	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
193	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    	non-compiled	[CE]  unclosed  string  literal	63	None	replace
194	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getDefault();  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  localFormat.getDefault();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  localFormat.getDefault();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  ';'  expected	37	None	replace
195	[BUG]  [BUGGY]  this.localFormat  =  localFormat.getLocal();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  localFormat.getLocal();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  localFormat.getLocal();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  ';'  expected	37	None	replace
196	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	124	None	replace
197	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	124	None	replace
198	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
199	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
200	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
201	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
202	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
203	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
204	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
205	[BUG]  [BUGGY]  if(localFormat.isAssignableFrom(dateType))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isAssignableFrom(dateType))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isAssignableFrom(dateType))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
206	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
207	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(!dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(!dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(!dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
208	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  localFormat);  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  localFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  localFormat);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	111	None	replace
209	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  localFormat);  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  localFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  localFormat);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	111	None	replace
210	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	111	None	replace
211	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  Date.class);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  Date.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  Date.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    	non-compiled	[CE]  ';'  expected	69	None	replace
212	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    	non-compiled	[CE]  ';'  expected	69	None	replace
213	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    	non-compiled	[CE]  ';'  expected	69	None	replace
214	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class,  or   "  +  java.sql.Date.class);  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class,  or   "  +  java.sql.Date.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class,  or   "  +  java.sql.Date.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    	non-compiled	[CE]  unclosed  string  literal	69	None	replace
215	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localeFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
216	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  new  DateFormat();  }	  if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
217	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.newInstance();  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.newInstance();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.newInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
218	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  	157	None	replace
219	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  	157	None	replace
220	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
221	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
222	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
223	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
224	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType,  DateFormat  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
225	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
226	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    Date.class)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
227	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    Date.class)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
228	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(dateType    ==    Date.class)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
229	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    	non-compiled	[CE]  unclosed  string  literal	128	None	replace
230	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(enUsFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  '('  or  '['  expected	12	None	replace
231	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
232	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	86	None	replace
233	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
234	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
235	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
236	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
237	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
238	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  	100	None	replace
239	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  	100	None	replace
240	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateFormat.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class);    	non-compiled	[CE]  ';'  expected	130	None	replace
241	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class);    	non-compiled	[CE]  ';'  expected	130	None	replace
242	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  DateFormat.class);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  DateFormat.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  but  was   "  +  DateFormat.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class);    	non-compiled	[CE]  ';'  expected	130	None	replace
243	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
244	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
245	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
246	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	145	None	replace
247	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
248	[BUG]  [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	&&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
249	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
250	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  	56	None	replace
251	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
252	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
253	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
254	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
255	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
256	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
257	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  enUsFormat);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  enUsFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
258	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
259	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  locale);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  locale);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  locale);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
260	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  dateType);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
261	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  localFormat);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
262	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  true);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  true);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  true);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
263	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
264	[BUG]  [BUGGY]  if(localFormat.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
265	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
266	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(localFormat))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
267	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	46	None	replace
268	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	46	None	replace
269	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	46	None	replace
270	[BUG]  [BUGGY]  if(localFormat!=  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  Il	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	46	None	replace
271	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
272	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
273	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	165	None	replace
274	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	165	None	replace
275	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	94	None	replace
276	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	94	None	replace
277	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  ';'  expected	94	None	replace
278	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
279	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
280	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	90	None	replace
281	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	90	None	replace
282	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  	55	None	replace
283	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
284	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
285	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
286	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage();  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
287	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage());  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage());  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage());  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  	28	None	replace
288	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ").getMessage();  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ".getMessage());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
289	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	72	None	replace
290	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	72	None	replace
291	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	72	None	replace
292	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	91	None	replace
293	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
294	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
295	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Throwables.throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	109	None	replace
296	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateType.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	110	None	replace
297	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + ",  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + ",  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + ",  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateType.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	110	None	replace
298	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateType.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	110	None	replace
299	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateType.class  + ",  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateType.class  + ",  but  was   "  +  dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  DateType.class  + ",  or   "  +  DateType.class  + ",  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateType.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	110	None	replace
300	[BUG]  [BUGGY]  if(localFormat  ==  null  ||  dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null  ||  dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null  ||  dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(dateType    ==    null    ||    localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	129	None	replace
301	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	112	None	replace
302	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
303	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
304	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	112	None	replace
305	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
306	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
307	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
308	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	140	None	replace
309	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
310	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
311	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
312	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
313	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
314	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	87	None	replace
315	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
316	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
317	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
318	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
319	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
320	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
321	[BUG]  [BUGGY]  if(dateType.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
322	[BUG]  [BUGGY]  if(localFormat.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
323	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
324	[BUG]  [BUGGY]  if(localFormat.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.getName().endsWith( ".class "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( "	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	153	None	replace
325	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  final  String  SIMPLE_NAME)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  final  String  SIMPLE_NAME)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat,  final  String  SIMPLE_NAME)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	153	None	replace
326	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	70	None	replace
327	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  enUsFormat);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  enUsFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  enUsFormat);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	70	None	replace
328	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  	17	None	replace
329	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
330	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
331	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
332	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
333	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
334	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  enUsFormat,  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
335	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	54	None	replace
336	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  enUsFormat)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	54	None	replace
337	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	54	None	replace
338	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	103	None	replace
339	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isLocal())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isLocal())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isLocal())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
340	[BUG]  [BUGGY]  if(localFormat.isPrimitive())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isPrimitive())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isPrimitive())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
341	[BUG]  [BUGGY]  if(dateType.isPrimitive())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.isPrimitive())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.isPrimitive())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
342	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
343	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  &&  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  &&  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  &&  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
344	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
345	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "D    	non-compiled	[CE]  unclosed  string  literal	143	None	replace
346	[BUG]  [BUGGY]  This.localFormat  =  LocalFormat.getDefault();  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  This.localFormat  =  LocalFormat.getDefault();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	This.localFormat  =  LocalFormat.getDefault();	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  ';'  expected	114	None	replace
347	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getLocalFormat();  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getLocalFormat();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getLocalFormat();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  ';'  expected	114	None	replace
348	[BUG]  [BUGGY]  if(localFormat.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	152	None	replace
349	[BUG]  [BUGGY]  if(dateType.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	152	None	replace
350	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	152	None	replace
351	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
352	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
353	[BUG]  [BUGGY]  if(dateType.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  Il  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getName().equals( "java.sql.Date "))  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  Il	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	152	None	replace
354	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
355	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
356	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
357	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(localFormat.isPrimitive()  ||  localFormat.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	121	None	replace
358	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	159	None	replace
359	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
360	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getInstance();  }	  if(localFormat    ==    null)    {    this.localFormat    =    LocalFormat.getDefault();    }    	non-compiled	[CE]  ';'  expected	114	None	replace
361	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	118	None	replace
362	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  '('  or  '['  expected	133	None	replace
363	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAsArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAsArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAsArray())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
364	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
365	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isObject())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isObject())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isObject())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
366	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
367	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
368	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isUsFormat()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isUsFormat()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isUsFormat()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
369	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
370	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isUsFormat())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isUsFormat())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isUsFormat())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
371	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isSupported())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
372	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
373	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	86	None	replace
374	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	79	None	replace
375	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	79	None	replace
376	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
377	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	154	None	replace
378	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	154	None	replace
379	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
380	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
381	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
382	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	138	None	replace
383	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
384	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
385	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
386	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
387	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
388	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	31	None	replace
389	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
390	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(localFormat);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getDefaultLocalFormat(localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getDefaultLocalFormat(localFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
391	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  false);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  false);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  false);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
392	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	137	None	replace
393	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
394	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
395	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getDateType();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getDateType();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getDateType();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
396	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.dateType();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.dateType();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.dateType();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
397	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getTime();  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getTime();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getTime();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
398	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class ")||  dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class ")||  dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class ")||  dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
399	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
400	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().startsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().startsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().startsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
401	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	153	None	replace
402	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
403	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
404	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
405	[BUG]  [BUGGY]  if(dateType!=  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(dateType    ==    null    ||    localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	129	None	replace
406	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(dateType    ==    null    ||    localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	129	None	replace
407	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ")  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ")	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  	27	None	replace
408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  DateFormat.class);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  DateFormat.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  DateFormat.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	131	None	replace
409	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
410	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
411	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class,  localFormat);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class,  localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class,  localFormat);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    	non-compiled	[CE]  ';'  expected	69	None	replace
412	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localeFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
413	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  less  than  one  of   "  +  Date.class);  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  less  than  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  less  than  one  of   "  +  Date.class);  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
414	[BUG]  [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	&&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
415	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.keySet())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.keySet())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.keySet())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	50	None	replace
416	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(0);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(0);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(0);	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	144	None	replace
417	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.UTF8;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.UTF8;  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.UTF8;	  this.localFormat    =    localeFormat;    	non-compiled	[CE]  ';'  expected	36	None	replace
418	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getInstance(localFormat);	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  ';'  expected	40	None	replace
419	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	52	None	replace
420	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
421	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	75	None	replace
422	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	108	None	replace
423	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	108	None	replace
424	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	119	None	replace
425	[BUG]  [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	&&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
426	[BUG]  [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  &&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	&&  localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
427	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
428	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	62	None	replace
429	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
430	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  ';'  expected	113	None	replace
431	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " "));  }  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
432	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localeFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localeFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  localeFormat);	  this.localFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  ';'  expected	39	None	replace
433	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  LocalFormat.class);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  LocalFormat.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  LocalFormat.class);	  this.localFormat    =    new    DateFormat(dateType,    localFormat);    	non-compiled	[CE]  ';'  expected	39	None	replace
434	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  java.sql.Date.class);  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  java.sql.Date.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  java.sql.Date.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	70	None	replace
435	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  java.sql.Date.class);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  java.sql.Date.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  java.sql.Date.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	70	None	replace
436	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
437	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
438	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.equals(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.equals(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.equals(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
439	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	90	None	replace
440	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  null;  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  null;  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  null;	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	115	None	replace
441	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	139	None	replace
442	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	59	None	replace
443	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
444	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	94	None	replace
445	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
446	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
447	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	120	None	replace
448	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	74	None	replace
449	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    Date.class)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
450	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	112	None	replace
451	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	112	None	replace
452	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
453	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
454	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException    	non-compiled	[CE]  '('  or  '['  expected	116	None	replace
455	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  <identifier>  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ".class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
456	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	82	None	replace
457	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	82	None	replace
458	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	82	None	replace
459	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
460	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
461	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
462	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	117	None	replace
463	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql. "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
464	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
465	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
466	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocal(localFormat);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocal(localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocal(localFormat);	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  ';'  expected	37	None	replace
467	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
468	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
469	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
470	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	54	None	replace
471	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	54	None	replace
472	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
473	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	14	None	replace
474	[BUG]  [BUGGY]  mutableFor(localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
475	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ".class);  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
476	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  LocalFormat.class)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
477	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql. "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
478	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Time "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Time "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Time "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
479	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D	  if(dateType!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	136	None	replace
480	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	160	None	replace
481	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
482	[BUG]  [BUGGY]  mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
483	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
484	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
485	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class,  localFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class,  localFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class,  localFormat);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class);    	non-compiled	[CE]  ';'  expected	130	None	replace
486	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateFormat.class);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateFormat.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateFormat.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateFormat.class);    	non-compiled	[CE]  ';'  expected	130	None	replace
487	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
488	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
489	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	65	None	replace
490	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  this.localFormat  =  localFormat;  }	  if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
491	[BUG]  [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  this.localFormat  =  LocalFormat.getDefault();  }	  if(localFormat    ==    null)    {    this.localFormat    =    localFormat;    }    	non-compiled	[CE]  ';'  expected	89	None	replace
492	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	25	None	replace
493	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localeFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	24	None	replace
494	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
495	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType  +  SIMPLE_NAME);	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
496	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
497	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localeFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localeFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	48	None	replace
498	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  unclosed  string  literal	164	None	replace
499	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	164	None	replace
500	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	164	None	replace
501	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    Il    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
502	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "D    	non-compiled	[CE]  unclosed  string  literal	143	None	replace
503	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "D  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "D  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "D	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "D    	non-compiled	[CE]  unclosed  string  literal	143	None	replace
504	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
505	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
506	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localeFormat  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	150	None	replace
507	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.get();  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.get();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.get();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  ';'  expected	37	None	replace
508	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDate();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getDate();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getDate();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  ';'  expected	37	None	replace
509	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFileName();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFileName();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFileName();	  this.localFormat    =    LocalFormat.getDefault();    	non-compiled	[CE]  ';'  expected	37	None	replace
510	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
511	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
512	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat,  String  SIMPLE_NAME)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	152	None	replace
513	[BUG]  [BUGGY]  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
514	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().equals(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	152	None	replace
515	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
516	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
517	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
518	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  	162	None	replace
519	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(enUsFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
520	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
521	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(localFormat.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	121	None	replace
522	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
523	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
524	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(enUsFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(enUsFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
525	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getInstance(dateType);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getInstance(dateType);	  this.localFormat    =    LocalFormat.getInstance();    	non-compiled	[CE]  ';'  expected	40	None	replace
526	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	79	None	replace
527	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
528	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " "));  }  [CE]  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    JsonParseException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
529	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
530	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   "java.sql.Date   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	151	None	replace
531	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ", "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ", "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ", "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
532	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  or   "  +  Timestamp.class);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  or   "  +  Timestamp.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + "  or   "  +  Timestamp.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
533	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  this.dateType.getClass();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  =  this.dateType.getClass();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  this.dateType.getClass();	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    	non-compiled	[CE]  ';'  expected	64	None	replace
534	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	122	None	replace
535	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
536	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localeFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
537	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    	non-compiled	[CE]  unclosed  string  literal	63	None	replace
538	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    	non-compiled	[CE]  unclosed  string  literal	63	None	replace
539	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    	non-compiled	[CE]  unclosed  string  literal	63	None	replace
540	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
541	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
542	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
543	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	135	None	replace
544	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.  [CE]  <identifier>  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  <identifier>  expected	156	None	replace
545	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat,  DateFormat.class);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
546	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(enUsFormat);	  this.localFormat    =    LocalFormat.getLocalFormat(localFormat);    	non-compiled	[CE]  ';'  expected	38	None	replace
547	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	52	None	replace
548	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
549	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
550	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
551	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
552	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
553	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType    ==    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
554	[BUG]  [BUGGY]  if(localFormat!=  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    Date.class)    {    if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
555	[BUG]  [BUGGY]  if(dateType.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.isPrimitive())  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
556	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")	  if(localFormat!=    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  	100	None	replace
557	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    	non-compiled	[CE]  unclosed  string  literal	83	None	replace
558	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
559	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    	non-compiled	[CE]  unclosed  string  literal	10	None	replace
560	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
561	[BUG]  [BUGGY]  if(localFormat.isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat.isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat.isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
562	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	154	None	replace
563	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getClass())  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getClass())  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType.getClass())  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  ';'  expected	154	None	replace
564	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType);  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
565	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
566	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
567	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
568	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this);  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(this);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(this);	  this.localFormat    =    LocalFormat.getLocalFormat();    	non-compiled	[CE]  ';'  expected	144	None	replace
569	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
570	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
571	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
572	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
573	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	54	None	replace
574	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
575	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
576	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClassLoader())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	86	None	replace
577	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
578	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getClass())  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getClass())  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType.getClass())  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
579	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	32	None	replace
580	[BUG]  [BUGGY]  if(dateType.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType.getClass().isArray())  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
581	[BUG]  [BUGGY]  if(enUsFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(enUsFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(enUsFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    	non-compiled	[CE]  unclosed  string  literal	128	None	replace
582	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
583	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType.getName())  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	153	None	replace
584	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getName().endsWith(   ".class   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
585	[BUG]  [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  static  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	static  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
586	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
587	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	87	None	replace
588	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
589	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
590	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  object  of   "  +  Date.class);  }  [CE]  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  object  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  object  of   "  +  Date.class);  }	  final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
591	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
592	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
593	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
594	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
595	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	118	None	replace
596	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  	134	None	replace
597	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    	non-compiled	[CE]  	134	None	replace
598	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getLeastSuperclasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getLeastSuperclasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getLeastSuperclasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  ';'  expected	50	None	replace
599	[BUG]  [BUGGY]  mutableFor(localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [CE]  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
600	[BUG]  [BUGGY]  mutableFor(localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [CE]  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
601	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  localFormat);  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  localFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  localFormat);  }	  if(localFormat    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	67	None	replace
602	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
603	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
604	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  dateType.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(dateType    ==    null)    {    final    Class    <?    extends    Date>    localFormat    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
605	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  unclosed  string  literal	125	None	replace
606	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
607	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }	  final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.       ");    }    	non-compiled	[CE]  	48	None	replace
608	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
609	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
610	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
611	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.enUsFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType.enUsFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType.enUsFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	76	None	replace
612	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  dateType,  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
613	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    null)    {    for(final    Class    <?    extends    Date>    localFormat    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	104	None	replace
614	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  this.localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  this.localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  this.localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
615	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isInstance())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isInstance())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isInstance())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
616	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
617	[BUG]  [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
618	[BUG]  [BUGGY]  if(dateType!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
619	[BUG]  [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(enUsFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(enUsFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
620	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	117	None	replace
621	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
622	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	98	None	replace
623	[BUG]  [BUGGY]  mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [CE]  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  }	  if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
624	[BUG]  [BUGGY]  mutableFor(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
625	[BUG]  [BUGGY]  mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [CE]  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	mutableFor(localFormat!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  enUsFormat);  }	  if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
626	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  LocalFormat.class);  }  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  LocalFormat.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  LocalFormat.class);  }	  if(localFormat!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	71	None	replace
627	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
628	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-empty   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
629	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
630	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  enUsFormat);  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  enUsFormat);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  enUsFormat);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    localFormat);    	non-compiled	[CE]  ';'  expected	72	None	replace
631	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
632	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
633	[BUG]  [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	106	None	replace
634	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(dateType!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	25	None	replace
635	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  dateType)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
636	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  null. ");	  throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
637	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  non-null. ");  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  non-null. ");  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  not  be  non-null. ");	  throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    	non-compiled	[CE]  ';'  expected	109	None	replace
638	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
639	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
640	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
641	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
642	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  ||  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
643	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Time.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat!=    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
644	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	  if(dateType    ==    null)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-null.   ");    }    	non-compiled	[CE]  ';'  expected	115	None	replace
645	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType).withUTC();  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  this.localFormat  =  new  DateFormat(dateType).withUTC();  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType).withUTC();	  this.localFormat    =    new    DateFormat(dateType);    	non-compiled	[CE]  ';'  expected	95	None	replace
646	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateType.class  + "  but  was   "  +  DateType.class);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateType.class  + "  but  was   "  +  DateType.class);  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  dateType  + ",  or   "  +  DateType.class  + "  but  was   "  +  DateType.class);	  throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    DateType.class    +   "    but    was       "    +    dateType);    	non-compiled	[CE]  ';'  expected	110	None	replace
647	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;      [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]        [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
