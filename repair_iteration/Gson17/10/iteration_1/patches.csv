bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
2	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
3	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
5	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
7	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
8	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
9	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
10	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
11	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  Il	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
12	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	15	None	replace
14	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
15	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
16	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
17	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
18	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
19	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
20	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
21	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
22	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [CE]  unclosed  string  literal  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
23	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	9	None	replace
24	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	9	None	replace
25	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	9	None	replace
26	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
30	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
31	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
32	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
33	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  this.localFormat  =  enUsFormat;  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  enUsFormat;  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  enUsFormat;	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  this.localFormat  =  localeFormat;  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  localeFormat;  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  localeFormat;	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
37	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getDefault();  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getDefault();	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
38	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat);  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat(localFormat);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat(localFormat);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
39	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat);  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  new  DateFormat(dateType,  localFormat);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType,  localFormat);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
40	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getInstance();  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getInstance();  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getInstance();	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
41	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
42	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
43	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
44	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
45	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
46	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  Date.class)  {  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
47	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	20	None	replace
48	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  	20	None	replace
49	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	20	None	replace
50	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	20	None	replace
51	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	16	None	replace
52	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
54	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
55	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-empty ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
56	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
57	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
58	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
59	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  	18	None	replace
60	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
61	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
62	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
63	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
64	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
65	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType  ==  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
66	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
67	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
70	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  [CE]  ';'  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  localFormat);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
73	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	10	None	replace
77	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
78	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
79	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  	17	None	replace
80	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
81	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
82	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
83	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [CE]  unclosed  string  literal  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
84	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
85	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  	12	None	replace
86	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClassLoader())  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
87	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.class)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
88	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
89	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [CE]  ';'  expected  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  localFormat;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
90	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
91	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
92	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	18	None	replace
94	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
95	[BUG]  [BUGGY]  this.localFormat  =  new  DateFormat(dateType);  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  new  DateFormat(dateType);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  new  DateFormat(dateType);	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
96	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException(	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  '('  or  '['  expected	12	None	replace
98	[BUG]  [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
99	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
100	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
101	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    an    	non-compiled	[CE]  unclosed  string  literal	7	None	replace
102	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
103	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
104	[BUG]  [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  for(final  Class  <?  extends  Date>  localFormat  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
105	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	20	None	replace
106	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  dateType);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
110	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateType.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
111	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  localFormat);  [CE]  ';'  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  localFormat);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  localFormat);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
112	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
113	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  JsonParseException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
114	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  this.localFormat  =  LocalFormat.getDefault();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
115	[BUG]  [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [CE]  ';'  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-null. ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
116	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [CE]  '('  or  '['  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
117	[BUG]  [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
118	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
119	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	15	None	replace
120	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
121	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(localFormat.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
122	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	4	None	replace
123	[BUG]  [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format   ");    }    	non-compiled	[CE]  ';'  expected	17	None	replace
124	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " "));  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
125	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ".);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
126	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ")    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
127	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
128	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [CE]  unclosed  string  literal  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of    	non-compiled	[CE]  unclosed  string  literal	5	None	replace
129	[BUG]  [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null  ||  localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format.   ");  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "Date    type    must    be    non-standard    format.   ");    }    	non-compiled	[CE]  ';'  expected	20	None	replace
130	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  [CE]  ';'  expected  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
131	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  dateType);  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  DateFormat.class  + "  but  was   "  +  dateType);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	19	None	replace
132	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
133	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
134	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
135	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
136	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
137	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
138	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
139	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isAssignableFrom(dateType))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [CE]  unclosed  string  literal  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
142	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
143	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [CE]  unclosed  string  literal  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "D	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
144	[BUG]  [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat();  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  this.localFormat  =  LocalFormat.getLocalFormat();  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  LocalFormat.getLocalFormat();	  this.localFormat    =    localFormat;    	non-compiled	[CE]  ';'  expected	1	None	replace
145	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
146	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.getClass().isArray())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
147	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
148	[BUG]  [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
149	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  localFormat  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
150	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localeFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
151	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
152	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().equals( "java.sql.Date "))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
153	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getName().endsWith( ".class "))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
154	[BUG]  [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  ';'  expected  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
155	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
156	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
157	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [CE]  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
158	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat)    {    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
159	[BUG]  [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
160	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class);  }	  if(localFormat    ==    null)    {    for(final    Class    <?    extends    Date>    dateType    :    localFormat.getClasses())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
161	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
162	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType!=    Date.class    &&    dateType!=    Date.class    &&    dateType!=    Timestamp.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
163	[BUG]  [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat!=  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
164	[BUG]  [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(dateType  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
165	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [CE]  illegal  start  of  expression  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;    [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +  [BUGGY]      [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +	  if(localFormat    ==    null)    {    final    Class    <?    extends    Date>    dateType    =    localFormat.getClass();    if(dateType.isPrimitive()    ||    dateType.isPrimitive())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
