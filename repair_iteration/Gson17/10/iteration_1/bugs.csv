bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.localFormat  =  localFormat;  [CE]  ';'  expected  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  this.localFormat  =  localFormat;  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	this.localFormat  =  localFormat;	}  	non-compiled	[CE]  ';'  expected	19	None	replace
2	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	}  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
3	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
4	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
5	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [CE]  unclosed  string  literal  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of	}  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
6	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "	}  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
7	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [CE]  unclosed  string  literal  [FE]                JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  final  Class  <?  extends  Date>  dateType  =  localFormat.getClass();  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  an	}  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
8	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                  JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]    [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	  	}  	non-compiled	[CE]  ';'  expected	19	None	replace
9	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isPrimitive()  ||  dateType.isPrimitive())  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
10	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.isAssignableFrom(dateType))  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
11	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
12	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( " ")	}  	non-compiled	[CE]  	19	None	replace
13	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType.getClass().isArray())  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
14	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [CE]  unclosed  string  literal  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  if(dateType!=  Date.class  &&  dateType!=  Date.class  &&  dateType!=  Timestamp.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be	}  	non-compiled	[CE]  unclosed  string  literal	19	None	replace
15	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
16	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( " ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
17	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [CE]  ';'  expected  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
18	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }  [CE]  ';'  expected  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat)  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  ';'  expected  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	throw  new  IllegalArgumentException( " ");	}  	non-compiled	[CE]  ';'  expected	19	None	replace
20	[BUG]  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }  [CE]  ';'  expected  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  this.dateType  =  dateType;  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  [BUGGY]  if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }  [BUGGY]    [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	81	81	2	replace	if(localFormat  ==  null)  {  for(final  Class  <?  extends  Date>  dateType  :  localFormat.getClasses())  {  throw  new  IllegalArgumentException( "Date  type  must  be  non-standard  format. ");  }	}  	non-compiled	[CE]  ';'  expected	19	None	replace
