bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	9	None	replace
2	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  LocalFormat.class  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat  ==  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	9	None	replace
3	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	11	None	replace
4	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  localFormat  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	11	None	replace
5	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	11	None	replace
6	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  java.sql.Date.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  java.sql.Date.class;	  this.dateType    =    type;    	compilable	  [FE]  JsonParseException  	2	2	replace
7	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  java.sql.Date.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  java.sql.Date.class;	  this.dateType    =    type;    	compilable	  [FE]  JsonParseException  	2	2	replace
8	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME;  [CE]  cannot  find  symbol  DateType  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.NAME;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol  DateType	2	None	replace
9	[BUG]  [BUGGY]  this.dateType  =  java.sql.DateType.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  java.sql.DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  java.sql.DateType.class;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
10	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
11	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
12	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
13	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
14	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class;  [CE]  incompatible  types  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class;	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  incompatible  types	3	None	replace
15	[BUG]  [BUGGY]  this.dateType  =  dateType.class;  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_DATE  :  DateType.class;  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_DATE  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.SQL_DATE  :  DateType.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
17	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.NAME  :  DateType.class;  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class?  DateType.NAME  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.NAME  :  DateType.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
18	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  java.sql.Date.class;  [CE]  ';'  expected  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class,  java.sql.Date.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  java.sql.Date.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_NAME  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_NAME  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.SQL_NAME  :  DateType.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
20	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class?  DateType.class  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.class  :  DateType.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
21	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat);  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  localFormat);	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
22	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dateType);  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  dateType);	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
23	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule());  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule());	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
24	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  locale);  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  locale);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  locale);	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
25	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dateType.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dateType.getModule());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  dateType.getModule());	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
26	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  Locale.getDefault());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
27	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  localFormat  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat!=  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	10	None	replace
28	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	10	None	replace
29	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType  ==  null?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	12	2	replace
30	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	12	2	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType!=  null?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  AssertionError  	12	6	replace
32	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  [FE]  AssertionError  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  AssertionError  	12	6	replace
33	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	12	2	replace
34	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	12	2	replace
35	[BUG]  [BUGGY]  this.dateType  =  dateType!=?  null  :  dateType;  [CE]  illegal  start  of  expression  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  this.dateType  =  dateType  ==?  null  :  dateType;  [CE]  illegal  start  of  expression  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  null?  null  :  dateType;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  >=  null?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  null?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
38	[BUG]  [BUGGY]  this.dateType  =  type!=  null?  null  :  dateType;  [CE]  cannot  find  symbol  type  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  type!=  null?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type!=  null?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
39	[BUG]  [BUGGY]  DateFormat  localFormat  =  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  DateFormat  localFormat  =  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  Locale.getDefault();	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	7	None	replace
40	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
41	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  Class  <?  extends  Date>  localFormat  =  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  Locale.getDefault();	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	7	None	replace
42	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
43	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getRawClass();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getRawClass();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getRawClass();	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	7	None	replace
44	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
45	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat!=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	8	None	replace
46	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	8	None	replace
47	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat);  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat);	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
48	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  dateType);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  dateType);	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
49	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass());  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass());	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
50	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  locale);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  locale);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  locale);	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
51	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.getDefault());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
52	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(type.getRawClass());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getRawClass());	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
53	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat);	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
54	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName());	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
55	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  dateType);	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
56	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  locale);  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  locale);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  locale);	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
57	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimpleName());	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
58	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern);  [CE]  cannot  find  symbol  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern);	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
59	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	13	None	replace
60	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	13	None	replace
61	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	13	None	replace
62	[BUG]  [BUGGY]  this.dateType  =  dateType!=  java.sql.Date.class?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  java.sql.Date.class?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  java.sql.Date.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	13	None	replace
63	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	13	None	replace
64	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  java.sql.Date.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	13	None	replace
65	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateType.class?  dateType  :  DateFormat.class;  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  DateType.class?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateType.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
66	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
67	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat);	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName());	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
69	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.getName());	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
70	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  locale.getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  locale.getName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  locale.getName());	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
71	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	11	None	replace
72	[BUG]  [BUGGY]  this.dateType  =  dateType  <  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  <  null?  localFormat  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  <  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	11	None	replace
73	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  localFormat  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  null?  localFormat  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	11	None	replace
74	[BUG]  [BUGGY]  this.dateType  =  dateType  {  null?  localFormat  :  Locale.getDefault();  [CE]  ';'  expected  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  {  null?  localFormat  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  {  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  ';'  expected	11	None	replace
75	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern);  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  datePattern);	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
76	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  dateType;  [CE]  incomparable  types:  Class<CAP#1>  and  int  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  0?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  int	12	None	replace
77	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Object.class?  null  :  dateType;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  Object.class?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Object.class?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>	12	None	replace
78	[BUG]  [BUGGY]  this.dateType  =  dateType  <  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  <  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  <  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
79	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.class  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	9	None	replace
80	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
81	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
82	[BUG]  [BUGGY]  this.dateType  =  dateType  {  null?  localFormat  :  DateType.class;  [CE]  ';'  expected  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  {  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  {  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat.getName());  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat.getName());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localeFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
84	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat).getName();  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat).getName();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat).getName();	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
85	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass());  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getClass());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass());	  this.dateType    =    new    DateType(dateType.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
86	[BUG]  [BUGGY]  this.dateType  =  localFormat!=  null?  dateType  :  Locale.getDefault();  [CE]  incompatible  types  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  localFormat!=  null?  dateType  :  Locale.getDefault();  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat!=  null?  dateType  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	10	None	replace
87	[BUG]  [BUGGY]  this.dateType  =  java.sql.DateType;  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  java.sql.DateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  java.sql.DateType;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
88	[BUG]  [BUGGY]  this.dateType  =  DateType.OBJECT;  [CE]  cannot  find  symbol  DateType  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.OBJECT;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.OBJECT;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol  DateType	2	None	replace
89	[BUG]  [BUGGY]  this.dateType  =  DateType.class  &&  dateType!=  Timestamp.class;  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class  &&  dateType!=  Timestamp.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
90	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class);	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
91	[BUG]  [BUGGY]  this.dateType  =  DateType.UNKNOWN;  [CE]  cannot  find  symbol  DateType  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.UNKNOWN;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.UNKNOWN;	  this.dateType    =    enUsFormat;    	non-compiled	[CE]  cannot  find  symbol  DateType	3	None	replace
92	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	8	None	replace
93	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  DateType.class  :  LocalFormat.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  DateType.class  :  LocalFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat!=  null?  DateType.class  :  LocalFormat.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	8	None	replace
94	[BUG]  [BUGGY]  this.dateType  =  dateType!=?  dateType  :  DateFormat.class;  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType!=?  dateType  :  DateFormat.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    }?    dateType    :    DateFormat.class;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern());  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern());	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
96	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
97	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
98	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(dateType);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
99	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
100	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
101	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  java.sql.Timestamp.class;  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class,  java.sql.Timestamp.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  java.sql.Timestamp.class;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  ';'  expected	1	None	replace
102	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  enUsFormat;  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class,  enUsFormat;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  enUsFormat;	  this.dateType    =    DateType.class;    	non-compiled	[CE]  ';'  expected	1	None	replace
103	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  java.sql.Date.class);  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.class,  java.sql.Date.class);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  java.sql.Date.class);	  this.dateType    =    DateType.class;    	non-compiled	[CE]  ';'  expected	1	None	replace
104	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                    JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
105	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                      JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
106	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType);	      	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	7	None	replace
107	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
108	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  }  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  }	      	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
109	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getModule());  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getModule());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getModule());	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
110	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.getModule());  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.getModule());  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  Locale.getModule());	  this.dateType    =    new    DateType(dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
111	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType);  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  timeType);	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
112	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  type);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  type);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  type);	  this.dateType    =    new    DateType(dateType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
113	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME);  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType  ==  Date.class?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  AssertionError  	12	6	replace
115	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [FE]  AssertionError  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	compilable	  [FE]  AssertionError  	12	6	replace
116	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  dateType;  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType):  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
117	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  NULL?  null  :  dateType;  [CE]  cannot  find  symbol  NULL  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  ==  NULL?  null  :  dateType;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  NULL?  null  :  dateType;	  this.dateType    =    dateType    }?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  NULL	12	None	replace
118	[BUG]  [BUGGY]  this.dateType  =  dateType  }  &&  localFormat!=  null?  localFormat  :  DateType.class;  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  dateType  }  &&  localFormat!=  null?  localFormat  :  DateType.class;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  }  &&  localFormat!=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  ';'  expected	8	None	replace
119	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE;  [CE]  cannot  find  symbol  DateType  [FE]          JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.NONE;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol  DateType	2	None	replace
120	[BUG]  [BUGGY]  this.dateType  =  DateType.NULL;  [CE]  cannot  find  symbol  DateType  [FE]            JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.NULL;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NULL;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol  DateType	2	None	replace
121	[BUG]  [BUGGY]  this.dateType  =  DateType.None;  [CE]  cannot  find  symbol  DateType  [FE]              JsonParseException    [CONTEXT]    DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(   "Date  type  must  be  one  of     "  +  Date.class  +     ",     "  +  Timestamp.class  +     ",  or     "  +  java.sql.Date.class  +     "  but  was     "  +  dateType);  }    [BUGGY]  this.dateType  =  DateType.None;  [BUGGY]    this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None;	  this.dateType    =    type;    	non-compiled	[CE]  cannot  find  symbol  DateType	2	None	replace
