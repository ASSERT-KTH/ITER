bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.dateType  =  DateType.class;  [CE]  cannot  find  symbol  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  DateType.class;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class;	this.dateType  =  dateType;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2	[BUG]  [BUGGY]  this.dateType  =  type;  [CE]  cannot  find  symbol  type  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  type;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type;	this.dateType  =  dateType;  	non-compiled	[CE]  cannot  find  symbol  type	13	None	replace
3	[BUG]  [BUGGY]  this.dateType  =  enUsFormat;  [CE]  incompatible  types  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  enUsFormat;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  enUsFormat;	this.dateType  =  dateType;  	non-compiled	[CE]  incompatible  types	13	None	replace
4	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass());  [CE]  cannot  find  symbol  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass());  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass());	this.dateType  =  dateType;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
5	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName());  [CE]  cannot  find  symbol  [FE]            JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName());  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName());	this.dateType  =  dateType;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
6	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName());  [CE]  cannot  find  symbol  [FE]              JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName());  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass().getName());	this.dateType  =  dateType;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
7	[BUG]  [BUGGY]    [CE]  variable  dateType  might  not  have  been  initialized  [FE]                JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]    [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	  	this.dateType  =  dateType;  	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	13	None	replace
8	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  localFormat  :  DateType.class;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat!=  null?  localFormat  :  DateType.class;	this.dateType  =  dateType;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
9	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  localFormat  :  DateType.class;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat  ==  null?  localFormat  :  DateType.class;	this.dateType  =  dateType;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
10	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  localFormat  :  Locale.getDefault();  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat!=  null?  localFormat  :  Locale.getDefault();	this.dateType  =  dateType;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
11	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  dateType  &&  localFormat  ==  null?  localFormat  :  Locale.getDefault();  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat  ==  null?  localFormat  :  Locale.getDefault();	this.dateType  =  dateType;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
12	[BUG]  [BUGGY]  this.dateType  =  dateType  }?  null  :  dateType;  [CE]  ';'  expected  [FE]    JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  dateType  }?  null  :  dateType;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  }?  null  :  dateType;	this.dateType  =  dateType;  	non-compiled	[CE]  ';'  expected	13	None	replace
13	[BUG]  [BUGGY]  this.dateType  =  dateType  }?  dateType  :  DateFormat.class;  [CE]  ';'  expected  [FE]      JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  dateType  }?  dateType  :  DateFormat.class;  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  }?  dateType  :  DateFormat.class;	this.dateType  =  dateType;  	non-compiled	[CE]  ';'  expected	13	None	replace
14	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule());  [CE]  cannot  find  symbol  [FE]        JsonParseException  [CONTEXT]  DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",   "  +  Timestamp.class  +   ",  or   "  +  java.sql.Date.class  +   "  but  was   "  +  dateType);  }  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule());  [BUGGY]  this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule());	this.dateType  =  dateType;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
