bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getRawClass(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getRawClass(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getRawClass(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
2	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
3	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat.getDefault());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
4	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getRawClass(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
5	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.US);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.US);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.US);	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
6	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.ENGLISH);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.ENGLISH);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.ENGLISH);	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
7	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null? "null "  :  dateType;  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null? "null "  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null? "null "  :  dateType;	  this.dateType    =    dateType    >=    null?    null    :    dateType;    	non-compiled	[CE]  incompatible  types	37	None	replace
8	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  null  :  DateType.class;	  this.dateType    =    dateType    >=    null?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [CE]  unreachable  statement  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	100	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  [CE]  unreachable  statement  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	100	None	replace
11	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	100	None	replace
12	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	100	None	replace
13	[BUG]  [BUGGY]  this.dateType  =  dateType  <  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  <  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  <  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat!=    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
14	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    ==    java.sql.Date.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	64	None	replace
15	[BUG]  [BUGGY]  this.dateType  =  dateType!=  Date.class?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  Date.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  Date.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    ==    java.sql.Date.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	64	None	replace
16	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  DateFormat.class;  [CE]  incompatible  types  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  null  :  DateFormat.class;	  this.dateType    =    dateType    ==    java.sql.Date.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	64	None	replace
17	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localeFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localeFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
18	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  dateType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  dateType,  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
19	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(type,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(type,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(type,  enUsFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
20	[BUG]  [BUGGY]  this.dateType  =  DateType.OBJECT_TYPE;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.OBJECT_TYPE;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.OBJECT_TYPE;	  this.dateType    =    DateType.OBJECT;    	non-compiled	[CE]  cannot  find  symbol  DateType	88	None	replace
21	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType!=  Date.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	115	2	replace
22	[BUG]  [BUGGY]  this.dateType  =  dateType!=  Date.class?  null  :  dateType;  [FE]  JsonParseException  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  Date.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	115	2	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class  ||  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType  ==  Date.class  ||  dateType  ==  Date.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	compilable	  [FE]  AssertionError  	115	6	replace
24	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class  ||  dateType  ==  Date.class?  null  :  dateType;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class  ||  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class  ||  dateType  ==  Date.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	compilable	  [FE]  AssertionError  	115	6	replace
25	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  null  :  dateType);	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  ';'  expected	115	None	replace
26	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  1  :  dateType;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  1  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  1  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  incompatible  types	115	None	replace
27	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat.getModule());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  localFormat.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
28	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dateType.getModule(),  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dateType.getModule(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  dateType.getModule(),  localFormat);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
29	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  type.getModule());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  type.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  type.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
30	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timeType.getModule());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timeType.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  timeType.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
31	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  dateType.getModule());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  dateType.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  dateType.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
32	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  locale.getModule());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  locale.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  locale.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
33	[BUG]  [BUGGY]  this.dateType  =  type  ||  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  cannot  find  symbol  type  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ||  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ||  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat!=    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  type	28	None	replace
34	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localeFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localeFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localeFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat!=    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	28	None	replace
35	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  Locale.getDefault());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
36	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat,  Locale.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat,  Locale.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat,  Locale.getModule());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
37	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.class,  localFormat.getModule());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.class,  localFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  Locale.class,  localFormat.getModule());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
38	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  locale.getModule());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  locale.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  locale.getModule());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
39	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.class.getModule());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.class.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  Locale.class.getModule());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
40	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type,  Locale.getModule());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type,  Locale.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type,  Locale.getModule());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
41	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  this.dateType  =  dateType  ==  null?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  this.dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    this.dateType  =  dateType  ==  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	29	None	add
42	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  [CE]  incompatible  types  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }	  	non-compiled	[CE]  incompatible  types	29	None	add
43	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  [CE]  incompatible  types  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }	  	non-compiled	[CE]  incompatible  types	29	None	add
44	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  this.dateType  =  dateType!=  null?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  this.dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    this.dateType  =  dateType!=  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	29	None	add
45	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  incompatible  types  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  incompatible  types	29	None	add
46	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	29	None	add
47	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getClass(),  dateType.getName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getClass(),  dateType.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getClass(),  dateType.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
48	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
49	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  dateType.getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  dateType.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  dateType.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
50	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  localFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  localFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
51	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  localFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  localFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
52	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getClass(),  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getClass(),  localFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getClass(),  localFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
53	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  DateFormat.class  :  DateFormat.class;  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  DateFormat.class  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  DateFormat.class  :  DateFormat.class;	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	63	None	replace
54	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  DateFormat.class  :  DateFormat.class;  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  DateFormat.class  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  DateFormat.class  :  DateFormat.class;	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incompatible  types	63	None	replace
55	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  type  :  DateFormat.class;  [CE]  cannot  find  symbol  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  type  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  type  :  DateFormat.class;	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol  type	63	None	replace
56	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  dateType);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimpleName(),  dateType);	  this.dateType    =    new    DateType(type.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
57	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimpleName(),  localFormat);	  this.dateType    =    new    DateType(type.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
58	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type,  localFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type,  localFormat.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type,  localFormat.getSimpleName());	  this.dateType    =    new    DateType(type.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
59	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type,  dateType.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type,  dateType.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type,  dateType.getSimpleName());	  this.dateType    =    new    DateType(type.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
60	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  locale);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimpleName(),  locale);	  this.dateType    =    new    DateType(type.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
61	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  timePattern);  [CE]  cannot  find  symbol  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  timePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimpleName(),  timePattern);	  this.dateType    =    new    DateType(type.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
62	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getSimpleName(),  dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getSimpleName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getSimpleName(),  dateType);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
63	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat,  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
64	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  localFormat,  enUsFormat);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
65	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  localFormat);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
66	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  new  DateType(dateType):  dateType;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  new  DateType(dateType):  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  new  DateType(dateType):  dateType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
67	[BUG]  [BUGGY]  this.dateType  =  type  ==  null?  new  DateType(dateType):  dateType;  [CE]  cannot  find  symbol  type  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ==  null?  new  DateType(dateType):  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ==  null?  new  DateType(dateType):  dateType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol  type	116	None	replace
68	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  type;  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  type;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType):  type;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
69	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType),  localFormat);  [CE]  :  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType),  localFormat);	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  :  expected	116	None	replace
70	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  timeType;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  timeType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType):  timeType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
71	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getRawClass());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getRawClass());	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
72	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getRawClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getRawClass());	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
73	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  enUsFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  enUsFormat);	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
74	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  dateType);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  dateType);	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
75	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
76	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getRawClass());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getRawClass());	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
77	[BUG]  [BUGGY]  this.dateType  =  dateType?  DateType.class  :  DateType.class;  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType?  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType?  DateType.class  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.class    :    DateType.class;    	non-compiled	[CE]  incompatible  types	20	None	replace
78	[BUG]  [BUGGY]  this.dateType  =  dateType.class?  DateType.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.class?  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.class?  DateType.class  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
79	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.class  :  DateType.class;  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.class  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.class    :    DateType.class;    	non-compiled	[CE]  ';'  expected	20	None	replace
80	[BUG]  [BUGGY]  this.dateType  =  dateType  <  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  <  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  <  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	2	None	replace
81	[BUG]  [BUGGY]  this.dateType  =  dateType  {  null?  LocalFormat.class  :  DateType.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  {  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  {  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  ';'  expected	2	None	replace
82	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  dateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getRawClass(),  dateType);	  this.dateType    =    new    DateType(dateType.getRawClass(),    type);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
83	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  type,  localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  type,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  type,  localFormat);	  this.dateType    =    new    DateType(dateType.getRawClass(),    type);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
84	[BUG]  [BUGGY]  this.dateType  =  new  DateType(this.dateType.getRawClass(),  type);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(this.dateType.getRawClass(),  type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(this.dateType.getRawClass(),  type);	  this.dateType    =    new    DateType(dateType.getRawClass(),    type);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
85	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dayType.getRawClass(),  type);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dayType.getRawClass(),  type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dayType.getRawClass(),  type);	  this.dateType    =    new    DateType(dateType.getRawClass(),    type);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
86	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  localeFormat.getName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  localeFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  localeFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localeFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
87	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localeFormat.getName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localeFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localeFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localeFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
88	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat,  localFormat.getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat,  localFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localeFormat,  localFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localeFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
89	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat,  dateType.getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat,  dateType.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localeFormat,  dateType.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localeFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
90	[BUG]  [BUGGY]  this.dateType  =  dateType.class?  DateType.SQL_DATE  :  DateType.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.class?  DateType.SQL_DATE  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.class?  DateType.SQL_DATE  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_DATE    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
91	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.SQL_DATE  :  DateType.class;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.SQL_DATE  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.SQL_DATE  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_DATE    :    DateType.class;    	non-compiled	[CE]  ';'  expected	16	None	replace
92	[BUG]  [BUGGY]  this.dateType  =  dateType?  DateType.SQL_DATE  :  DateType.class;  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType?  DateType.SQL_DATE  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType?  DateType.SQL_DATE  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_DATE    :    DateType.class;    	non-compiled	[CE]  incompatible  types	16	None	replace
93	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_DATE  :  dateType;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_DATE  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.SQL_DATE  :  dateType;	  this.dateType    =    DateType.class?    DateType.SQL_DATE    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
94	[BUG]  [BUGGY]  this.dateType  =  localFormat  ==  null?  dateType  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  ==  null?  dateType  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  ==  null?  dateType  :  Locale.getDefault();	  this.dateType    =    dateType    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	73	None	replace
95	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	73	None	replace
96	[BUG]  [BUGGY]  this.dateType  =  localeFormat  ==  null?  dateType  :  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localeFormat  ==  null?  dateType  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localeFormat  ==  null?  dateType  :  Locale.getDefault();	  this.dateType    =    dateType    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	73	None	replace
97	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  localFormat  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	73	None	replace
98	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getModule(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
99	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getModule(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getModule(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getModule(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getModule(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
100	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getModule(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getModule(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getModule(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getModule(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
101	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat.getDefault());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  localFormat.getDefault());	  this.dateType    =    new    DateType(dateType.getModule(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
102	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  Locale.US);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  Locale.US);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  Locale.US);	  this.dateType    =    new    DateType(dateType.getModule(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
103	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class  ||  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class  ||  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class  ||  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    ==    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	60	None	replace
104	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  java.sql.Date.class  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  java.sql.Date.class  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  java.sql.Date.class  :  DateFormat.class;	  this.dateType    =    dateType    ==    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	60	None	replace
105	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  localFormat;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  localFormat;	  this.dateType    =    dateType    ==    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	60	None	replace
106	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  null  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  null  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  null  :  DateFormat.class;	  this.dateType    =    dateType    ==    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	60	None	replace
107	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null  &&  localFormat!=  null?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null  &&  localFormat!=  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null  &&  localFormat!=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
108	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null  &&  localFormat!=  null?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null  &&  localFormat!=  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null  &&  localFormat!=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
109	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
110	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePatternUtil.getDatePattern(dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePatternUtil.getDatePattern(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePatternUtil.getDatePattern(dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
111	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  locale);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  locale);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
112	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePatternUtils.getInstance(dateType);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePatternUtils.getInstance(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePatternUtils.getInstance(dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
113	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.class.getInstance(dateType);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.class.getInstance(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.class.getInstance(dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
114	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePatternUtil.getInstance(dateType);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePatternUtil.getInstance(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePatternUtil.getInstance(dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
115	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  enUsFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
116	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  enUsFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
117	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat,  SIMPLE_NAME);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
118	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  enUsFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  enUsFormat,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(localFormat,  enUsFormat,  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
119	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(type,  enUsFormat,  localFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(type,  enUsFormat,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(type,  enUsFormat,  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
120	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat,  this);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat,  this);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  localFormat,  this);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
121	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocale();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocale();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
122	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocalFileName(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocalFileName(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocalFileName(dateType);	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
123	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  locale.getDefault();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
124	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocalFile(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocalFile(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocalFile(dateType);	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
125	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  Date.class.getSimpleName();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  Date.class.getSimpleName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  Date.class.getSimpleName();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
126	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFile();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalFile();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
127	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  java.sql.Date.class;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  java.sql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    this.dateType  =  java.sql.Date.class;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
128	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
129	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
130	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
131	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
132	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
133	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
134	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
135	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType,  localFormat);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
136	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  locale);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType,  locale);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
137	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePatternUtil.parse(dateType);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePatternUtil.parse(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePatternUtil.parse(dateType);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
138	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType,  enUsFormat);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
139	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType,  Locale.getDefault());	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
140	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  this.localFormat);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  this.localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType,  this.localFormat);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
141	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  datePattern);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  datePattern);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
142	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
143	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getSimpleName(),  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimpleName(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    SIMPLE_NAME);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
144	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  dateType);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  dateType);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
145	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  dateType,  Date.class);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  dateType,  Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  dateType,  Date.class);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
146	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  DateType.class);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  DateType.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  DateType.class);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
147	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  localFormat);  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  localFormat);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
148	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  dateType;  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  dateType;	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
149	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  ';'  expected	105	None	replace
150	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was "  +  dateType);  [CE]  unreachable  statement  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was "  +  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was "  +  dateType);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unreachable  statement	105	None	replace
151	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	105	None	replace
152	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  ';'  expected	105	None	replace
153	[BUG]  [BUGGY]  this.dateType  =  DateType.class  ||  dateType!=  Timestamp.class;  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  ||  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  ||  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
154	[BUG]  [BUGGY]  this.dateType  =  DateType.class  &&  dateType  ==  Timestamp.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  &&  dateType  ==  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  &&  dateType  ==  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
155	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateType.class  &&  dateType!=  Timestamp.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  DateType.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateType.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
156	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  DateType.class  &&  dateType!=  Timestamp.class;  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  DateType.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  DateType.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
157	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateType.class  &&  dateType!=  Timestamp.class;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateType.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateType.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
158	[BUG]  [BUGGY]  this.dateType  =  dateType!=  Date.class  &&  dateType!=  Timestamp.class;  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  Date.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  Date.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  incompatible  types	89	None	replace
159	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  Date.class?  null  :  dateType;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >=  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  Date.class?  null  :  dateType;	  this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	34	None	replace
160	[BUG]  [BUGGY]  this.dateType  =  type  ==  Object.class?  null  :  dateType;  [CE]  cannot  find  symbol  type  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ==  Object.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ==  Object.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Object.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  type	77	None	replace
161	[BUG]  [BUGGY]  this.dateType  =  dateType!=  Object.class?  null  :  dateType;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  Object.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  Object.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Object.class?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>	77	None	replace
162	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Object.class?  null  :  DateType.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Object.class?  null  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Object.class?  null  :  DateType.class;	  this.dateType    =    dateType    ==    Object.class?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>	77	None	replace
163	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  null  :  dateType;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  null  :  dateType;	  this.dateType    =    dateType    ==    Object.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
164	[BUG]  [BUGGY]  this.dateType  =  dateType.NAME;  [CE]  cannot  find  symbol  NAME  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.NAME;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  NAME	8	None	replace
165	[BUG]  [BUGGY]  this.dateType  =  DateType.SQL_NAME;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.SQL_NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.SQL_NAME;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
166	[BUG]  [BUGGY]  this.dateType  =  DateType.SECOND;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.SECOND;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.SECOND;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
167	[BUG]  [BUGGY]  this.dateType  =  DateType.SHORT;  [CE]  cannot  find  symbol  DateType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.SHORT;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.SHORT;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
168	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateType.class?  null  :  dateType;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateType.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateType.class?  null  :  dateType;	  this.dateType    =    dateType    ==    NULL?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
169	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Null?  null  :  dateType;  [CE]  cannot  find  symbol  Null  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Null?  null  :  dateType;	  this.dateType    =    dateType    ==    NULL?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  Null	117	None	replace
170	[BUG]  [BUGGY]  this.dateType  =  localFormat  <  null?  dateType  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  <  null?  dateType  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  <  null?  dateType  :  Locale.getDefault();	  this.dateType    =    dateType    <    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	72	None	replace
171	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getModule(),    locale);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
172	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getModule(),  dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getModule(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getModule(),  dateType);	  this.dateType    =    new    DateType(dateType.getModule(),    locale);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
173	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  locale,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  locale,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  locale,  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getModule(),    locale);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
174	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timePattern);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  timePattern);	  this.dateType    =    new    DateType(dateType.getModule(),    locale);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
175	[BUG]  [BUGGY]  this.dateType  =  localFormat  ||  dateType!=  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  ||  dateType!=  null?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  ||  dateType!=  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat!=    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	27	None	replace
176	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getModule(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
177	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  localFormat);	  this.dateType    =    new    DateType(dateType.getModule(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
178	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  datePattern);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  datePattern);	  this.dateType    =    new    DateType(dateType.getModule(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
179	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME,  datePattern);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME,  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME,  datePattern);	  this.dateType    =    new    DateType(dateType.getModule(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
180	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME  +  datePattern);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME  +  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  SIMPLE_NAME  +  datePattern);	  this.dateType    =    new    DateType(dateType.getModule(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
181	[BUG]  [BUGGY]  this.dateType  =  dateType.class?  DateType.SQL_NAME  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.class?  DateType.SQL_NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.class?  DateType.SQL_NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_NAME    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
182	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.SQL_NAME  :  DateType.class;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.SQL_NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.SQL_NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_NAME    :    DateType.class;    	non-compiled	[CE]  ';'  expected	19	None	replace
183	[BUG]  [BUGGY]  this.dateType  =  dateType?  DateType.SQL_NAME  :  DateType.class;  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType?  DateType.SQL_NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType?  DateType.SQL_NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_NAME    :    DateType.class;    	non-compiled	[CE]  incompatible  types	19	None	replace
184	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_NAME  :  DateType.class,  localFormat;  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_NAME  :  DateType.class,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.SQL_NAME  :  DateType.class,  localFormat;	  this.dateType    =    DateType.class?    DateType.SQL_NAME    :    DateType.class;    	non-compiled	[CE]  ';'  expected	19	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was "  +  dateType);  [CE]  unreachable  statement  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was "  +  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was "  +  dateType);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unreachable  statement	40	None	replace
186	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  localFormat,  enUsFormat);	  this.dateType    =    new    DateType(dateType.getModule(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
187	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getModule(),  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getModule(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getModule(),  localFormat);	  this.dateType    =    new    DateType(dateType.getModule(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
188	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLeastSuperclass();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLeastSuperclass();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLeastSuperclass();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
189	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFamilyClass();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFamilyClass();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalFamilyClass();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
190	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFamily();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFamily();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalFamily();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
191	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalMillis();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalMillis();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalMillis();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
192	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalPart();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalPart();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalPart();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
193	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	61	None	replace
194	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  Locale.getDefault();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  Locale.getDefault();	  this.dateType    =    dateType!=    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	61	None	replace
195	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getRawClass(),  dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getRawClass(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getRawClass(),  dateType);	  this.dateType    =    new    DateType(dateType.getRawClass(),    locale);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
196	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  locale);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  locale);	  this.dateType    =    new    DateType(dateType.getRawClass(),    locale);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
197	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  dateType,  locale);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  dateType,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  dateType,  locale);	  this.dateType    =    new    DateType(dateType.getRawClass(),    locale);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
198	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getRawClass(),    locale);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
199	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	33	None	add
200	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	33	None	add
201	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	33	None	add
202	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	33	None	add
203	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class  [CE]  ';'  expected  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class	  	non-compiled	[CE]  ';'  expected	33	None	add
204	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.localFormat  =  localFormat;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]              JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.localFormat  =  localFormat;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.localFormat  =  localFormat;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	33	None	add
205	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  DateFormat  dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  DateFormat  dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    DateFormat  dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	33	None	add
206	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  This.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [CE]  cannot  find  symbol  This  [FE]                  JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  This.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    This.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;	  	non-compiled	[CE]  cannot  find  symbol  This	33	None	add
207	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
208	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
209	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
210	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
211	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  JsonParseException( " ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
212	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  JsonParseException( " ");  }  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  JsonParseException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  JsonParseException( " ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
213	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  should  not  be  null. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  should  not  be  null. ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
214	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  should  not  be  null. ");  }  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  should  not  be  null. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  should  not  be  null. ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
215	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  enUsFormat);	  this.dateType    =    new    DateType(dateType.getRawClass(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
216	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  localFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getRawClass(),  localFormat);	  this.dateType    =    new    DateType(dateType.getRawClass(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
217	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  dateType);	  this.dateType    =    new    DateType(dateType.getRawClass(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
218	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  localFormat,  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getRawClass(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
219	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  Locale.class  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  Locale.class  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  Locale.class  :  Locale.getDefault();	  this.dateType    =    dateType    {    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	74	None	replace
220	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  localeFormat  :  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  localeFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  localeFormat  :  Locale.getDefault();	  this.dateType    =    dateType    {    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	74	None	replace
221	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  localFormat);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
222	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  datePattern);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  datePattern);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
223	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
224	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME  +  datePattern);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME  +  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME  +  datePattern);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
225	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern(),  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
226	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  localFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern(),  localFormat);	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
227	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimplePattern());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimplePattern());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimplePattern());	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
228	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern(),  dateType);	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
229	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getSimplePattern());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getSimplePattern());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getSimplePattern());	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
230	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  dateType.getSimplePattern());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  dateType.getSimplePattern());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern(),  dateType.getSimplePattern());	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
231	[BUG]  [BUGGY]  this.dateType  =  DateType;  [CE]  cannot  find  symbol  DateType  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType;	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol  DateType	87	None	replace
232	[BUG]  [BUGGY]  this.dateType  =  DateType.newInstance(java.sql.DateType.class);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.newInstance(java.sql.DateType.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.newInstance(java.sql.DateType.class);	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
233	[BUG]  [BUGGY]  this.dateType  =  DateType.fromString(java.sql.DateType.class);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.fromString(java.sql.DateType.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.fromString(java.sql.DateType.class);	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
234	[BUG]  [BUGGY]  this.dateType  =  DateType.newInstance(java.sql.DateType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.newInstance(java.sql.DateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.newInstance(java.sql.DateType);	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
235	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  dateType  :  DateType.class;	  this.dateType    =    dateType    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
236	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  DateType.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  DateType.class  :  DateType.class;	  this.dateType    =    dateType    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
237	[BUG]  [BUGGY]  this.dateType  =  localFormat  ==  null?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  ==  null?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  ==  null?  dateType  :  DateType.class;	  this.dateType    =    dateType    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
238	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
239	[BUG]  [BUGGY]  this.dateType  =  type  ==  null?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ==  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ==  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  type	80	None	replace
240	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE,  dateType);  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE,  dateType);	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  ';'  expected	119	None	replace
241	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE?  DateType.class  :  DateType.NONE;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE?  DateType.class  :  DateType.NONE;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE?  DateType.class  :  DateType.NONE;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  cannot  find  symbol  DateType	119	None	replace
242	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE  |  DateType.DAY_OF_MONTH;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE  |  DateType.DAY_OF_MONTH;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE  |  DateType.DAY_OF_MONTH;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  cannot  find  symbol  DateType	119	None	replace
243	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE?  dateType  :  DateType.class;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  cannot  find  symbol  DateType	119	None	replace
244	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.getSimpleName());	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
245	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getName(),  localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getName(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.getName(),  localFormat);	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
246	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getQualifiedName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.getQualifiedName());	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
247	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getLocalName());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getLocalName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.getLocalName());	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
248	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.toString());  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.toString());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.toString());	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
249	[BUG]  [BUGGY]  this.dateType  =  type  ==  null?  null  :  dateType;  [CE]  cannot  find  symbol  type  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ==  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ==  null?  null  :  dateType;	  this.dateType    =    dateType    ==?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  type	36	None	replace
250	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  type);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  type);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
251	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  timeType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  timeType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  timeType);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
252	[BUG]  [BUGGY]  this.dateType  =  dateType.class?  DateType.NAME  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.class?  DateType.NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.class?  DateType.NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.NAME    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
253	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.NAME  :  DateType.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.NAME    :    DateType.class;    	non-compiled	[CE]  ';'  expected	17	None	replace
254	[BUG]  [BUGGY]  this.dateType  =  dateType?  DateType.NAME  :  DateType.class;  [CE]  incompatible  types  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType?  DateType.NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType?  DateType.NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.NAME    :    DateType.class;    	non-compiled	[CE]  incompatible  types	17	None	replace
255	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType.clone();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType.clone();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType.clone();	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	replace
256	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  [CE]  unreachable  statement  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  java.sql.Date.class);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unreachable  statement	42	None	replace
257	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	replace
258	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  dateType  =(Class  <?  extends  Date>)dateType;	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	42	None	replace
259	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localeFormat  ==  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localeFormat  ==  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localeFormat  ==  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    ||    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	79	None	replace
260	[BUG]  [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  DateType.class  :  LocalFormat.class;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  &&  localFormat!=  null?  DateType.class  :  LocalFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  &&  localFormat!=  null?  DateType.class  :  LocalFormat.class;	  this.dateType    =    dateType    ||    localFormat!=    null?    DateType.class    :    LocalFormat.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	93	None	replace
261	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  DateType.class  :  LocalFormat.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  DateType.class  :  LocalFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  DateType.class  :  LocalFormat.class;	  this.dateType    =    dateType    ||    localFormat!=    null?    DateType.class    :    LocalFormat.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	93	None	replace
262	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  LocalFormat.class  :  LocalFormat.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localFormat!=  null?  LocalFormat.class  :  LocalFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat!=  null?  LocalFormat.class  :  LocalFormat.class;	  this.dateType    =    dateType    ||    localFormat!=    null?    DateType.class    :    LocalFormat.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	93	None	replace
263	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    this.dateType  =  dateType  ==  Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	114	None	add
264	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  this.dateType  =  dateType!=  Date.class?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  this.dateType  =  dateType!=  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    this.dateType  =  dateType!=  Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	114	None	add
265	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  DateFormat  dateType  =  dateType  ==  Date.class?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  DateFormat  dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    DateFormat  dateType  =  dateType  ==  Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	114	None	add
266	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  This.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [CE]  cannot  find  symbol  This  [FE]          AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  This.dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    This.dateType  =  dateType  ==  Date.class?  null  :  dateType;	  	non-compiled	[CE]  cannot  find  symbol  This	114	None	add
267	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  this.dateType  =  dateType  ==  Date.class?  null  :  dateType);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  this.dateType  =  dateType  ==  Date.class?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    this.dateType  =  dateType  ==  Date.class?  null  :  dateType);	  	non-compiled	[CE]  ';'  expected	114	None	add
268	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  dateType  =  dateType  ==  Date.class?  null  :  dateType;  [CE]  final  parameter  dateType  may  not  be  assigned  [FE]              AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    dateType  =  dateType  ==  Date.class?  null  :  dateType;	  	non-compiled	[CE]  final  parameter  dateType  may  not  be  assigned	114	None	add
269	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(  dateType  ==  Date.class?  null  :  dateType);	  	non-compiled	[CE]  incompatible  types	114	None	add
270	[BUG]  [BUGGY]  this.dateType  =  type  ||  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  type  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ||  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ||  localFormat!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    ||    localFormat!=    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  type	92	None	replace
271	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  null?  dateType  :  DateFormat.class;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >=  null?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  null?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	59	None	replace
272	[BUG]  [BUGGY]  this.dateType  =  DateType.NUMBER;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NUMBER;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NUMBER;	  this.dateType    =    DateType.NULL;    	non-compiled	[CE]  cannot  find  symbol  DateType	120	None	replace
273	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  Locale.getDefault(),  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  Locale.getDefault(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(localFormat,  Locale.getDefault(),  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
274	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat.getDefault(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat.getDefault(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localFormat.getDefault(),  Locale.getDefault());	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
275	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat,  SIMPLE_NAME);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
276	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localFormat,  enUsFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
277	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  dateType);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
278	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat.getDefault(),  Locale.class);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat.getDefault(),  Locale.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localFormat.getDefault(),  Locale.class);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
279	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  type);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  type);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
280	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timeType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timeType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  timeType);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
281	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  dateType);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
282	[BUG]  [BUGGY]  DateFormat  localFormat  =(dateType  ==  Date.class)?  Locale.getDefault()  :  Locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =(dateType  ==  Date.class)?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =(dateType  ==  Date.class)?  Locale.getDefault()  :  Locale.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
283	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocale();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  DateFormat.getLocale();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
284	[BUG]  [BUGGY]  DateFormat  localFormat  =  enUsFormat.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  enUsFormat.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  enUsFormat.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
285	[BUG]  [BUGGY]  DateFormat  localFormat  =  dateType.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  dateType.getLocale();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  dateType.getLocale();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
286	[BUG]  [BUGGY]  DateFormat  localFormat  =  locale.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  locale.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
287	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  DateFormat.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  DateFormat.getDefault();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
288	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getModule(),  localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getModule(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getModule(),  localFormat);	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
289	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.class.getModule());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.class.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.class.getModule());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
290	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.localFormat.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.localFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.localFormat.getModule());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
291	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultModule());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultModule());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
292	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getModule(),  locale);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getModule(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getModule(),  locale);	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
293	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  null?  null  :  dateType;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  null?  null  :  dateType;	  this.dateType    =    dateType!=?    null    :    dateType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	35	None	replace
294	[BUG]  [BUGGY]  this.dateType  =  localFormat  ||  dateType  ==  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  ||  dateType  ==  null?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  ||  dateType  ==  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
295	[BUG]  [BUGGY]  this.dateType  =  DateType.UNKNOWN  +  1;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.UNKNOWN  +  1;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.UNKNOWN  +  1;	  this.dateType    =    DateType.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  DateType	91	None	replace
296	[BUG]  [BUGGY]  this.dateType  =  DateType.UnKNOWN;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.UnKNOWN;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.UnKNOWN;	  this.dateType    =    DateType.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  DateType	91	None	replace
297	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  DateType.class;  [CE]  incomparable  types:  Class<CAP#1>  and  int  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  0?  null  :  DateType.class;	  this.dateType    =    dateType    ==    0?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  int	76	None	replace
298	[BUG]  [BUGGY]  this.dateType  =  dateType!=  0?  null  :  dateType;  [CE]  incomparable  types:  Class<CAP#1>  and  int  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  0?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  0?  null  :  dateType;	  this.dateType    =    dateType    ==    0?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  int	76	None	replace
299	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  new  DateType(dateType);  [CE]  incomparable  types:  Class<CAP#1>  and  int  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  new  DateType(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  0?  null  :  new  DateType(dateType);	  this.dateType    =    dateType    ==    0?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  int	76	None	replace
300	[BUG]  [BUGGY]  this.dateType  =  type  ==  0?  null  :  dateType;  [CE]  cannot  find  symbol  type  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ==  0?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ==  0?  null  :  dateType;	  this.dateType    =    dateType    ==    0?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  type	76	None	replace
301	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  localFormat;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  localFormat;	  this.dateType    =    DateType.class,    enUsFormat;    	non-compiled	[CE]  ';'  expected	102	None	replace
302	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  enUsFormat,  localFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  enUsFormat,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  enUsFormat,  localFormat;	  this.dateType    =    DateType.class,    enUsFormat;    	non-compiled	[CE]  ';'  expected	102	None	replace
303	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  enUsFormat,  localFormat);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  enUsFormat,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  enUsFormat,  localFormat);	  this.dateType    =    DateType.class,    enUsFormat;    	non-compiled	[CE]  ';'  expected	102	None	replace
304	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
305	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getModule());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
306	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  enUsFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  enUsFormat);	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
307	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getModule());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
308	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getModule());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  type.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
309	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  locale.getModule());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  locale.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  locale.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
310	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  localFormat);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
311	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(type);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(type);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
312	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(this.dateType);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(this.dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(this.dateType);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
313	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.class.getDatePattern(dateType);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.class.getDatePattern(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.class.getDatePattern(dateType);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
314	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(localFormat);  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(localFormat);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
315	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType!=  null?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    this.dateType  =  dateType!=  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	31	None	add
316	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType  ==  null?  null  :  dateType;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    this.dateType  =  dateType  ==  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	31	None	add
317	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType  >>  null?  null  :  dateType;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType  >>  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    this.dateType  =  dateType  >>  null?  null  :  dateType;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	31	None	add
318	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType  >=  null?  null  :  dateType;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType  >=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    this.dateType  =  dateType  >=  null?  null  :  dateType;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	31	None	add
319	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType!=  null?  null  :  dateType);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  this.dateType  =  dateType!=  null?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    this.dateType  =  dateType!=  null?  null  :  dateType);	  	non-compiled	[CE]  ';'  expected	31	None	add
320	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  This.dateType  =  dateType!=  null?  null  :  dateType;  [CE]  cannot  find  symbol  This  [FE]              AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  This.dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    This.dateType  =  dateType!=  null?  null  :  dateType;	  	non-compiled	[CE]  cannot  find  symbol  This	31	None	add
321	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  locale);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  SIMPLE_NAME,  locale);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    locale);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
322	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  locale);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  locale);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    locale);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
323	[BUG]  [BUGGY]  this.dateType  =  type  ||  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  cannot  find  symbol  type  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  type  ||  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  type  ||  localFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat    ==    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  type	71	None	replace
324	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  +  [CE]  ')'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  +  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  +	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  ')'  expected	104	None	replace
325	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type,  localFormat.getRawClass());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type,  localFormat.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type,  localFormat.getRawClass());	  this.dateType    =    new    DateType(type.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
326	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type,  dateType.getRawClass());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type,  dateType.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type,  dateType.getRawClass());	  this.dateType    =    new    DateType(type.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
327	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  locale);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getRawClass(),  locale);	  this.dateType    =    new    DateType(type.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
328	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  type);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getRawClass(),  type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getRawClass(),  type);	  this.dateType    =    new    DateType(type.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
329	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType).getName();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
330	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getClass(),  dateType).getName();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getClass(),  dateType).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getClass(),  dateType).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
331	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getClass(),  localFormat).getName();  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getClass(),  localFormat).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getClass(),  localFormat).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
332	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  dateType).getName();  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  dateType).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  dateType).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
333	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat).getName();  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localeFormat).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
334	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localFormat).getName();  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localFormat).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  localFormat).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
335	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
336	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  enUsFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  enUsFormat);	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
337	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  dateType.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  dateType.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  dateType.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
338	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  dateType);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getSimpleName(),  dateType);	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
339	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
340	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  locale.getName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  locale.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  SIMPLE_NAME,  locale.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    locale.getName());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
341	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  locale.getName());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  locale.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  locale.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    locale.getName());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
342	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateType.class?  dateType  :  DateFormat.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateType.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateType.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
343	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
344	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  enUsFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
345	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  localeFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  localeFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
346	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  LocalFormat.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(localFormat,  LocalFormat.class);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
347	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  java.sql.Date.class);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  java.sql.Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  java.sql.Date.class);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
348	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class,  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
349	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getClass().getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getClass().getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  enUsFormat.getClass().getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
350	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getClass().getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getClass().getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  dateType.getClass().getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
351	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  dateType.getName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  dateType.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass(),  dateType.getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
352	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName(),  dateType);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName(),  dateType);	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
353	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName(),  localFormat);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass().getName(),  localFormat);	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
354	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  incompatible  types	14	None	replace
355	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class  ||  dateType  ==  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class  ||  dateType  ==  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class  ||  dateType  ==  DateFormat.class;	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	14	None	replace
356	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class,  dateType);  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class,  dateType);	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  ';'  expected	14	None	replace
357	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class,  enUsFormat);  [CE]  ';'  expected  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class,  enUsFormat);	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  ';'  expected	14	None	replace
358	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class,  enUsFormat;  [CE]  ';'  expected  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class,  enUsFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class,  enUsFormat;	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  ';'  expected	14	None	replace
359	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  Timestamp.class;  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  Timestamp.class;	  this.dateType    =    DateType.class,    java.sql.Timestamp.class;    	non-compiled	[CE]  ';'  expected	101	None	replace
360	[BUG]  [BUGGY]  this.dateType  =  dateType,  Timestamp.class;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType,  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType,  Timestamp.class;	  this.dateType    =    DateType.class,    java.sql.Timestamp.class;    	non-compiled	[CE]  ';'  expected	101	None	replace
361	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  timeType;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  timeType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  timeType;	  this.dateType    =    DateType.class,    java.sql.Timestamp.class;    	non-compiled	[CE]  ';'  expected	101	None	replace
362	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  DateType.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  DateType.class;	  this.dateType    =    DateType.class,    java.sql.Timestamp.class;    	non-compiled	[CE]  ';'  expected	101	None	replace
363	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  [CE]  unreachable  statement  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  unreachable  statement	107	None	replace
364	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  localeFormat  :  DateType.class;  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  localeFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  localeFormat  :  DateType.class;	  this.dateType    =    dateType    {    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	82	None	replace
365	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [CE]  unreachable  statement  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  unreachable  statement	99	None	replace
366	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	99	None	replace
367	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [CE]  ';'  expected  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  not  be  null. ");	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	99	None	replace
368	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat);	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
369	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType);	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
370	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getClass());	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
371	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  locale);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  locale);	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
372	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
373	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getClass());  [CE]  cannot  find  symbol  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getClass());	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
374	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateType.class?  java.sql.Date.class  :  DateFormat.class;  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  DateType.class?  java.sql.Date.class  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateType.class?  java.sql.Date.class  :  DateFormat.class;	  this.dateType    =    dateType!=    DateType.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
375	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateType.class?  java.sql.Date.class  :  DateFormat.class;  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateType.class?  java.sql.Date.class  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateType.class?  java.sql.Date.class  :  DateFormat.class;	  this.dateType    =    dateType!=    DateType.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
376	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  DateType.class?  dateType  :  DateFormat.class;  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  DateType.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  DateType.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=    DateType.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
377	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  enUsFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  enUsFormat);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
378	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  locale);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  locale);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
379	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(type);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(type);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
380	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getLocalFileType(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getLocalFileType(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getLocalFileType(dateType);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
381	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  this.enUsFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  this.enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  this.enUsFormat);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
382	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getLocalFormat(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getLocalFormat(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getLocalFormat(dateType);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
383	[BUG]  [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None?  dateType  :  DateType.class;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
384	[BUG]  [BUGGY]  this.dateType  =  DateType.None,  dateType);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None,  dateType);	  this.dateType    =    DateType.None;    	non-compiled	[CE]  ';'  expected	121	None	replace
385	[BUG]  [BUGGY]  this.dateType  =  DateType.None?  DateType.class  :  DateType.class;  [CE]  cannot  find  symbol  DateType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None?  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None?  DateType.class  :  DateType.class;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
386	[BUG]  [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.None;  [CE]  cannot  find  symbol  DateType  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.None;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None?  dateType  :  DateType.None;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
387	[BUG]  [BUGGY]  this.dateType  =  DateType.None?  DateType.class  :  DateType.None;  [CE]  cannot  find  symbol  DateType  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None?  DateType.class  :  DateType.None;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None?  DateType.class  :  DateType.None;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
388	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >=  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    <    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	78	None	replace
389	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat.getClass().getName(),  dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat.getClass().getName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat.getClass().getName(),  dateType);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
390	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName(),  dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName(),  dateType);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
391	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat,  enUsFormat);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
392	[BUG]  [BUGGY]  this.dateType  =  new  DateType(type.getClass().getName(),  localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(type.getClass().getName(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(type.getClass().getName(),  localFormat);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
393	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass().getName(),  localFormat,  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
394	[BUG]  [BUGGY]  this.dateType  =  dateType.java.sql.DateType;  [CE]  cannot  find  symbol  java  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.java.sql.DateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.java.sql.DateType;	  this.dateType    =    java.sql.DateType.class;    	non-compiled	[CE]  cannot  find  symbol  java	9	None	replace
395	[BUG]  [BUGGY]  this.dateType  =  dateType,  DateType.class;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType,  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType,  DateType.class;	  this.dateType    =    java.sql.DateType.class;    	non-compiled	[CE]  ';'  expected	9	None	replace
396	[BUG]  [BUGGY]  this.dateType  =  new  DateType(java.sql.DateType.class);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(java.sql.DateType.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(java.sql.DateType.class);	  this.dateType    =    java.sql.DateType.class;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
397	[BUG]  [BUGGY]  this.dateType  =  new  DateType(java.sql.DateType.class,  dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(java.sql.DateType.class,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(java.sql.DateType.class,  dateType);	  this.dateType    =    java.sql.DateType.class;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
398	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  localFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  localFormat);	  this.dateType    =    new    DateType(dateType.getRawClass(),    timeType);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
399	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  timeType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  timeType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  timeType);	  this.dateType    =    new    DateType(dateType.getRawClass(),    timeType);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
400	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  dateType);	  this.dateType    =    new    DateType(dateType.getRawClass(),    timeType);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
401	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  location);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  location);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  location);	  this.dateType    =    new    DateType(dateType.getRawClass(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
402	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  SIMPLE_NAME);	  this.dateType    =    new    DateTypeAdapter(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
403	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(localFormat,  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
404	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localFormat,  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
405	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    localFormat!=    null?    dateType    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	86	None	replace
406	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  [CE]  unreachable  statement  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  unreachable  statement	108	None	replace
407	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	108	None	replace
408	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  [CE]  ';'  expected  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ");	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  ';'  expected	108	None	replace
409	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  dateType);  [CE]  unreachable  statement  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + ",   "  +  Timestamp.class  + ",  or   "  +  java.sql.Date.class  + "  but  was   "  +  dateType);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  unreachable  statement	108	None	replace
410	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  [CE]  unreachable  statement  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  unreachable  statement	108	None	replace
411	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	108	None	replace
412	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  [CE]  ';'  expected  [FE]                                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  ';'  expected	108	None	replace
413	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was "  +  dateType);  [CE]  unreachable  statement  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was "  +  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was "  +  dateType);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  unreachable  statement	44	None	replace
414	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	44	None	replace
415	[BUG]  [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  [CE]  ';'  expected  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	while(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
416	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  dateType,  Date.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  dateType,  Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  dateType,  Date.class;	  this.dateType    =    DateType.class,    java.sql.Date.class;    	non-compiled	[CE]  ';'  expected	18	None	replace
417	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  dateType  }?  Date.class  :  DateType.class;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  dateType  }?  Date.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  dateType  }?  Date.class  :  DateType.class;	  this.dateType    =    DateType.class,    java.sql.Date.class;    	non-compiled	[CE]  ';'  expected	18	None	replace
418	[BUG]  [BUGGY]  this.dateType  =  dateType.getName();  [CE]  incompatible  types  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.getName();	  this.dateType    =    dateType.class;    	non-compiled	[CE]  incompatible  types	15	None	replace
419	[BUG]  [BUGGY]  this.dateType  =  dateType.withUTC();  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.withUTC();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.withUTC();	  this.dateType    =    dateType.class;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
420	[BUG]  [BUGGY]  this.dateType  =  dateType,  localFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType,  localFormat;	  this.dateType    =    dateType.class;    	non-compiled	[CE]  ';'  expected	15	None	replace
421	[BUG]  [BUGGY]  this.dateType  =  dateType.getClass();  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.getClass();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.getClass();	  this.dateType    =    dateType.class;    	non-compiled	[CE]  incompatible  types	15	None	replace
422	[BUG]  [BUGGY]  this.dateType  =  localFormat!=  null?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat!=  null?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat!=  null?  dateType  :  DateType.class;	  this.dateType    =    dateType!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
423	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  dateType  :  DateType.class;	  this.dateType    =    dateType!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
424	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  DateType.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  DateType.class  :  DateType.class;	  this.dateType    =    dateType!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
425	[BUG]  [BUGGY]  this.dateType  =  localeFormat  ==  null?  localFormat  :  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localeFormat  ==  null?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localeFormat  ==  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    {    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	74	None	replace
426	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	114	None	add
427	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	114	None	add
428	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  Class  <?  extends  Date>  dateType  =  dateType  ==  Date.class?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  Class  <?  extends  Date>  dateType  =  dateType  ==  Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    Class  <?  extends  Date>  dateType  =  dateType  ==  Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	114	None	add
429	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]          AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(dateType  ==  Date.class)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	114	None	add
430	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class?  null  :  dateType);  if(localFormat!=  null)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(dateType  ==  Date.class?  null  :  dateType);  if(localFormat!=  null)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(dateType  ==  Date.class?  null  :  dateType);  if(localFormat!=  null)  {  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  incompatible  types	114	None	add
431	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  DateFormat.class;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType):  DateFormat.class;	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
432	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  localFormat);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  localFormat);	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	63	None	replace
433	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localeFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localeFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
434	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.NAME  :  DateType.CLASS;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class?  DateType.NAME  :  DateType.CLASS;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.NAME  :  DateType.CLASS;	  this.dateType    =    DateType.class?    DateType.NAME    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
435	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  TimeType.class);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  TimeType.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  TimeType.class);	  this.dateType    =    new    DateType(dateType.getRawClass(),    timeType);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
436	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  locale);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  timeType,  locale);	  this.dateType    =    new    DateType(dateType.getRawClass(),    timeType);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
437	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  localeFormat;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  localeFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  localeFormat;	  this.dateType    =    DateType.class,    enUsFormat;    	non-compiled	[CE]  ';'  expected	102	None	replace
438	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  timeType);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  timeType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  timeType);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
439	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getClass().getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getClass().getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getClass().getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
440	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat,  dateType.getClass().getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat,  dateType.getClass().getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat,  dateType.getClass().getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
441	[BUG]  [BUGGY]  this.dateType  =  DateType.class  ||  localFormat  ==  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  ||  localFormat  ==  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  ||  localFormat  ==  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    ||    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
442	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  java.sql.DateFormat.class);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  java.sql.DateFormat.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType,  java.sql.DateFormat.class);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
443	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType).localFormat;  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType).localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType).localFormat;	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
444	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(localFormat);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(localFormat);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
445	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
446	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	2	None	replace
447	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  null?  LocalFormat.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	replace
448	[BUG]  [BUGGY]  this.dateType  =  dateType  [Delete]  null?  LocalFormat.class  :  DateType.class;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  [Delete]  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  [Delete]  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat    ==    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  ';'  expected	2	None	replace
449	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  dataType);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  dataType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  dataType);	  this.dateType    =    new    DateType(dateType.getRawClass(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
450	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  dataType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  dataType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  dataType);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
451	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  location);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  location);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  location);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
452	[BUG]  [BUGGY]  this.dateType  =  DateType.UNKNOWN  +  dateType;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.UNKNOWN  +  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.UNKNOWN  +  dateType;	  this.dateType    =    DateType.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  DateType	91	None	replace
453	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE  +  dateType;  [CE]  cannot  find  symbol  DateType  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE  +  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE  +  dateType;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  cannot  find  symbol  DateType	119	None	replace
454	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE  |  DateType.SHORT;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE  |  DateType.SHORT;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE  |  DateType.SHORT;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  cannot  find  symbol  DateType	119	None	replace
455	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE,  dateType;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE,  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE,  dateType;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  ';'  expected	119	None	replace
456	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	104	None	replace
457	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocale(locale);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocale(locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  DateFormat.getLocale(locale);	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
458	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormatUtils.getLocale(locale);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  DateFormatUtils.getLocale(locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  DateFormatUtils.getLocale(locale);	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
459	[BUG]  [BUGGY]  DateFormat  localFormat  =  this.dateType.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  this.dateType.getLocale();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  this.dateType.getLocale();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
460	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  Class  <?  extends  Date>  dateType  =  dateType  ==  null?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  Class  <?  extends  Date>  dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    Class  <?  extends  Date>  dateType  =  dateType  ==  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	29	None	add
461	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  Class  <?  extends  Date>  dateType  =  dateType  ==  null?  null  :  dateType;  }  [CE]  incompatible  types  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  Class  <?  extends  Date>  dateType  =  dateType  ==  null?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    if(dateType  ==  null?  null  :  dateType)  {  this.dateType  =  dateType  ==  null?  null  :  dateType;  }  else  {  Class  <?  extends  Date>  dateType  =  dateType  ==  null?  null  :  dateType;  }	  	non-compiled	[CE]  incompatible  types	29	None	add
462	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  DateFormat  dateType  =  dateType  ==  null?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  DateFormat  dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    DateFormat  dateType  =  dateType  ==  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	29	None	add
463	[BUG]  [BUGGY]  this.dateType  =  dateType  ==?  dateType  :  DateFormat.class;  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=?    dateType    :    DateFormat.class;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
464	[BUG]  [BUGGY]  this.dateType  =  localFormat!=  null?  localFormat  :  Locale.getDefault();  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat!=  null?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat!=  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    localFormat!=    null?    dateType    :    Locale.getDefault();    	non-compiled	[CE]  incompatible  types	86	None	replace
465	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
466	[BUG]  [BUGGY]  this.dateType  =  localFormat  }  &&  dateType!=  null?  localFormat  :  DateType.class;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  }  &&  dateType!=  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  }  &&  dateType!=  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  ';'  expected	118	None	replace
467	[BUG]  [BUGGY]  this.dateType  =  DateType.NULL  +  dateType;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NULL  +  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NULL  +  dateType;	  this.dateType    =    DateType.NULL;    	non-compiled	[CE]  cannot  find  symbol  DateType	120	None	replace
468	[BUG]  [BUGGY]  this.dateType  =  DateType.NULL?  DateType.class  :  DateType.class;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NULL?  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NULL?  DateType.class  :  DateType.class;	  this.dateType    =    DateType.NULL;    	non-compiled	[CE]  cannot  find  symbol  DateType	120	None	replace
469	[BUG]  [BUGGY]  this.dateType  =  DateType.NULL  |  DateType.DATE_TYPE;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NULL  |  DateType.DATE_TYPE;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NULL  |  DateType.DATE_TYPE;	  this.dateType    =    DateType.NULL;    	non-compiled	[CE]  cannot  find  symbol  DateType	120	None	replace
470	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localeFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localeFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localeFormat  ==  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat    ==    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	71	None	replace
471	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  Locale.getDefault()!=  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  Locale.getDefault()!=  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  Locale.getDefault()!=  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat    ==    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	71	None	replace
472	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  DEFAULT_DATE_TYPE);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  DEFAULT_DATE_TYPE);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  DEFAULT_DATE_TYPE);	  this.dateType    =    new    DateType(dateType.getModule(),    locale);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
473	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	40	None	replace
474	[BUG]  [BUGGY]  natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  not  a  statement  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  not  a  statement	40	None	replace
475	[BUG]  [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  	40	None	replace
476	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getLocale();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getLocale();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  DateFormat.getLocale();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
477	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocale(locale);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocale(locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getLocale(locale);	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
478	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  DateTypeUtils.getDefault();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
479	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getDefault();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  DateFormat.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  DateFormat.getDefault();	  Class    <?    extends    Date>    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	41	None	replace
480	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  DateType.class);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(localFormat,  DateType.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(localFormat,  DateType.class);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
481	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getRawClass());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getRawClass());	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
482	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getSimpleName(),    locale);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
483	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  timePattern);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  timePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  timePattern);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    locale);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
484	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localeFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  localeFormat);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
485	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  null  :  DateType.class;	  this.dateType    =    type!=    null?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
486	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localeFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  localeFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  localeFormat,  enUsFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
487	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  LocalFormat.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  enUsFormat,  LocalFormat.class);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat,    localFormat);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
488	[BUG]  [BUGGY]  this.dateType  =  dateType.DateType;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.DateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.DateType;	  this.dateType    =    java.sql.DateType.class;    	non-compiled	[CE]  cannot  find  symbol  DateType	9	None	replace
489	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat!=    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	replace
490	[BUG]  [BUGGY]  this.dateType  =  dateType  }  &&  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  }  &&  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  }  &&  localFormat!=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat!=    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  ';'  expected	5	None	replace
491	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  locale.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  locale.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  locale.getSimpleName());	  this.dateType    =    new    DateType(dateType.getClass(),    locale.getName());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
492	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  locale.getClass(),  locale.getName());  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  locale.getClass(),  locale.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  locale.getClass(),  locale.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    locale.getName());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
493	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Timestamp.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	this.dateType  =  dateType  ==  Timestamp.class?  null  :  dateType;	  this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	34	2	replace
494	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Timestamp.class?  null  :  dateType;  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Timestamp.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Timestamp.class?  null  :  dateType;	  this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    	compilable	  [FE]  JsonParseException  	34	2	replace
495	[BUG]  [BUGGY]  this.dateType  =  dateType.java.sql.Date.class;  [CE]  package  dateType.java.sql  does  not  exist  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.java.sql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.java.sql.Date.class;	  this.dateType    =    dateType.class;    	non-compiled	[CE]  package  dateType.java.sql  does  not  exist	15	None	replace
496	[BUG]  [BUGGY]  this.dateType  =  dateType.withSimpleName(simpleName);  [CE]  cannot  find  symbol  simpleName  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.withSimpleName(simpleName);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.withSimpleName(simpleName);	  this.dateType    =    dateType.class;    	non-compiled	[CE]  cannot  find  symbol  simpleName	15	None	replace
497	[BUG]  [BUGGY]  this.dateType  =  dateType.getDeclaringClass();  [CE]  incompatible  types  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.getDeclaringClass();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.getDeclaringClass();	  this.dateType    =    dateType.class;    	non-compiled	[CE]  incompatible  types	15	None	replace
498	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType!=  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  IllegalArgumentException  	7	10	replace
499	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  IllegalArgumentException  	7	10	replace
500	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }	  this.dateType    =    java.sql.Date.class;    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	7	None	replace
501	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  DateType.class;  }  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  DateType.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  DateType.class;  }	  this.dateType    =    java.sql.Date.class;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
502	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  datePattern);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  datePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  datePattern);	  this.dateType    =    new    DateType(dateType.getRawClass(),    locale);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
503	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timePattern);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  timePattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  timePattern);	  this.dateType    =    new    DateType(dateType.getRawClass(),    locale);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
504	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  localFormat  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  localFormat  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  localFormat  :  DateFormat.class;	  this.dateType    =    dateType!=    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	61	None	replace
505	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.getRawClass(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.getRawClass(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  Locale.getRawClass(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
506	[BUG]  [BUGGY]  this.dateType  =  new  DateType(locale.getRawClass(),  dateType.getDefault());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(locale.getRawClass(),  dateType.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(locale.getRawClass(),  dateType.getDefault());	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
507	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.class);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  Locale.class);	  this.dateType    =    new    DateType(dateType.getRawClass(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
508	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName(),  locale);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat.getName(),  locale);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
509	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat.getName(),  dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat.getName(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localeFormat.getName(),  dateType);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
510	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localeFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass().getName(),  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass().getName(),  localeFormat);	  this.dateType    =    new    DateType(dateType.getClass().getName(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
511	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localeFormat);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  localeFormat);	  this.dateType    =    new    DateType(dateType.getRawClass(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
512	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  enUsFormat);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getRawClass(),  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getRawClass(),  enUsFormat);	  this.dateType    =    new    DateType(dateType.getRawClass(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
513	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  new  DateType(dateType);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  new  DateType(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  null  :  new  DateType(dateType);	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
514	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType  +  1;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  null  :  dateType  +  1;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	115	None	replace
515	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  Null  :  dateType;  [CE]  cannot  find  symbol  Null  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  Null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  Null  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  Null	115	None	replace
516	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  type);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  type);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getRawClass(),  type);	  this.dateType    =    new    DateType(dateType.getRawClass(),    type);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
517	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_NAME  :  dateType;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class?  DateType.SQL_NAME  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.SQL_NAME  :  dateType;	  this.dateType    =    DateType.class?    DateType.SQL_NAME    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
518	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  null)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }  [CE]  variable  dateType  might  already  have  been  assigned  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  null)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType  ==  null)  {  this.dateType  =  java.sql.Date.class;  }  else  {  this.dateType  =  java.sql.Date.class;  }	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
519	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  Class  <?  extends  Date>  dateType  =  java.sql.Date.class;  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  Class  <?  extends  Date>  dateType  =  java.sql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType  ==  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  Class  <?  extends  Date>  dateType  =  java.sql.Date.class;	  	non-compiled	[CE]  ';'  expected	6	None	add
520	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  Class  <?  extends  Date>  dateType  =  java.sql.Date.class;  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  Class  <?  extends  Date>  dateType  =  java.sql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    if(dateType!=  Date.class)  {  this.dateType  =  java.sql.Date.class;  }  else  {  Class  <?  extends  Date>  dateType  =  java.sql.Date.class;	  	non-compiled	[CE]  ';'  expected	6	None	add
521	[BUG]  [BUGGY]  natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  not  a  statement  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  not  a  statement	107	None	replace
522	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ".,  or   "  +  Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	107	None	replace
523	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    enUsFormat);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
524	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  enUsFormat.getName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  enUsFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  enUsFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
525	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  localeFormat.getName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  localeFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  localeFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
526	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.class,  java.sql.Date.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.class,  java.sql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.class,  java.sql.Date.class;	  this.dateType    =    DateType.class,    java.sql.Date.class;    	non-compiled	[CE]  ';'  expected	18	None	replace
527	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateType.NULL?  null  :  dateType;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateType.NULL?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateType.NULL?  null  :  dateType;	  this.dateType    =    dateType    ==    NULL?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  DateType	117	None	replace
528	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Locale.class?  null  :  dateType;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Locale.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Locale.class?  null  :  dateType;	  this.dateType    =    dateType    ==    NULL?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Locale>	117	None	replace
529	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date?  null  :  dateType;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  java.sql.Date?  null  :  dateType;	  this.dateType    =    dateType    ==    NULL?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
530	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class,  dateType;  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class,  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class,  dateType;	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  ';'  expected	14	None	replace
531	[BUG]  [BUGGY]  this.dateType  =  DateFormat.class  |  DateFormat.SHORT;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateFormat.class  |  DateFormat.SHORT;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateFormat.class  |  DateFormat.SHORT;	  this.dateType    =    DateFormat.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	14	None	replace
532	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  locale);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  locale);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
533	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  Locale.getDefault());	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
534	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  enUsFormat);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
535	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  this.localFormat);  [CE]  cannot  find  symbol  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  this.localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getDatePattern(dateType,  this.localFormat);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
536	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  Date.class;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  dateType  =  Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  dateType  =  Date.class;	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	99	None	replace
537	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>();	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	99	None	replace
538	[BUG]  [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass();  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  dateType  =  new  Class  <?  extends  Date>(dateType.class)?  null  :  dateType.getClass();	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	99	None	replace
539	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  datePattern;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  datePattern;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType):  datePattern;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
540	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  dataType;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType):  dataType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType):  dataType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
541	[BUG]  [BUGGY]  this.dateType  =  localeFormat  ==  null?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  localeFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localeFormat  ==  null?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localeFormat  ==  null?  dateType  :  DateType.class;	  this.dateType    =    dateType    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	80	None	replace
542	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  locale);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern(),  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern(),  locale);	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
543	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localFormat.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
544	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat,  dateType.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat,  dateType.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat,  dateType.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
545	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  locale);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  datePattern,  locale);	  this.dateType    =    new    DateType(dateType.getModule(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
546	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localeFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  localeFormat);	  this.dateType    =    new    DateType(dateType.getModule(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
547	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >=  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	replace
548	[BUG]  [BUGGY]  this.dateType  =  dateType  {  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  {  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  {  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  ';'  expected	3	None	replace
549	[BUG]  [BUGGY]  this.dateType  =  dateType  [Delete]  null?  Locale.getDefault()  :  Locale.getDefault();  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  [Delete]  null?  Locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  [Delete]  null?  Locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    dateType    &&    localFormat    ==    null?    Locale.getDefault()    :    Locale.getDefault();    	non-compiled	[CE]  ';'  expected	3	None	replace
550	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	100	None	replace
551	[BUG]  [BUGGY]  natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  not  a  statement  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  not  a  statement	105	None	replace
552	[BUG]  [BUGGY]  natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  not  a  statement  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  not  a  statement	105	None	replace
553	[BUG]  [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  	105	None	replace
554	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.getDefault()  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.getDefault()  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.getDefault()  :  DateType.class;	  this.dateType    =    dateType    ||    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
555	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.None.class  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.None.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.None.class  :  DateType.class;	  this.dateType    =    dateType    ||    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
556	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localeFormat.getClass(),  localeFormat.getName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localeFormat.getClass(),  localeFormat.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localeFormat.getClass(),  localeFormat.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localeFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
557	[BUG]  [BUGGY]  this.dateType  =  DEFAULT_DATE_TYPE;  [CE]  cannot  find  symbol  DEFAULT_DATE_TYPE  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DEFAULT_DATE_TYPE;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DEFAULT_DATE_TYPE;	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DATE_TYPE	87	None	replace
558	[BUG]  [BUGGY]  this.dateType  =  DateType.CLASS;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.CLASS;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.CLASS;	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol  DateType	87	None	replace
559	[BUG]  [BUGGY]  this.dateType  =  DateType.None.class;  [CE]  package  DateType  does  not  exist  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None.class;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  package  DateType  does  not  exist	121	None	replace
560	[BUG]  [BUGGY]  this.dateType  =  DateType.NoneLocal;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NoneLocal;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NoneLocal;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
561	[BUG]  [BUGGY]  this.dateType  =  DateType.None,  dateType;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None,  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None,  dateType;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  ';'  expected	121	None	replace
562	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  Locale.getDefault());	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
563	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(dateType,  this.localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
564	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  LocalFormat.class).getName();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  LocalFormat.class).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  LocalFormat.class).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
565	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  Locale.class).getName();  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  Locale.class).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  Locale.class).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
566	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dataPattern);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dataPattern);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  dataPattern);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
567	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  locale.getModule(),  Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  locale.getModule(),  Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  locale.getModule(),  Locale.getDefault());	  this.dateType    =    new    DateType(dateType.getModule(),    Locale.getDefault());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
568	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localeFormat!=  null?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  localeFormat  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localeFormat!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localeFormat!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    ||    localFormat!=    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	92	None	replace
569	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localeFormat);	  this.dateType    =    new    DateType(dateType.getClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
570	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  DateType.valueOf(dateType);  [CE]  incomparable  types:  Class<CAP#1>  and  int  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  0?  null  :  DateType.valueOf(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  0?  null  :  DateType.valueOf(dateType);	  this.dateType    =    dateType    ==    0?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  int	76	None	replace
571	[BUG]  [BUGGY]  this.dateType  =  localFormat  <  null?  dateType  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localFormat  <  null?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localFormat  <  null?  dateType  :  DateType.class;	  this.dateType    =    dateType    <    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	78	None	replace
572	[BUG]  [BUGGY]  natureForPattern  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  not  a  statement  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureForPattern  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureForPattern  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  not  a  statement	42	None	replace
573	[BUG]  [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [CE]  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	safeGet(dateType)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  	42	None	replace
574	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "],  or   "  +  java.sql.Date.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	108	None	replace
575	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ",  localFormat);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ",  localFormat);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "] ",  localFormat);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,DateFormat)	108	None	replace
576	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "]. ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "]. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "]. ");  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	108	None	replace
577	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "], ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "], ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + "], ");  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	108	None	replace
578	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + ", ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + ", ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  dateType  + ", ");  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    in    the    range    [   "    +    dateType    +   "]   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	108	None	replace
579	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(dateType,  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(dateType,  SIMPLE_NAME);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
580	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  Date.class  &&  dateType!=  Timestamp.class;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  Date.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  Date.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	89	None	replace
581	[BUG]  [BUGGY]  this.dateType  =  dateType  ^  Date.class  &&  dateType!=  Timestamp.class;  [CE]  bad  operand  types  for  binary  operator  '^'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ^  Date.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ^  Date.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '^'	89	None	replace
582	[BUG]  [BUGGY]  this.dateType  =  DateType.class  &&  timeType!=  Timestamp.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  &&  timeType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  &&  timeType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
583	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dataType.getModule());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  dataType.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  dataType.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
584	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  state.getModule());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  state.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  state.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
585	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  DateFormat  dateType  =  dateType!=  null?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  DateFormat  dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    DateFormat  dateType  =  dateType!=  null?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	31	None	add
586	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  DateType  dateType  =  dateType!=  null?  null  :  dateType;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  DateType  dateType  =  dateType!=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    DateType  dateType  =  dateType!=  null?  null  :  dateType;	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
587	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  if(  dateType!=  null?  null  :  dateType);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType;  if(  dateType!=  null?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType!=    null?    null    :    dateType;    if(  dateType!=  null?  null  :  dateType);	  	non-compiled	[CE]  incompatible  types	31	None	add
588	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(Locale.getDefault(),  dateType);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(Locale.getDefault(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(Locale.getDefault(),  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
589	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(calendarFormat,  Locale.getDefault(),  dateType);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(calendarFormat,  Locale.getDefault(),  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(calendarFormat,  Locale.getDefault(),  dateType);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
590	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(this.dateType,  Locale.getDefault(),  localFormat);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(this.dateType,  Locale.getDefault(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(this.dateType,  Locale.getDefault(),  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
591	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(type,  Locale.getDefault(),  localFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(type,  Locale.getDefault(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(type,  Locale.getDefault(),  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
592	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(Locale.getDefault(),  dateType,  localFormat);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(Locale.getDefault(),  dateType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(Locale.getDefault(),  dateType,  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
593	[BUG]  [BUGGY]  this.dateType  =  localeFormat  ==  null?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  localeFormat  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  localeFormat  ==  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  localeFormat  ==  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    {    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	82	None	replace
594	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefault());  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getDefault());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
595	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getLocalFile());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getLocalFile());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getLocalFile());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
596	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getLocale());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getLocale());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getLocale());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
597	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultParser());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultParser());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultParser());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
598	[BUG]  [BUGGY]  this.dateType  =  DateType.class?  DateType.class  :  DateType.CLASS;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class?  DateType.class  :  DateType.CLASS;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class?  DateType.class  :  DateType.CLASS;	  this.dateType    =    DateType.class?    DateType.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
599	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  timeType.getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  timeType.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  timeType.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
600	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalName();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalName();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
601	[BUG]  [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFileName();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  Class  <?  extends  Date>  localFormat  =  dateType.getLocalFileName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	Class  <?  extends  Date>  localFormat  =  dateType.getLocalFileName();	  Class    <?    extends    Date>    localFormat    =    dateType.getRawClass();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	43	None	replace
602	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  Class  <?  extends  Date>  dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  Class  <?  extends  Date>  dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    Class  <?  extends  Date>  dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;	  	non-compiled	[CE]  variable  dateType  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	33	None	add
603	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  java.sql.Date.class.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  java.sql.Date.class.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  java.sql.Date.class.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
604	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  ctxt.getModule());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  ctxt.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  ctxt.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
605	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  java.sql.Date.class);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  java.sql.Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  java.sql.Date.class);	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
606	[BUG]  [BUGGY]  this.dateType  =  new  DateType(Locale.getDefault());  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(Locale.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(Locale.getDefault());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
607	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  locale);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  locale);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimpleName(),  datePattern,  locale);	  this.dateType    =    new    DateType(dateType.getSimpleName(),    datePattern);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
608	[BUG]  [BUGGY]  natureForPattern  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  not  a  statement  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureForPattern  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureForPattern  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
609	[BUG]  [BUGGY]  natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  not  a  statement  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
610	[BUG]  [BUGGY]  natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  not  a  statement  [FE]                                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	natureType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
611	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  localeFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  localeFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  localeFormat  :  Locale.getDefault();	  this.dateType    =    dateType    ||    localFormat    ==    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
612	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME  +  1;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NAME  +  1;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME  +  1;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
613	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME  +  SIMPLE_NAME;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NAME  +  SIMPLE_NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME  +  SIMPLE_NAME;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
614	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME  +  dateType;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NAME  +  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME  +  dateType;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
615	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME  |  DateType.DAY_OF_MONTH;  [CE]  cannot  find  symbol  DateType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NAME  |  DateType.DAY_OF_MONTH;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME  |  DateType.DAY_OF_MONTH;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
616	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType)+  1;  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.getDateType(dateType)+  1;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.getDateType(dateType)+  1;	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
617	[BUG]  [BUGGY]  DateFormat  localFormat  =  LocalFormat.localFormat(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  LocalFormat.localFormat(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  LocalFormat.localFormat(dateType);	  DateFormat    localFormat    =    LocalFormat.getDateType(dateType);    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	106	None	replace
618	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType,  localFormat):  dateType;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType,  localFormat):  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType,  localFormat):  dateType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
619	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType).getName()  :  dateType;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType).getName()  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType).getName()  :  dateType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
620	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType,  locale):  dateType;  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  new  DateType(dateType,  locale):  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  new  DateType(dateType,  locale):  dateType;	  this.dateType    =    dateType    ==    null?    new    DateType(dateType):    dateType;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
621	[BUG]  [BUGGY]  this.dateType  =  DateType.NULL  |  DateType.SEMI_NAME;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NULL  |  DateType.SEMI_NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NULL  |  DateType.SEMI_NAME;	  this.dateType    =    DateType.NULL;    	non-compiled	[CE]  cannot  find  symbol  DateType	120	None	replace
622	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.localFormat);	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
623	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.class);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.class);	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
624	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getLocalFileName());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getLocalFileName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getLocalFileName());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
625	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultParent());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultParent());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  LocalFormat.getDefaultParent());	  this.dateType    =    new    DateType(dateType,    LocalFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
626	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class  &&  dateType!=  Timestamp.class;  [CE]  incompatible  types  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class  &&  dateType!=  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class  &&  dateType!=  Timestamp.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  incompatible  types	89	None	replace
627	[BUG]  [BUGGY]  this.dateType  =  DateType.class  &&  dateType!=  TimeZone.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  &&  dateType!=  TimeZone.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  &&  dateType!=  TimeZone.class;	  this.dateType    =    DateType.class    &&    dateType!=    Timestamp.class;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
628	[BUG]  [BUGGY]  this.dateType  =  DateType.UNKNOWN  |  DateType.SEMI_NAME;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.UNKNOWN  |  DateType.SEMI_NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.UNKNOWN  |  DateType.SEMI_NAME;	  this.dateType    =    DateType.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  DateType	91	None	replace
629	[BUG]  [BUGGY]  this.dateType  =  DateType.UNKNOWN  |  DateType.DATE_TYPE;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.UNKNOWN  |  DateType.DATE_TYPE;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.UNKNOWN  |  DateType.DATE_TYPE;	  this.dateType    =    DateType.UNKNOWN;    	non-compiled	[CE]  cannot  find  symbol  DateType	91	None	replace
630	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(localFormat,  dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(localFormat,  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(localFormat,  dateType);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
631	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(localFormat);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parse(localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parse(localFormat);	  DatePattern    datePattern    =    DatePattern.parse(dateType);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
632	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateFormat.class  &&  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  DateFormat.class  &&  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateFormat.class  &&  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	61	None	replace
633	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateFormat.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  DateFormat.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateFormat.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<DateFormat>	61	None	replace
634	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateFormat.class?  dateType  :  DateFormat.class,  localFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  DateFormat.class?  dateType  :  DateFormat.class,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateFormat.class?  dateType  :  DateFormat.class,  localFormat;	  this.dateType    =    dateType!=    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	61	None	replace
635	[BUG]  [BUGGY]  this.dateType  =  dateType  <  null?  DateType.class  :  LocalFormat.class;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  <  null?  DateType.class  :  LocalFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  <  null?  DateType.class  :  LocalFormat.class;	  this.dateType    =    dateType    ||    localFormat!=    null?    DateType.class    :    LocalFormat.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	93	None	replace
636	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME  |  DateType.SEMI_NAME;  [CE]  cannot  find  symbol  DateType  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NAME  |  DateType.SEMI_NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME  |  DateType.SEMI_NAME;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
637	[BUG]  [BUGGY]  this.dateType  =  DateType.NAME?  dateType  :  DateType.class;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NAME?  dateType  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NAME?  dateType  :  DateType.class;	  this.dateType    =    DateType.NAME;    	non-compiled	[CE]  cannot  find  symbol  DateType	8	None	replace
638	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  localFormat);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  localFormat);	  this.dateType    =    dateType    ==    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	60	None	replace
639	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  enUsFormat;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  enUsFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  DateFormat.class?  dateType  :  DateFormat.class,  enUsFormat;	  this.dateType    =    dateType    ==    DateFormat.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	60	None	replace
640	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  type.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
641	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
642	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
643	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  enUsFormat.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  enUsFormat.getSimpleName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  enUsFormat.getSimpleName());	  this.dateType    =    new    DateType(dateType,    localFormat.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
644	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(localFormat);  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(localFormat);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
645	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType);  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.getInstance(this.dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.getInstance(this.dateType);	  DatePattern    datePattern    =    DatePattern.getInstance(dateType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
646	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  localFormat;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  localFormat;	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	63	None	replace
647	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  enUsFormat);  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  dateType  :  DateFormat.class,  enUsFormat);	  this.dateType    =    dateType    ==    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	63	None	replace
648	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  Java.sql.Date.class;  [CE]  package  Java.sql  does  not  exist  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  Java.sql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    this.dateType  =  Java.sql.Date.class;	  	non-compiled	[CE]  package  Java.sql  does  not  exist	6	None	add
649	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  JsonSql.Date.class;  [CE]  package  JsonSql  does  not  exist  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  JsonSql.Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    this.dateType  =  JsonSql.Date.class;	  	non-compiled	[CE]  package  JsonSql  does  not  exist	6	None	add
650	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  Date.class;  [CE]  variable  dateType  might  already  have  been  assigned  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  Date.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    this.dateType  =  Date.class;	  	non-compiled	[CE]  variable  dateType  might  already  have  been  assigned	6	None	add
651	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  java.sql.Date.Class;  [CE]  cannot  find  symbol  Class  [FE]          JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  java.sql.Date.Class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    this.dateType  =  java.sql.Date.Class;	  	non-compiled	[CE]  cannot  find  symbol  Class	6	None	add
652	[BUG]  [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  JsonDate.class;  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  java.sql.Date.class;  this.dateType  =  JsonDate.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    java.sql.Date.class;    this.dateType  =  JsonDate.class;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
653	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType);  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  null  :  dateType);	  this.dateType    =    dateType    ==    null?    null    :    dateType;    	non-compiled	[CE]  ';'  expected	30	None	replace
654	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  DateType.SQL_NAME  :  DateType.class;  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  DateType.SQL_NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  DateType.SQL_NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.SQL_NAME    :    DateType.class;    	non-compiled	[CE]  ';'  expected	19	None	replace
655	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Object.class?  super.dateType  :  dateType;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Object.class?  super.dateType  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Object.class?  super.dateType  :  dateType;	  this.dateType    =    dateType    ==    Object.class?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>	77	None	replace
656	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Object.class?  new  DateType(dateType):  null;  [CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Object.class?  new  DateType(dateType):  null;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Object.class?  new  DateType(dateType):  null;	  this.dateType    =    dateType    ==    Object.class?    null    :    dateType;    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<Object>	77	None	replace
657	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  null. ");  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	99	None	replace
658	[BUG]  [BUGGY]  aughtException( "Date  type  must  not  be  null. ");  [CE]  cannot  find  symbol  [FE]                                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  aughtException( "Date  type  must  not  be  null. ");  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	aughtException( "Date  type  must  not  be  null. ");	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    not    be    null.   ");    }    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
659	[BUG]  [BUGGY]  aughtException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  aughtException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	aughtException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class);	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
660	[BUG]  [BUGGY]  this.dateType  =  dateType!=  DateType.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  DateType.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  DateType.class  ||  dateType!=  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType!=    DateType.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
661	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  format);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  format);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  format);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
662	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  JavaDateFormat.class);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  JavaDateFormat.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  JavaDateFormat.class);	  this.dateType    =    new    DateType(dateType.getModule(),    dateType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
663	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	107	None	replace
664	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  DateType.NULL  :  dateType;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  DateType.NULL  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  DateType.NULL  :  dateType;	  this.dateType    =    dateType!=?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  DateType	35	None	replace
665	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  enUsFormat).getName();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  enUsFormat).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  enUsFormat).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
666	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat),  enUsFormat).getName();  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat),  enUsFormat).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat),  enUsFormat).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  ';'  expected	84	None	replace
667	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  datePattern).getName();  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  datePattern).getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  datePattern).getName();	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat).getName();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
668	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  localFormat);  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat.getModule(),  localFormat);	  this.dateType    =    new    DateType(dateType.getModule(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
669	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
670	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
671	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timeZone);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  timeZone);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  timeZone);	  this.dateType    =    new    DateType(dateType.getModule(),    locale);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
672	[BUG]  [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Date.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
673	[BUG]  [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  +   ",  or   "  +  Date.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Date.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
674	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  TimeZone.getDefault());  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  TimeZone.getDefault());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  TimeZone.getDefault());	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
675	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  DateFormat.class);  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  DateFormat.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  DateFormat.class);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
676	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  Timestamp.class);  [CE]  ';'  expected  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  Timestamp.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  Timestamp.class);	  this.dateType    =    DateType.class,    java.sql.Date.class);    	non-compiled	[CE]  ';'  expected	103	None	replace
677	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern()  +  SIMPLE_NAME);  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getSimplePattern()  +  SIMPLE_NAME);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getSimplePattern()  +  SIMPLE_NAME);	  this.dateType    =    new    DateType(dateType.getSimplePattern());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
678	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.class);  [CE]  cannot  find  symbol  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  Locale.class);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  Locale.class);	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
679	[BUG]  [BUGGY]  this.dateType  =  new  DateType(localFormat,  DateType.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(localFormat,  DateType.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(localFormat,  DateType.getModule());	  this.dateType    =    new    DateType(dateType,    Locale.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
680	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  This.dateType  =  dateType  ==  null?  null  :  dateType;  [CE]  cannot  find  symbol  This  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  This.dateType  =  dateType  ==  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    This.dateType  =  dateType  ==  null?  null  :  dateType;	  	non-compiled	[CE]  cannot  find  symbol  This	29	None	add
681	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(  dateType  ==  null?  null  :  dateType);  [CE]  incompatible  types  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  if(  dateType  ==  null?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    if(  dateType  ==  null?  null  :  dateType);	  	non-compiled	[CE]  incompatible  types	29	None	add
682	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  this.dateType  =  dateType  ==  null?  null  :  dateType);  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  null  :  dateType;  this.dateType  =  dateType  ==  null?  null  :  dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    null?    null    :    dateType;    this.dateType  =  dateType  ==  null?  null  :  dateType);	  	non-compiled	[CE]  ';'  expected	29	None	add
683	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  LocalFormat.class?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  LocalFormat.class?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  LocalFormat.class?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
684	[BUG]  [BUGGY]  this.dateType  =  dateType!=  LocalFormat.class?  LocalFormat.class  :  DateType.class;  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  LocalFormat.class?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  LocalFormat.class?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
685	[BUG]  [BUGGY]  this.dateType  =  dateType  }  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  }  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  }  &&  localFormat!=  null?  LocalFormat.class  :  DateType.class;	  this.dateType    =    dateType    &&    localFormat!=    null?    LocalFormat.class    :    DateType.class;    	non-compiled	[CE]  ';'  expected	46	None	replace
686	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  DateType.class  :  DateType.class;  [CE]  ';'  expected  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  DateType.class  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  DateType.class  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.class    :    DateType.class;    	non-compiled	[CE]  ';'  expected	20	None	replace
687	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localeFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localeFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  Locale.getDefault(),  localeFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    Locale.getDefault(),    localFormat);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
688	[BUG]  [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class),  localFormat);  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class),  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateTypeAdapter(dateType,  LocalFormat.class),  localFormat);	  this.dateType    =    new    DateTypeAdapter(dateType,    LocalFormat.class);    	non-compiled	[CE]  ';'  expected	90	None	replace
689	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getPattern());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  dateType.getPattern());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  dateType.getPattern());	  this.dateType    =    new    DateType(dateType.getClass(),    dateType.getName());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
690	[BUG]  [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  variable  dateType  might  not  have  been  initialized  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  variable  dateType  might  not  have  been  initialized	105	None	replace
691	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
692	[BUG]  [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType!=  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType!=    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
693	[BUG]  [BUGGY]  this.dateType  =  new  DateType(this.dateType.getRawClass());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(this.dateType.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(this.dateType.getRawClass());	  this.dateType    =    new    DateType(type.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
694	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class,  localFormat);  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class,  localFormat);	  this.dateType    =    dateType!=    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	59	None	replace
695	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class,  localFormat;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class,  localFormat;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  dateType  :  DateFormat.class,  localFormat;	  this.dateType    =    dateType!=    null?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	59	None	replace
696	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType.getName();  [CE]  incompatible  types  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType.getName();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  null  :  dateType.getName();	  this.dateType    =    dateType    >=    null?    null    :    dateType;    	non-compiled	[CE]  incompatible  types	37	None	replace
697	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType.toString();  [CE]  incompatible  types  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  null  :  dateType.toString();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  null  :  dateType.toString();	  this.dateType    =    dateType    >=    null?    null    :    dateType;    	non-compiled	[CE]  incompatible  types	37	None	replace
698	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  TimeZone.getDefault();  [CE]  ';'  expected  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  TimeZone.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  TimeZone.getDefault();	  this.dateType    =    DateType.class,    java.sql.Date.class;    	non-compiled	[CE]  ';'  expected	18	None	replace
699	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocalFile();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  DateFormat.getLocalFile();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
700	[BUG]  [BUGGY]  DateFormat  localFormat  =  dateType.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  dateType.getLocalFile();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  dateType.getLocalFile();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
701	[BUG]  [BUGGY]  DateFormat  localFormat  =  this.dateType.getLocalFile();  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  this.dateType.getLocalFile();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  this.dateType.getLocalFile();	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
702	[BUG]  [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocalMillis(dateType);  [CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DateFormat  localFormat  =  DateFormat.getLocalMillis(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DateFormat  localFormat  =  DateFormat.getLocalMillis(dateType);	  DateFormat    localFormat    =    Locale.getDefault();    	non-compiled	[CE]  variable  localFormat  is  already  defined  in  constructor  DefaultDateTypeAdapter(Class<?  extends  Date>,DateFormat,DateFormat)	39	None	replace
703	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getRawClass());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  type.getRawClass());	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
704	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getRawClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getRawClass());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getRawClass());	  this.dateType    =    new    DateType(dateType,    localFormat.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
705	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  nu  [CE]  :  expected  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  nu  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  nu	  	non-compiled	[CE]  :  expected	33	None	add
706	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    if(dateType  ==  java.sql.Date.class)  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType;  }  else  {  this.dateType  =  dateType  ==  java.sql.Date.class?  null  :  dateType	  	non-compiled	[CE]  ';'  expected	33	None	add
707	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  TimeZone.class?  null  :  dateType;  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  TimeZone.class?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  TimeZone.class?  null  :  dateType;	  this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
708	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  JsonString.class  :  JsonString.valueOf(dateType);  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  JsonString.class  :  JsonString.valueOf(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  JsonString.class  :  JsonString.valueOf(dateType);	  this.dateType    =    dateType    ==    java.sql.Date.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
709	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null  &&  localFormat!=  DateType.class?  localFormat  :  DateType.class;  [CE]  cannot  find  symbol  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null  &&  localFormat!=  DateType.class?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null  &&  localFormat!=  DateType.class?  localFormat  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
710	[BUG]  [BUGGY]  this.dateType  =  dateType  >>  null?  localFormat  :  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >>  null?  localFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >>  null?  localFormat  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	118	None	replace
711	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  localeFormat  :  DateType.class;  [CE]  cannot  find  symbol  localeFormat  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  localeFormat  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  localeFormat  :  DateType.class;	  this.dateType    =    dateType    }    &&    localFormat!=    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  cannot  find  symbol  localeFormat	118	None	replace
712	[BUG]  [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.getDateType(dateType):  DateType.class;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.getDateType(dateType):  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ||  localFormat  ==  null?  LocalFormat.getDateType(dateType):  DateType.class;	  this.dateType    =    dateType    ||    localFormat    ==    null?    localFormat    :    DateType.class;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
713	[BUG]  [BUGGY]  this.dateType  =  DateType.NONE  |  DateType.SEMI_NAME;  [CE]  cannot  find  symbol  DateType  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.NONE  |  DateType.SEMI_NAME;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.NONE  |  DateType.SEMI_NAME;	  this.dateType    =    DateType.NONE;    	non-compiled	[CE]  cannot  find  symbol  DateType	119	None	replace
714	[BUG]  [BUGGY]  this.dateType  =  dateType  >=  null?  localFormat  :  Locale.getDefault();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  >=  null?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  >=  null?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    <    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	replace
715	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Locale.getDefault()?  localFormat  :  Locale.getDefault();  [CE]  incomparable  types:  Class<CAP#1>  and  Locale  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Locale.getDefault()?  localFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Locale.getDefault()?  localFormat  :  Locale.getDefault();	  this.dateType    =    dateType    <    null?    localFormat    :    Locale.getDefault();    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Locale	72	None	replace
716	[BUG]  [BUGGY]  this.dateType  =  DateType.TYPE;  [CE]  cannot  find  symbol  DateType  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.TYPE;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.TYPE;	  this.dateType    =    java.sql.DateType;    	non-compiled	[CE]  cannot  find  symbol  DateType	87	None	replace
717	[BUG]  [BUGGY]  DatePattern  datePattern  =  DatePattern.parseDatePattern(dateType);  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  DatePattern  datePattern  =  DatePattern.parseDatePattern(dateType);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	DatePattern  datePattern  =  DatePattern.parseDatePattern(dateType);	  DatePattern    datePattern    =    DatePattern.getDatePattern(dateType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
718	[BUG]  [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + "  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
719	[BUG]  [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [CE]  illegal  start  of  type  [FE]                                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  }  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	}  else  if(dateType  ==  Date.class)  {  throw  new  IllegalArgumentException( "Date  type  must  be  one  of   "  +  Date.class  + ",  or   "  +  Timestamp.class  + ",  but  was   "  +  dateType);  }	  if(dateType    ==    Date.class)    {    throw    new    IllegalArgumentException(   "Date    type    must    be    one    of       "    +    Date.class    +   ",    or       "    +    Timestamp.class    +   "    but    was       "    +    dateType);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
720	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  locale.getDefault()  :  Locale.getDefault();  [CE]  cannot  find  symbol  locale  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  locale.getDefault()  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  locale.getDefault()  :  Locale.getDefault();	  this.dateType    =    localFormat!=    null?    dateType    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  locale	86	None	replace
721	[BUG]  [BUGGY]  this.dateType  =  dateType!=  null?  localeFormat  :  Locale.getDefault();  [CE]  cannot  find  symbol  localeFormat  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType!=  null?  localeFormat  :  Locale.getDefault();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType!=  null?  localeFormat  :  Locale.getDefault();	  this.dateType    =    localFormat!=    null?    dateType    :    Locale.getDefault();    	non-compiled	[CE]  cannot  find  symbol  localeFormat	86	None	replace
722	[BUG]  [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.SHORT;  [CE]  cannot  find  symbol  DateType  [FE]                  JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.SHORT;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None?  dateType  :  DateType.SHORT;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
723	[BUG]  [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.NULL;  [CE]  cannot  find  symbol  DateType  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.None?  dateType  :  DateType.NULL;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.None?  dateType  :  DateType.NULL;	  this.dateType    =    DateType.None;    	non-compiled	[CE]  cannot  find  symbol  DateType	121	None	replace
724	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.class,  java.sql.Timestamp.class;  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.class,  java.sql.Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.class,  java.sql.Timestamp.class;	  this.dateType    =    DateType.class,    java.sql.Timestamp.class;    	non-compiled	[CE]  ';'  expected	101	None	replace
725	[BUG]  [BUGGY]  this.dateType  =  DateType.class  |  DateType.class,  Timestamp.class;  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class  |  DateType.class,  Timestamp.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class  |  DateType.class,  Timestamp.class;	  this.dateType    =    DateType.class,    java.sql.Timestamp.class;    	non-compiled	[CE]  ';'  expected	101	None	replace
726	[BUG]  [BUGGY]  this.dateType  =  DateType.class!=  null?  null  :  dateType;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class!=  null?  null  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class!=  null?  null  :  dateType;	  this.dateType    =    type!=    null?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
727	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  dateType;  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
728	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  dateType;  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  this.dateType  =  dateType;  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
729	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + "] ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	add	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + "] ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
730	[BUG]  [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + "] ");  }  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + "] ");  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	if(dateType  ==  Date.class)  {  this.dateType  =  Date.class;  }  else  {  throw  new  IllegalArgumentException( "Date  type  must  be  in  the  range  [ "  +  Date.class  + "] ");  }	  this.dateType    =    java.sql.Date.class;    	compilable	  [FE]  JsonParseException  	7	2	replace
731	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  if(  this.dateType  ==  Date.class?  null  :  dateType;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  if(  this.dateType  ==  Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(  dateType  ==  Date.class?  null  :  dateType);  if(  this.dateType  ==  Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  ')'  expected	114	None	add
732	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  if(dateType  ==  Date.class?  null  :  dateType);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  if(dateType  ==  Date.class?  null  :  dateType);  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(  dateType  ==  Date.class?  null  :  dateType);  if(dateType  ==  Date.class?  null  :  dateType);  }	  	non-compiled	[CE]  illegal  start  of  type	114	None	add
733	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  if(  dateType  ==  Date.class?  null  :  dateType;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType;  if(  dateType  ==  Date.class?  null  :  dateType);  if(  dateType  ==  Date.class?  null  :  dateType;  }  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    if(  dateType  ==  Date.class?  null  :  dateType);  if(  dateType  ==  Date.class?  null  :  dateType;  }	  	non-compiled	[CE]  ')'  expected	114	None	add
734	[BUG]  [BUGGY]  this.dateType  =  dateType.toString();  [CE]  incompatible  types  [FE]            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType.toString();  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType.toString();	  this.dateType    =    dateType.class;    	non-compiled	[CE]  incompatible  types	15	None	replace
735	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getClass().getName());  [CE]  cannot  find  symbol  [FE]                          JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getClass().getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getClass().getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
736	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getClass().getName());  [CE]  cannot  find  symbol  [FE]                            JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  type.getClass().getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  type.getClass().getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
737	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  LocalFormat.class.getName());  [CE]  cannot  find  symbol  [FE]                              JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  LocalFormat.class.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  LocalFormat.class.getName());	  this.dateType    =    new    DateType(dateType,    localFormat.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
738	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  JsonSqlDate.class  :  dateType;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  JsonSqlDate.class  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  JsonSqlDate.class  :  dateType;	  this.dateType    =    dateType    ==?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
739	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  null?  DateType.UNKNOWN  :  dateType;  [CE]  cannot  find  symbol  DateType  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  null?  DateType.UNKNOWN  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  null?  DateType.UNKNOWN  :  dateType;	  this.dateType    =    dateType    ==?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  DateType	36	None	replace
740	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getModule());  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  localeFormat.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
741	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getModule());  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType,  localFormat,  _localFormat.getModule());	  this.dateType    =    new    DateType(dateType,    localFormat.getModule());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
742	[BUG]  [BUGGY]  this.dateType  =  DateType.class,  DateType.NAME  :  DateType.class;  [CE]  ';'  expected  [FE]                JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  DateType.class,  DateType.NAME  :  DateType.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  DateType.class,  DateType.NAME  :  DateType.class;	  this.dateType    =    DateType.class?    DateType.NAME    :    DateType.class;    	non-compiled	[CE]  ';'  expected	17	None	replace
743	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  super.dateType  :  dateType;  [CE]  cannot  find  symbol  dateType  [FE]    AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  super.dateType  :  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  super.dateType  :  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  cannot  find  symbol  dateType	115	None	replace
744	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  new  Date(dateType):  dateType;  [CE]  no  suitable  constructor  found  for  Date(Class<CAP#1>)  [FE]      AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  new  Date(dateType):  dateType;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  new  Date(dateType):  dateType;	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  no  suitable  constructor  found  for  Date(Class<CAP#1>)	115	None	replace
745	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType,  localFormat);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date.class?  null  :  dateType,  localFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date.class?  null  :  dateType,  localFormat);	  this.dateType    =    dateType    ==    Date.class?    null    :    dateType;    	non-compiled	[CE]  ';'  expected	115	None	replace
746	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  context.getModule());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getModule(),  context.getModule());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getModule(),  context.getModule());	  this.dateType    =    new    DateType(dateType.getModule(),    dateType.getModule());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
747	[BUG]  [BUGGY]  this.dateType  =  dateType  ==  Date,  DateFormat.class?  dateType  :  DateFormat.class;  [CE]  ';'  expected  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  dateType  ==  Date,  DateFormat.class?  dateType  :  DateFormat.class;  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  dateType  ==  Date,  DateFormat.class?  dateType  :  DateFormat.class;	  this.dateType    =    dateType    ==    java.sql.Date.class?    dateType    :    DateFormat.class;    	non-compiled	[CE]  ';'  expected	64	None	replace
748	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  enUsFormat);  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  enUsFormat);  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  enUsFormat);	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
749	[BUG]  [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  type.getName());  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      DefaultDateTypeAdapter(final  Class<?  extends  Date>  dateType,  DateFormat  enUsFormat,  DateFormat  localFormat)  {  if  (  dateType  !=  Date.class  &&  dateType  !=  java.sql.Date.class  &&  dateType  !=  Timestamp.class  )  {  throw  new  IllegalArgumentException(     "Date  type  must  be  one  of       "  +  Date.class  +       ",       "  +  Timestamp.class  +       ",  or       "  +  java.sql.Date.class  +       "  but  was       "  +  dateType);  }      [BUGGY]  this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  type.getName());  [BUGGY]      this.enUsFormat  =  enUsFormat;  this.localFormat  =  localFormat;  }  [CLASS]  DefaultDateTypeAdapter  [METHOD]  <init>  [RETURN_TYPE]  DateFormat)  Date>  dateType  DateFormat  enUsFormat  DateFormat  localFormat  [VARIABLES]  Class  dateType  String  SIMPLE_NAME  datePattern  boolean  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	0.4472135954999579	78	78	2	replace	this.dateType  =  new  DateType(dateType.getClass(),  localFormat,  type.getName());	  this.dateType    =    new    DateType(dateType.getClass(),    localFormat.getName());    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
