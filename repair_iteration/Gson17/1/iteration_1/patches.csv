bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
2	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
3	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSON_TYPE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
4	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JSONToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
5	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.nextString()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
6	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
7	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  JsonToken.VALUE_NUMBER_INT);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
8	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  unreachable  statement	2	None	add
9	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  Throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    Throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	2	None	add
10	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  JsonParseException(   "The  date  should  be  a  string  value.   ");  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  JsonParseException(   "The  date  should  be  a  string  value.   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    JsonParseException(   "The  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
11	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  incompatible  types  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value. ");	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	15	None	replace
12	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in);	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	15	None	replace
13	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.nextString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	15	None	replace
14	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, ");  [CE]  incompatible  types  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value, ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value, ");	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	15	None	replace
15	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	15	None	replace
16	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  incompatible  types  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value: "  +  in.getClass());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	15	None	replace
17	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");	  	non-compiled	[CE]  unreachable  statement	8	None	add
18	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  Throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  Throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    Throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");	  	non-compiled	[CE]  not  a  statement	8	None	add
19	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  JsonParseException(   "The  Date  should  be  a  string  value   ");  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  JsonParseException(   "The  Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    JsonParseException(   "The  Date  should  be  a  string  value   ");	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
20	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	        if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  JsonParseException  	11	2	add
21	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }  [FE]  JsonParseException  [FE]    IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  JsonParseException  	11	2	add
22	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	        if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  JsonParseException  	11	2	add
23	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonParseException  [FE]      IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  JsonParseException  	11	2	add
24	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
25	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
26	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	        if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	compilable	  [FE]  JsonParseException  	11	2	add
27	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [FE]  JsonParseException  [FE]            IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  in.close();  return  null;  }	  	compilable	  [FE]  JsonParseException  	11	2	add
28	[BUG]  [BUGGY]      String  datePattern  =  in.readString();  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      String  datePattern  =  in.readString();  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        String  datePattern  =  in.readString();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
29	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	        if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  JsonParseException  	11	2	add
30	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [FE]  JsonParseException  [FE]                IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  in.close();  }	  	compilable	  [FE]  JsonParseException  	11	2	add
31	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.getValue();  return  new  Date(datePattern);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
32	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	5	2	replace
33	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	5	2	replace
34	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
35	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	5	None	replace
36	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	5	2	replace
37	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	5	2	replace
38	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	5	None	replace
39	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	5	2	replace
40	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [FE]  JsonParseException  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	5	2	replace
41	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
42	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
43	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.n ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
44	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
45	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date  is  null. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
46	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
47	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  the  date. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
48	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
49	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Please  check  that  this  value  is  not  valid. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
50	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getKey()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
51	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	14	None	replace
52	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in,  in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
53	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getValue()));  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getValue()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. "  +  Integer.toHexString(in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
54	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_STRING);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
55	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  throw  new  JsonParseException( "Date  should  be  a  string  value   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  throw  new  JsonParseException( "Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    throw  new  JsonParseException( "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  unreachable  statement	4	None	add
56	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  JsonParseException(   "Date  should  be  a  string  value   ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  JsonParseException(   "Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    JsonParseException(   "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
57	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  Throw  new  JsonParseException( "Date  should  be  a  string  value   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  Throw  new  JsonParseException( "Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    Throw  new  JsonParseException( "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  not  a  statement	4	None	add
58	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  throw  new  JsonParseException(, "Date  should  be  a  string  value   ");  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  throw  new  JsonParseException(, "Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    throw  new  JsonParseException(, "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
59	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value. ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
60	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in);	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
61	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
62	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
63	[BUG]  [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [CE]  <identifier>  expected  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throwables.throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
64	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
65	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	9	2	replace
66	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	9	2	replace
67	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
68	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	9	2	replace
69	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	9	2	replace
70	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	9	2	replace
71	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	9	2	replace
72	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	9	None	replace
73	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	9	1	replace
74	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.nextString());  [FE]  IllegalStateException  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	9	1	replace
75	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  IllegalArgumentException( " ");	  throw    new    JsonTokenException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	10	2	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  IllegalArgumentException( " ");	  throw    new    JsonTokenException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	10	2	replace
77	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.getClass());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
78	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
79	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  name: "  +  in.nextString());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
80	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getValue());  [CE]  cannot  find  symbol  [FE]                          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getValue());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  String  value: "  +  in.getValue());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
81	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unexpected  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
82	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  throw  new  JsonParseException( "This  date  should  be  a  string  value   ");  [CE]  unreachable  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  throw  new  JsonParseException( "This  date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    throw  new  JsonParseException( "This  date  should  be  a  string  value   ");	  	non-compiled	[CE]  unreachable  statement	6	None	add
83	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  JsonParseException(   "This  date  should  be  a  string  value   ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  JsonParseException(   "This  date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    JsonParseException(   "This  date  should  be  a  string  value   ");	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
84	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  Throw  new  JsonParseException( "This  date  should  be  a  string  value   ");  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  Throw  new  JsonParseException( "This  date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    Throw  new  JsonParseException( "This  date  should  be  a  string  value   ");	  	non-compiled	[CE]  not  a  statement	6	None	add
85	[BUG]  [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value   ");  [CE]  not  a  statement  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "This  date  should  be  a  string  value   ");  JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    JsonToken  throw  new  JsonParseException( "This  date  should  be  a  string  value   ");	  	non-compiled	[CE]  not  a  statement	6	None	add
86	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	7	2	replace
87	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	7	2	replace
88	[BUG]  [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "This  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
89	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in);  [CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in);	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,JsonReader)	7	None	replace
90	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	7	2	replace
91	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	7	2	replace
92	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	7	2	replace
93	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [FE]  JsonParseException  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  JsonParseException  	7	2	replace
94	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in);	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
95	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
96	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
97	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.toString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
98	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value: "  +  in.nextString());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
99	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
100	[BUG]  [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ");  [FE]  IllegalStateException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	5	1	replace
101	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "Date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	5	None	replace
102	[BUG]  [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ");  [CE]  <identifier>  expected  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.throw  new  JsonTokenException( "The  date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
103	[BUG]  [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException  in  =  new  JsonTokenException( "The  date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
104	[BUG]  [BUGGY]  JsonTokenException.from(in, "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  JsonTokenException  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonTokenException.from(in, "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonTokenException.from(in, "The  date  should  be  a  string  value ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol  JsonTokenException	1	None	replace
105	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getClass());  [CE]  cannot  find  symbol  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
106	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]    IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
107	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]      IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
108	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  in.close();  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	in.close();	      	compilable	  [FE]  IllegalStateException  	12	1	replace
109	[BUG]  [BUGGY]  in.close();  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  in.close();  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	in.close();	      	compilable	  [FE]  IllegalStateException  	12	1	replace
110	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
111	[BUG]  [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]            IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
112	[BUG]  [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonDescriptorException( "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonDescriptorException( "The  date  should  be  a  string  value ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
113	[BUG]  [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonDescriptorException( "The  date  should  be  a  string  value ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
114	[BUG]  [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [CE]  not  a  statement  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	Throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  not  a  statement	16	None	replace
115	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	7	None	replace
116	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	7	None	replace
117	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	7	1	replace
118	[BUG]  [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ");  [FE]  IllegalStateException  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "This  date  should  be  a  string  value ");	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	7	1	replace
119	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING));  [CE]  cannot  find  symbol  VALUE_STRING  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JsonToken.VALUE_STRING));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	13	None	replace
120	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString())+  1);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
121	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_NAME));  [CE]  cannot  find  symbol  JSON_NAME  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_NAME));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  JSON_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  cannot  find  symbol  JSON_NAME	13	None	replace
122	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]              JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  INVALID_DATE);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
123	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  Date  should  be  a  string  value   ");  JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    JsonToken  throw  new  JsonParseException( "The  Date  should  be  a  string  value   ");	  	non-compiled	[CE]  not  a  statement	8	None	add
124	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY);  [CE]  cannot  find  symbol  START_ARRAY  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.START_ARRAY);	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	10	None	replace
125	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.STRING);  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.STRING);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.STRING);	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
126	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString();  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonToken  t  =  in.readFromString();  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString();	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
127	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
128	[BUG]  [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING);  [CE]  cannot  find  symbol  [FE]                          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonToken  t  =  in.readFromString(JsonToken.STRING);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFromString(JsonToken.STRING);	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
129	[BUG]  [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  [FE]                            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonToken  t  =  in.readFrom(JsonToken.END_ARRAY);	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
130	[BUG]  [BUGGY]      if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]    IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]      if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	        if(in.peek()  ==  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	  	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	11	None	add
131	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value. ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	3	None	replace
132	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	3	1	replace
133	[BUG]  [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value. ");  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  date  should  be  a  string  value. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  IllegalStateException  	3	1	replace
134	[BUG]  [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
135	[BUG]  [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  variable  in  is  already  defined  in  method  read(JsonReader)  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	JsonParseException  in  =  new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  variable  in  is  already  defined  in  method  read(JsonReader)	9	None	replace
136	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	9	1	replace
137	[BUG]  [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ");  [FE]  IllegalStateException  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	compilable	  [FE]  IllegalStateException  	9	1	replace
138	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	9	None	replace
139	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	15	None	replace
140	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ",  in.toString());	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	15	None	replace
141	[BUG]  [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "Date  should  be  a  string  value   ");  JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    JsonToken  throw  new  JsonParseException( "Date  should  be  a  string  value   ");	  	non-compiled	[CE]  not  a  statement	4	None	add
142	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ");  [CE]  incompatible  types  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  String  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  String  value ");	  return    new    JsonParseException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	15	None	replace
143	[BUG]  [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ");  [CE]  incompatible  types  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	9	None	replace
144	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "The    Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	9	None	replace
145	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]    IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
146	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]      IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.getString();  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
147	[BUG]  [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [CE]  cannot  find  symbol  VALUE_STRING  [FE]        IllegalStateException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	if(in.peek()!=  JsonToken.VALUE_STRING)  {  String  datePattern  =  in.readString();  return  new  Date(datePattern);  }  else  {  return  new  Date(datePattern);  }	      	non-compiled	[CE]  cannot  find  symbol  VALUE_STRING	12	None	replace
148	[BUG]  [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException(   "The  date  should  be  a  string  value.   ");  JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    JsonToken  throw  new  JsonParseException( "The  date  should  be  a  string  value.   ");	  	non-compiled	[CE]  not  a  statement	2	None	add
149	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: ");  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: ");	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
150	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: ");  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unknown  string: ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: ");	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
151	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.nextString());  [CE]  cannot  find  symbol  [FE]                      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.nextString());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
152	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Unknown  string: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Unknown  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
153	[BUG]  [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [CE]  cannot  find  symbol  [FE]                          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "Can  not  read  string: "  +  in.getClass());	  throw    new    JsonTokenException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
154	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.getClass());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,Class<CAP#1>)	5	None	replace
155	[BUG]  [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ");  [CE]  incompatible  types  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  return  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "Date  should  be  a  string  value ");	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  incompatible  types	5	None	replace
156	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "Date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	5	None	replace
157	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  SIMPLE_NAME);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
158	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString(),  SIMPLE_NAME));	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
159	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()),  in.nextString());	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.nextString()));    	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	13	None	replace
160	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
161	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value, ");	  throw    new    JsonTokenException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
162	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [CE]  no  suitable  constructor  found  for  JsonParseException(String,String)  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.nextString());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  JsonParseException(String,String)	7	None	replace
163	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]      JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonParseException(   "This    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
164	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()),  JsonToken.VALUE_NULL);	  throw    new    JsonParseException(   "The    date    should    be    a    string    value   "    +    Integer.toHexString(in.getValue()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
165	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ",  in.getMessage());	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
166	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [CE]  cannot  find  symbol  [FE]            JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value, ");	  throw    new    JsonDescriptorException(   "The    date    should    be    a    string    value   ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
167	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
168	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {    [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");  [BUGGY]    }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value.  Try  again. ");	  throw    new    JsonParseException(   "The    date    should    be    a    string    value.   ");    	compilable	  [FE]  JsonParseException  	3	2	replace
