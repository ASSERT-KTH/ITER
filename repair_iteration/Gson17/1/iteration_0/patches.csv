bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]    JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonTokenException( "The  date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( "The  date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  date  should  be  a  string  value. ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
3	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [FE]  JsonParseException  [FE]      JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value. ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value. ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
4	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "Date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
5	[BUG]  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ");  [FE]  JsonParseException  [FE]        JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "Date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "Date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
6	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "This  date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
7	[BUG]  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [FE]  JsonParseException  [FE]          JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "This  date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "This  date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
8	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	throw  new  JsonParseException( "The  Date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
9	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [FE]  JsonParseException  [FE]            JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "The  Date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  Date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  JsonParseException  	1	2	replace
10	[BUG]  [BUGGY]  throw  new  JsonTokenException( " ");  [CE]  cannot  find  symbol  [FE]              JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonTokenException( " ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonTokenException( " ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]    [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	add	  	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  IllegalStateException  	1	1	replace
12	[BUG]  [BUGGY]    [FE]  IllegalStateException  [FE]                JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]    [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	  	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	compilable	  [FE]  IllegalStateException  	1	1	replace
13	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [FE]    JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.nextString()));	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));  [CE]  cannot  find  symbol  [FE]      JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonParseException( "The  date  should  be  a  string  value "  +  Integer.toHexString(in.getValue()));	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ");  [CE]  incompatible  types  [FE]    JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  return  new  JsonParseException( "The  date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	return  new  JsonParseException( "The  date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	non-compiled	[CE]  incompatible  types	1	None	replace
16	[BUG]  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [CE]  cannot  find  symbol  [FE]      JsonParseException  [CONTEXT]  public  Date  read(JsonReader  in)  throws  IOException  {  if  (in.peek()  !=  JsonToken.STRING)  {  [BUGGY]  throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");  [BUGGY]  }  Date  date  =  deserializeToDate(in.nextString());  if  (dateType  ==  Date.class)  {  return  date;  }  else  if  (dateType  ==  Timestamp.class)  {  return  new  Timestamp(date.getTime());  }  else  if  (dateType  ==  java.sql.Date.class)  {  return  new  java.sql.Date(date.getTime());  }  else  {  [CLASS]  DefaultDateTypeAdapter  [METHOD]  read  [RETURN_TYPE]  Date  JsonReader  in  [VARIABLES]  JsonReader  in  Class  dateType  String  SIMPLE_NAME  dateFormatAsString  datePattern  boolean  Date  date  DateFormat  enUsFormat  localFormat  	projects/Gson17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	1.0	100	100	2	replace	throw  new  JsonDescriptorException( "The  date  should  be  a  string  value ");	throw  new  JsonParseException( "The  date  should  be  a  string  value ");  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
